digraph ParseTree {
node [shape=box, style=filled, color=".7 .3 1.0"];
node0 [label="file"];
node1 [label="pouDeclaration"];
node0 -> node1;
node2 [label="programDeclaration"];
node1 -> node2;
node3 [label="PROGRAM"];
node2 -> node3;
node4 [label="programName"];
node2 -> node4;
node5 [label="Main"];
node4 -> node5;
node6 [label="normalVarDeclarations"];
node2 -> node6;
node7 [label="VAR"];
node6 -> node7;
node8 [label="varDeclarationInit"];
node6 -> node8;
node9 [label="variableList"];
node8 -> node9;
node10 [label="variableName"];
node9 -> node10;
node11 [label="x"];
node10 -> node11;
node12 [label=":"];
node8 -> node12;
node13 [label="simpleSpecificationInit"];
node8 -> node13;
node14 [label="simpleSpecification"];
node13 -> node14;
node15 [label="elementaryTypeName"];
node14 -> node15;
node16 [label="intTypeName"];
node15 -> node16;
node17 [label="INT"];
node16 -> node17;
node18 [label=";"];
node6 -> node18;
node19 [label="END_VAR"];
node6 -> node19;
node20 [label="programBody"];
node2 -> node20;
node21 [label="statementList"];
node20 -> node21;
node22 [label="statement"];
node21 -> node22;
node23 [label="selectionStatement"];
node22 -> node23;
node24 [label="ifStatement"];
node23 -> node24;
node25 [label="IF"];
node24 -> node25;
node26 [label="ifCondition"];
node24 -> node26;
node27 [label="expression"];
node26 -> node27;
node28 [label="expression"];
node27 -> node28;
node29 [label="literalValue"];
node28 -> node29;
node30 [label="intLiteral"];
node29 -> node30;
node31 [label="intLiteralValue"];
node30 -> node31;
node32 [label="6"];
node31 -> node32;
node33 [label="comparisonOperator"];
node27 -> node33;
node34 [label=">"];
node33 -> node34;
node35 [label="expression"];
node27 -> node35;
node36 [label="literalValue"];
node35 -> node36;
node37 [label="intLiteral"];
node36 -> node37;
node38 [label="intLiteralValue"];
node37 -> node38;
node39 [label="8"];
node38 -> node39;
node40 [label="THEN"];
node24 -> node40;
node41 [label="ifStatementList"];
node24 -> node41;
node42 [label="statementList"];
node41 -> node42;
node43 [label="statement"];
node42 -> node43;
node44 [label="assignStatement"];
node43 -> node44;
node45 [label="variable"];
node44 -> node45;
node46 [label="symbolicVariable"];
node45 -> node46;
node47 [label="variableAccess"];
node46 -> node47;
node48 [label="variableName"];
node47 -> node48;
node49 [label="x"];
node48 -> node49;
node50 [label="assignOperator"];
node44 -> node50;
node51 [label=":="];
node50 -> node51;
node52 [label="expression"];
node44 -> node52;
node53 [label="expression"];
node52 -> node53;
node54 [label="literalValue"];
node53 -> node54;
node55 [label="intLiteral"];
node54 -> node55;
node56 [label="intLiteralValue"];
node55 -> node56;
node57 [label="2"];
node56 -> node57;
node58 [label="addSubOperator"];
node52 -> node58;
node59 [label="+"];
node58 -> node59;
node60 [label="expression"];
node52 -> node60;
node61 [label="literalValue"];
node60 -> node61;
node62 [label="intLiteral"];
node61 -> node62;
node63 [label="intLiteralValue"];
node62 -> node63;
node64 [label="1"];
node63 -> node64;
node65 [label=";"];
node42 -> node65;
node66 [label="statement"];
node42 -> node66;
node67 [label="assignStatement"];
node66 -> node67;
node68 [label="variable"];
node67 -> node68;
node69 [label="symbolicVariable"];
node68 -> node69;
node70 [label="variableAccess"];
node69 -> node70;
node71 [label="variableName"];
node70 -> node71;
node72 [label="X"];
node71 -> node72;
node73 [label="assignOperator"];
node67 -> node73;
node74 [label=":="];
node73 -> node74;
node75 [label="expression"];
node67 -> node75;
node76 [label="literalValue"];
node75 -> node76;
node77 [label="intLiteral"];
node76 -> node77;
node78 [label="intLiteralValue"];
node77 -> node78;
node79 [label="1"];
node78 -> node79;
node80 [label=";"];
node42 -> node80;
node81 [label="ELSIF"];
node24 -> node81;
node82 [label="elsifCondition"];
node24 -> node82;
node83 [label="expression"];
node82 -> node83;
node84 [label="literalValue"];
node83 -> node84;
node85 [label="boolLiteral"];
node84 -> node85;
node86 [label="boolLiteralValue"];
node85 -> node86;
node87 [label="true"];
node86 -> node87;
node88 [label="THEN"];
node24 -> node88;
node89 [label="elsifStatementList"];
node24 -> node89;
node90 [label="statementList"];
node89 -> node90;
node91 [label="statement"];
node90 -> node91;
node92 [label="subprogControlStatement"];
node91 -> node92;
node93 [label="functionCallStatement"];
node92 -> node93;
node94 [label="functionCall"];
node93 -> node94;
node95 [label="functionAccess"];
node94 -> node95;
node96 [label="functionName"];
node95 -> node96;
node97 [label="x"];
node96 -> node97;
node98 [label="("];
node94 -> node98;
node99 [label=")"];
node94 -> node99;
node100 [label=";"];
node90 -> node100;
node101 [label="ELSE"];
node24 -> node101;
node102 [label="elseStatementList"];
node24 -> node102;
node103 [label="statementList"];
node102 -> node103;
node104 [label="statement"];
node103 -> node104;
node105 [label="assignStatement"];
node104 -> node105;
node106 [label="variable"];
node105 -> node106;
node107 [label="symbolicVariable"];
node106 -> node107;
node108 [label="variableAccess"];
node107 -> node108;
node109 [label="variableName"];
node108 -> node109;
node110 [label="x"];
node109 -> node110;
node111 [label="assignOperator"];
node105 -> node111;
node112 [label=":="];
node111 -> node112;
node113 [label="expression"];
node105 -> node113;
node114 [label="literalValue"];
node113 -> node114;
node115 [label="intLiteral"];
node114 -> node115;
node116 [label="intLiteralValue"];
node115 -> node116;
node117 [label="1"];
node116 -> node117;
node118 [label=";"];
node103 -> node118;
node119 [label="END_IF"];
node24 -> node119;
node120 [label=";"];
node21 -> node120;
node121 [label="END_PROGRAM"];
node2 -> node121;
}
