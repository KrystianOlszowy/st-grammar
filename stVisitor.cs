//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/kryst/Desktop/Praca magisterska/st-grammar/st.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="stParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IstVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.project"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProject([NotNull] stParser.ProjectContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.variableBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableBlock([NotNull] stParser.VariableBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.variableBlockKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableBlockKeyword([NotNull] stParser.VariableBlockKeywordContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDeclaration([NotNull] stParser.VariableDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.initialValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInitialValue([NotNull] stParser.InitialValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] stParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] stParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] stParser.AssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.blockCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlockCall([NotNull] stParser.BlockCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.bracketedExppression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBracketedExppression([NotNull] stParser.BracketedExppressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] stParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.negation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNegation([NotNull] stParser.NegationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperator([NotNull] stParser.OperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.logicalBinaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalBinaryOperator([NotNull] stParser.LogicalBinaryOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValue([NotNull] stParser.ValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.variableValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableValue([NotNull] stParser.VariableValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="stParser.dataType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDataType([NotNull] stParser.DataTypeContext context);
}
