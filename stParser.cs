//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/kryst/Desktop/Praca magisterska/st-grammar/st.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class stParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RELATIVE_ADDRESS=1, DIRECT_VARIABLE=2, SINGLE_BYTE_STRING=3, DOUBLE_BYTE_STRING=4, 
		UNSIGNED_DURATION=5, DATE_TIME_VALUE=6, DATE_VALUE=7, CLOCK_TIME=8, UNSIGNED_REAL_VALUE=9, 
		UNSIGNED_INT=10, BINARY_INT=11, OCTAL_INT=12, HEX_INT=13, BOOLEAN=14, 
		USINT=15, UINT=16, UDINT=17, ULINT=18, SINT=19, INT=20, DINT=21, LINT=22, 
		REAL=23, LREAL=24, BYTE=25, WORD=26, DWORD=27, LWORD=28, BOOL=29, FALSE=30, 
		TRUE=31, STRING=32, WSTRING=33, CHAR=34, WCHAR=35, TIME=36, LTIME=37, 
		TIME_OF_DAY=38, LTIME_OF_DAY=39, DATE=40, LDATE=41, DATE_AND_TIME=42, 
		LDATE_AND_TIME=43, TYPE=44, END_TYPE=45, ARRAY=46, OF=47, STRUCT=48, OVERLAP=49, 
		END_STRUCT=50, REF_TO=51, REF=52, NULL=53, VAR_INPUT=54, R_EDGE=55, F_EDGE=56, 
		VAR_OUTPUT=57, VAR_IN_OUT=58, RETAIN=59, NON_RETAIN=60, END_VAR=61, VAR=62, 
		CONSTANT=63, VAR_TEMP=64, VAR_EXTERNAL=65, VAR_GLOBAL=66, AT=67, FUNCTION=68, 
		END_FUNCTION=69, FUNCTION_BLOCK=70, FINAL=71, ABSTRACT=72, EXTENDS=73, 
		IMPLEMENTS=74, END_FUNCTION_BLOCK=75, METHOD=76, THIS=77, OVERRIDE=78, 
		END_METHOD=79, CLASS=80, END_CLASS=81, INTERFACE=82, END_INTERFACE=83, 
		PUBLIC=84, PROTECTED=85, PRIVATE=86, INTERNAL=87, SUPER=88, RETURN=89, 
		PROGRAM=90, END_PROGRAM=91, VAR_ACCESS=92, NAMESPACE=93, END_NAMESPACE=94, 
		USING=95, IF=96, THEN=97, ELSIF=98, ELSE=99, END_IF=100, CASE=101, END_CASE=102, 
		EXIT=103, CONTINUE=104, FOR=105, TO=106, BY=107, DO=108, END_FOR=109, 
		WHILE=110, END_WHILE=111, REPEAT=112, UNTIL=113, END_REPEAT=114, PLUS=115, 
		MINUS=116, ASTERISK=117, POWER=118, SLASH=119, MOD=120, EQUAL=121, NOT_EQUAL=122, 
		LESS=123, LESS_EQUAL=124, GREATER=125, GREATER_EQUAL=126, AND=127, OR=128, 
		NOT=129, XOR=130, AMPERSAND=131, ASSIGN=132, ASSIGN_OUT=133, ATTEMPT_ASSIGN=134, 
		LEFT_PAREN=135, RIGHT_PAREN=136, LEFT_BRACKET=137, RIGHT_BRACKET=138, 
		COMMA=139, COLON=140, SEMICOLON=141, DOT=142, RANGE=143, HASH=144, CARET=145, 
		PERCENT=146, UNDERSCORE=147, IDENTIFIER=148, CPDEV_AUTO=149, CPDEV_READ=150, 
		CPDEV_WRITE=151, CPDEV_COMMENT=152, CPDEV_VMASM=153, PRAGMA=154, LINE_COMMENT=155, 
		SLASH_COMMENT=156, BRACE_COMMENT=157, WHITESPACE=158;
	public const int
		RULE_file = 0, RULE_pouDeclaration = 1, RULE_namespaceDeclaration = 2, 
		RULE_namespaceElements = 3, RULE_namespaceAccess = 4, RULE_namespaceName = 5, 
		RULE_usingDirective = 6, RULE_programDeclaration = 7, RULE_programName = 8, 
		RULE_programBody = 9, RULE_dataTypeDeclaration = 10, RULE_typeDeclaration = 11, 
		RULE_simpleTypeDeclaration = 12, RULE_simpleTypeName = 13, RULE_simpleSpecificationInit = 14, 
		RULE_simpleInit = 15, RULE_simpleSpecification = 16, RULE_elementaryTypeName = 17, 
		RULE_stringTypeName = 18, RULE_stringSize = 19, RULE_subrangeTypeDeclaration = 20, 
		RULE_subrangeTypeName = 21, RULE_subrangeSpecificationInit = 22, RULE_subrangeSpecification = 23, 
		RULE_subrangeInit = 24, RULE_subrange = 25, RULE_subrangeBegin = 26, RULE_subrangeEnd = 27, 
		RULE_enumTypeDeclaration = 28, RULE_enumTypeName = 29, RULE_enumNamedSpecificationInit = 30, 
		RULE_enumElementSpecificationInit = 31, RULE_enumElementName = 32, RULE_enumElementValue = 33, 
		RULE_enumValue = 34, RULE_enumSpecificationInit = 35, RULE_arrayTypeDeclaration = 36, 
		RULE_arrayTypeName = 37, RULE_arraySpecificationInit = 38, RULE_arraySpecification = 39, 
		RULE_arrayInit = 40, RULE_arrayElementInit = 41, RULE_arrayElementMultiplier = 42, 
		RULE_arrayElementInitValue = 43, RULE_arrayConformDeclaration = 44, RULE_arrayConformand = 45, 
		RULE_arrayVarDeclarationInit = 46, RULE_structTypeDeclaration = 47, RULE_structTypeName = 48, 
		RULE_structTypeSpecification = 49, RULE_structDeclaration = 50, RULE_structElementDeclaration = 51, 
		RULE_structElementName = 52, RULE_locatedAt = 53, RULE_relativeAddress = 54, 
		RULE_partlySpecifiedAddress = 55, RULE_multibitPartAccess = 56, RULE_structSpecificationInit = 57, 
		RULE_structSpecification = 58, RULE_structInit = 59, RULE_structElementInit = 60, 
		RULE_structVarDeclarationInit = 61, RULE_stringTypeDeclaration = 62, RULE_stringDerivedTypeName = 63, 
		RULE_referenceTypeDeclaration = 64, RULE_referenceTypeName = 65, RULE_referenceSpecificationInit = 66, 
		RULE_referenceSpecification = 67, RULE_referenceValue = 68, RULE_referenceAddress = 69, 
		RULE_referenceName = 70, RULE_dereference = 71, RULE_functionBlockDeclaration = 72, 
		RULE_functionBlockName = 73, RULE_functionBlockInstanceName = 74, RULE_functionBlockBody = 75, 
		RULE_functionBlockVarDeclarationInit = 76, RULE_functionBlockVarSpecificationInit = 77, 
		RULE_methodDeclaration = 78, RULE_methodName = 79, RULE_dataTypeAccess = 80, 
		RULE_derivedTypeAccess = 81, RULE_derivedTypeName = 82, RULE_variable = 83, 
		RULE_symbolicVariable = 84, RULE_variableAccess = 85, RULE_variableName = 86, 
		RULE_variableElementSelect = 87, RULE_subscriptList = 88, RULE_ioVarDeclarations = 89, 
		RULE_inputVarDeclarations = 90, RULE_inputVarDeclaration = 91, RULE_edgeDeclaration = 92, 
		RULE_varDeclarationInit = 93, RULE_variableList = 94, RULE_outputVarDeclarations = 95, 
		RULE_outputVarDeclaration = 96, RULE_inOutVarDeclarations = 97, RULE_inOutVarDeclaration = 98, 
		RULE_normalVarDeclarations = 99, RULE_otherVarDeclarations = 100, RULE_nonRetainVarDeclarations = 101, 
		RULE_retainVarDeclarations = 102, RULE_locatedPartlyVarDeclaration = 103, 
		RULE_locatedPartlyVar = 104, RULE_varSpecification = 105, RULE_locatedVarDeclarations = 106, 
		RULE_locatedVarDeclaration = 107, RULE_tempVarDeclarations = 108, RULE_externalVarDeclarations = 109, 
		RULE_externalDeclaration = 110, RULE_globalVarName = 111, RULE_globalVarDeclarations = 112, 
		RULE_globalVarDeclaration = 113, RULE_globalVarSpecification = 114, RULE_locatedVarSpecificationInit = 115, 
		RULE_stringVarDeclarationInit = 116, RULE_stringSpecificationInit = 117, 
		RULE_stringSpecification = 118, RULE_stringInit = 119, RULE_functionDeclaration = 120, 
		RULE_functionBody = 121, RULE_classDeclaration = 122, RULE_classTypeName = 123, 
		RULE_className = 124, RULE_classInstanceName = 125, RULE_accessSpecification = 126, 
		RULE_interfaceDeclaration = 127, RULE_interfaceName = 128, RULE_interfaceTypeList = 129, 
		RULE_methodPrototype = 130, RULE_interfaceVarDeclarationInit = 131, RULE_interfaceSpecificationInit = 132, 
		RULE_interfaceValue = 133, RULE_statementList = 134, RULE_statement = 135, 
		RULE_assignStatement = 136, RULE_assignOperator = 137, RULE_subprogControlStatement = 138, 
		RULE_functionCallStatement = 139, RULE_functionCall = 140, RULE_functionAccess = 141, 
		RULE_functionName = 142, RULE_invocationStatement = 143, RULE_parameterAssign = 144, 
		RULE_superCallStatement = 145, RULE_returnStatement = 146, RULE_selectionStatement = 147, 
		RULE_ifStatement = 148, RULE_ifCondition = 149, RULE_ifStatementList = 150, 
		RULE_elsifCondition = 151, RULE_elsifStatementList = 152, RULE_elseStatementList = 153, 
		RULE_caseStatement = 154, RULE_caseSelection = 155, RULE_caseList = 156, 
		RULE_caseListElement = 157, RULE_loopStatement = 158, RULE_forStatement = 159, 
		RULE_controlVariable = 160, RULE_forRange = 161, RULE_whileStatement = 162, 
		RULE_repeatStatement = 163, RULE_expression = 164, RULE_derefOperator = 165, 
		RULE_unaryOperator = 166, RULE_signOperator = 167, RULE_exponentOperator = 168, 
		RULE_multDivModOperator = 169, RULE_addSubOperator = 170, RULE_comparisonOperator = 171, 
		RULE_andOperator = 172, RULE_xorOperator = 173, RULE_orOperator = 174, 
		RULE_exitStatement = 175, RULE_continueStatement = 176, RULE_variableValue = 177, 
		RULE_literalValue = 178, RULE_intLiteral = 179, RULE_intLiteralValue = 180, 
		RULE_intTypeName = 181, RULE_multibitsLiteral = 182, RULE_multibitsLiteralValue = 183, 
		RULE_multibitsTypeName = 184, RULE_realLiteral = 185, RULE_realLiteralValue = 186, 
		RULE_realTypeName = 187, RULE_boolLiteral = 188, RULE_boolLiteralValue = 189, 
		RULE_boolTypeName = 190, RULE_charLiteral = 191, RULE_charString = 192, 
		RULE_charStringTypeName = 193, RULE_timeLiteral = 194, RULE_durationLiteral = 195, 
		RULE_durationLiteralValue = 196, RULE_durationTypeName = 197, RULE_timeOfDayLiteral = 198, 
		RULE_timeOfDayLiteralValue = 199, RULE_timeOfDayTypeName = 200, RULE_dateLiteral = 201, 
		RULE_dateLiteralValue = 202, RULE_dateTypeName = 203, RULE_dateAndTimeLiteral = 204, 
		RULE_dateAndTimeLiteralValue = 205, RULE_dateAndTimeTypeName = 206, RULE_directVariable = 207;
	public static readonly string[] ruleNames = {
		"file", "pouDeclaration", "namespaceDeclaration", "namespaceElements", 
		"namespaceAccess", "namespaceName", "usingDirective", "programDeclaration", 
		"programName", "programBody", "dataTypeDeclaration", "typeDeclaration", 
		"simpleTypeDeclaration", "simpleTypeName", "simpleSpecificationInit", 
		"simpleInit", "simpleSpecification", "elementaryTypeName", "stringTypeName", 
		"stringSize", "subrangeTypeDeclaration", "subrangeTypeName", "subrangeSpecificationInit", 
		"subrangeSpecification", "subrangeInit", "subrange", "subrangeBegin", 
		"subrangeEnd", "enumTypeDeclaration", "enumTypeName", "enumNamedSpecificationInit", 
		"enumElementSpecificationInit", "enumElementName", "enumElementValue", 
		"enumValue", "enumSpecificationInit", "arrayTypeDeclaration", "arrayTypeName", 
		"arraySpecificationInit", "arraySpecification", "arrayInit", "arrayElementInit", 
		"arrayElementMultiplier", "arrayElementInitValue", "arrayConformDeclaration", 
		"arrayConformand", "arrayVarDeclarationInit", "structTypeDeclaration", 
		"structTypeName", "structTypeSpecification", "structDeclaration", "structElementDeclaration", 
		"structElementName", "locatedAt", "relativeAddress", "partlySpecifiedAddress", 
		"multibitPartAccess", "structSpecificationInit", "structSpecification", 
		"structInit", "structElementInit", "structVarDeclarationInit", "stringTypeDeclaration", 
		"stringDerivedTypeName", "referenceTypeDeclaration", "referenceTypeName", 
		"referenceSpecificationInit", "referenceSpecification", "referenceValue", 
		"referenceAddress", "referenceName", "dereference", "functionBlockDeclaration", 
		"functionBlockName", "functionBlockInstanceName", "functionBlockBody", 
		"functionBlockVarDeclarationInit", "functionBlockVarSpecificationInit", 
		"methodDeclaration", "methodName", "dataTypeAccess", "derivedTypeAccess", 
		"derivedTypeName", "variable", "symbolicVariable", "variableAccess", "variableName", 
		"variableElementSelect", "subscriptList", "ioVarDeclarations", "inputVarDeclarations", 
		"inputVarDeclaration", "edgeDeclaration", "varDeclarationInit", "variableList", 
		"outputVarDeclarations", "outputVarDeclaration", "inOutVarDeclarations", 
		"inOutVarDeclaration", "normalVarDeclarations", "otherVarDeclarations", 
		"nonRetainVarDeclarations", "retainVarDeclarations", "locatedPartlyVarDeclaration", 
		"locatedPartlyVar", "varSpecification", "locatedVarDeclarations", "locatedVarDeclaration", 
		"tempVarDeclarations", "externalVarDeclarations", "externalDeclaration", 
		"globalVarName", "globalVarDeclarations", "globalVarDeclaration", "globalVarSpecification", 
		"locatedVarSpecificationInit", "stringVarDeclarationInit", "stringSpecificationInit", 
		"stringSpecification", "stringInit", "functionDeclaration", "functionBody", 
		"classDeclaration", "classTypeName", "className", "classInstanceName", 
		"accessSpecification", "interfaceDeclaration", "interfaceName", "interfaceTypeList", 
		"methodPrototype", "interfaceVarDeclarationInit", "interfaceSpecificationInit", 
		"interfaceValue", "statementList", "statement", "assignStatement", "assignOperator", 
		"subprogControlStatement", "functionCallStatement", "functionCall", "functionAccess", 
		"functionName", "invocationStatement", "parameterAssign", "superCallStatement", 
		"returnStatement", "selectionStatement", "ifStatement", "ifCondition", 
		"ifStatementList", "elsifCondition", "elsifStatementList", "elseStatementList", 
		"caseStatement", "caseSelection", "caseList", "caseListElement", "loopStatement", 
		"forStatement", "controlVariable", "forRange", "whileStatement", "repeatStatement", 
		"expression", "derefOperator", "unaryOperator", "signOperator", "exponentOperator", 
		"multDivModOperator", "addSubOperator", "comparisonOperator", "andOperator", 
		"xorOperator", "orOperator", "exitStatement", "continueStatement", "variableValue", 
		"literalValue", "intLiteral", "intLiteralValue", "intTypeName", "multibitsLiteral", 
		"multibitsLiteralValue", "multibitsTypeName", "realLiteral", "realLiteralValue", 
		"realTypeName", "boolLiteral", "boolLiteralValue", "boolTypeName", "charLiteral", 
		"charString", "charStringTypeName", "timeLiteral", "durationLiteral", 
		"durationLiteralValue", "durationTypeName", "timeOfDayLiteral", "timeOfDayLiteralValue", 
		"timeOfDayTypeName", "dateLiteral", "dateLiteralValue", "dateTypeName", 
		"dateAndTimeLiteral", "dateAndTimeLiteralValue", "dateAndTimeTypeName", 
		"directVariable"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "'USINT'", "'UINT'", "'UDINT'", "'ULINT'", "'SINT'", 
		"'INT'", "'DINT'", "'LINT'", "'REAL'", "'LREAL'", "'BYTE'", "'WORD'", 
		"'DWORD'", "'LWORD'", "'BOOL'", "'FALSE'", "'TRUE'", "'STRING'", "'WSTRING'", 
		"'CHAR'", "'WCHAR'", null, null, null, null, null, null, null, null, "'TYPE'", 
		"'END_TYPE'", "'ARRAY'", "'OF'", "'STRUCT'", "'OVERLAP'", "'END_STRUCT'", 
		"'REF_TO'", "'REF'", "'NULL'", "'VAR_INPUT'", "'R_EDGE'", "'F_EDGE'", 
		"'VAR_OUTPUT'", "'VAR_IN_OUT'", "'RETAIN'", "'NON_RETAIN'", "'END_VAR'", 
		"'VAR'", "'CONSTANT'", "'VAR_TEMP'", "'VAR_EXTERNAL'", "'VAR_GLOBAL'", 
		"'AT'", "'FUNCTION'", "'END_FUNCTION'", "'FUNCTION_BLOCK'", "'FINAL'", 
		"'ABSTRACT'", "'EXTENDS'", "'IMPLEMENTS'", "'END_FUNCTION_BLOCK'", "'METHOD'", 
		"'THIS'", "'OVERRIDE'", "'END_METHOD'", "'CLASS'", "'END_CLASS'", "'INTERFACE'", 
		"'END_INTERFACE'", "'PUBLIC'", "'PROTECTED'", "'PRIVATE'", "'INTERAL'", 
		"'SUPER'", "'RETURN'", "'PROGRAM'", "'END_PROGRAM'", "'VAR_ACCESS'", "'NAMESPACE'", 
		"'END_NAMESPACE'", "'USING'", "'IF'", "'THEN'", "'ELSIF'", "'ELSE'", "'END_IF'", 
		"'CASE'", "'END_CASE'", "'EXIT'", "'CONTINUE'", "'FOR'", "'TO'", "'BY'", 
		"'DO'", "'END_FOR'", "'WHILE'", "'END_WHILE'", "'REPEAT'", "'UNTIL'", 
		"'END_REPEAT'", "'+'", "'-'", "'*'", "'**'", "'/'", "'MOD'", "'='", "'<>'", 
		"'<'", "'<='", "'>'", "'>='", "'AND'", "'OR'", "'NOT'", "'XOR'", "'&'", 
		"':='", "'=>'", "'?='", "'('", "')'", "'['", "']'", "','", "':'", "';'", 
		"'.'", "'..'", "'#'", "'^'", "'%'", "'_'", null, "'(*$AUTO*)'", "'(*$READ*)'", 
		"'(*$WRITE*)'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RELATIVE_ADDRESS", "DIRECT_VARIABLE", "SINGLE_BYTE_STRING", "DOUBLE_BYTE_STRING", 
		"UNSIGNED_DURATION", "DATE_TIME_VALUE", "DATE_VALUE", "CLOCK_TIME", "UNSIGNED_REAL_VALUE", 
		"UNSIGNED_INT", "BINARY_INT", "OCTAL_INT", "HEX_INT", "BOOLEAN", "USINT", 
		"UINT", "UDINT", "ULINT", "SINT", "INT", "DINT", "LINT", "REAL", "LREAL", 
		"BYTE", "WORD", "DWORD", "LWORD", "BOOL", "FALSE", "TRUE", "STRING", "WSTRING", 
		"CHAR", "WCHAR", "TIME", "LTIME", "TIME_OF_DAY", "LTIME_OF_DAY", "DATE", 
		"LDATE", "DATE_AND_TIME", "LDATE_AND_TIME", "TYPE", "END_TYPE", "ARRAY", 
		"OF", "STRUCT", "OVERLAP", "END_STRUCT", "REF_TO", "REF", "NULL", "VAR_INPUT", 
		"R_EDGE", "F_EDGE", "VAR_OUTPUT", "VAR_IN_OUT", "RETAIN", "NON_RETAIN", 
		"END_VAR", "VAR", "CONSTANT", "VAR_TEMP", "VAR_EXTERNAL", "VAR_GLOBAL", 
		"AT", "FUNCTION", "END_FUNCTION", "FUNCTION_BLOCK", "FINAL", "ABSTRACT", 
		"EXTENDS", "IMPLEMENTS", "END_FUNCTION_BLOCK", "METHOD", "THIS", "OVERRIDE", 
		"END_METHOD", "CLASS", "END_CLASS", "INTERFACE", "END_INTERFACE", "PUBLIC", 
		"PROTECTED", "PRIVATE", "INTERNAL", "SUPER", "RETURN", "PROGRAM", "END_PROGRAM", 
		"VAR_ACCESS", "NAMESPACE", "END_NAMESPACE", "USING", "IF", "THEN", "ELSIF", 
		"ELSE", "END_IF", "CASE", "END_CASE", "EXIT", "CONTINUE", "FOR", "TO", 
		"BY", "DO", "END_FOR", "WHILE", "END_WHILE", "REPEAT", "UNTIL", "END_REPEAT", 
		"PLUS", "MINUS", "ASTERISK", "POWER", "SLASH", "MOD", "EQUAL", "NOT_EQUAL", 
		"LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", "AND", "OR", "NOT", 
		"XOR", "AMPERSAND", "ASSIGN", "ASSIGN_OUT", "ATTEMPT_ASSIGN", "LEFT_PAREN", 
		"RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA", "COLON", "SEMICOLON", 
		"DOT", "RANGE", "HASH", "CARET", "PERCENT", "UNDERSCORE", "IDENTIFIER", 
		"CPDEV_AUTO", "CPDEV_READ", "CPDEV_WRITE", "CPDEV_COMMENT", "CPDEV_VMASM", 
		"PRAGMA", "LINE_COMMENT", "SLASH_COMMENT", "BRACE_COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "st.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static stParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public stParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public stParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PouDeclarationContext[] pouDeclaration() {
			return GetRuleContexts<PouDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PouDeclarationContext pouDeclaration(int i) {
			return GetRuleContext<PouDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext[] globalVarDeclarations() {
			return GetRuleContexts<GlobalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext globalVarDeclarations(int i) {
			return GetRuleContext<GlobalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext[] dataTypeDeclaration() {
			return GetRuleContexts<DataTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext dataTypeDeclaration(int i) {
			return GetRuleContext<DataTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext[] interfaceDeclaration() {
			return GetRuleContexts<InterfaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration(int i) {
			return GetRuleContext<InterfaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 430;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 416;
					pouDeclaration();
					}
					break;
				case 2:
					{
					State = 420;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==USING) {
						{
						{
						State = 417;
						usingDirective();
						}
						}
						State = 422;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 428;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NAMESPACE:
						{
						State = 423;
						namespaceDeclaration();
						}
						break;
					case VAR_GLOBAL:
						{
						State = 424;
						globalVarDeclarations();
						}
						break;
					case TYPE:
						{
						State = 425;
						dataTypeDeclaration();
						}
						break;
					case CLASS:
						{
						State = 426;
						classDeclaration();
						}
						break;
					case INTERFACE:
						{
						State = 427;
						interfaceDeclaration();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & 2885462196748289L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PouDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockDeclarationContext functionBlockDeclaration() {
			return GetRuleContext<FunctionBlockDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramDeclarationContext programDeclaration() {
			return GetRuleContext<ProgramDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public PouDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pouDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPouDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PouDeclarationContext pouDeclaration() {
		PouDeclarationContext _localctx = new PouDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_pouDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 434;
				usingDirective();
				}
				}
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNCTION:
				{
				State = 440;
				functionDeclaration();
				}
				break;
			case FUNCTION_BLOCK:
				{
				State = 441;
				functionBlockDeclaration();
				}
				break;
			case PROGRAM:
				{
				State = 442;
				programDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(stParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext namespaceAccess() {
			return GetRuleContext<NamespaceAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceElementsContext namespaceElements() {
			return GetRuleContext<NamespaceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_NAMESPACE() { return GetToken(stParser.END_NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(stParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			Match(NAMESPACE);
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERNAL) {
				{
				State = 446;
				Match(INTERNAL);
				}
			}

			State = 449;
			namespaceAccess();
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 450;
				usingDirective();
				}
				}
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 456;
			namespaceElements();
			State = 457;
			Match(END_NAMESPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext[] dataTypeDeclaration() {
			return GetRuleContexts<DataTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext dataTypeDeclaration(int i) {
			return GetRuleContext<DataTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockDeclarationContext[] functionBlockDeclaration() {
			return GetRuleContexts<FunctionBlockDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockDeclarationContext functionBlockDeclaration(int i) {
			return GetRuleContext<FunctionBlockDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext[] interfaceDeclaration() {
			return GetRuleContexts<InterfaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration(int i) {
			return GetRuleContext<InterfaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public NamespaceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceElementsContext namespaceElements() {
		NamespaceElementsContext _localctx = new NamespaceElementsContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 465;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TYPE:
					{
					State = 459;
					dataTypeDeclaration();
					}
					break;
				case FUNCTION:
					{
					State = 460;
					functionDeclaration();
					}
					break;
				case FUNCTION_BLOCK:
					{
					State = 461;
					functionBlockDeclaration();
					}
					break;
				case CLASS:
					{
					State = 462;
					classDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 463;
					interfaceDeclaration();
					}
					break;
				case NAMESPACE:
					{
					State = 464;
					namespaceDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & 563293634691073L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public NamespaceAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceAccessContext namespaceAccess() {
		NamespaceAccessContext _localctx = new NamespaceAccessContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespaceAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			namespaceName();
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 470;
				Match(DOT);
				State = 471;
				namespaceName();
				}
				}
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(stParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext[] namespaceAccess() {
			return GetRuleContexts<NamespaceAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext namespaceAccess(int i) {
			return GetRuleContext<NamespaceAccessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(stParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(USING);
			State = 480;
			namespaceAccess();
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 481;
				Match(COMMA);
				State = 482;
				namespaceAccess();
				}
				}
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 488;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(stParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramNameContext programName() {
			return GetRuleContext<ProgramNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramBodyContext programBody() {
			return GetRuleContext<ProgramBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_PROGRAM() { return GetToken(stParser.END_PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarDeclarationsContext[] locatedVarDeclarations() {
			return GetRuleContexts<LocatedVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarDeclarationsContext locatedVarDeclarations(int i) {
			return GetRuleContext<LocatedVarDeclarationsContext>(i);
		}
		public ProgramDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramDeclarationContext programDeclaration() {
		ProgramDeclarationContext _localctx = new ProgramDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_programDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(PROGRAM);
			State = 491;
			programName();
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 3353L) != 0)) {
				{
				State = 498;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 492;
					ioVarDeclarations();
					}
					break;
				case 2:
					{
					State = 493;
					externalVarDeclarations();
					}
					break;
				case 3:
					{
					State = 494;
					normalVarDeclarations();
					}
					break;
				case 4:
					{
					State = 495;
					tempVarDeclarations();
					}
					break;
				case 5:
					{
					State = 496;
					otherVarDeclarations();
					}
					break;
				case 6:
					{
					State = 497;
					locatedVarDeclarations();
					}
					break;
				}
				}
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 503;
			programBody();
			State = 504;
			Match(END_PROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ProgramNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramNameContext programName() {
		ProgramNameContext _localctx = new ProgramNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_programName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ProgramBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramBodyContext programBody() {
		ProgramBodyContext _localctx = new ProgramBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_programBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(stParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_TYPE() { return GetToken(stParser.END_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public DataTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeDeclarationContext dataTypeDeclaration() {
		DataTypeDeclarationContext _localctx = new DataTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_dataTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			Match(TYPE);
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 511;
				typeDeclaration();
				State = 512;
				Match(SEMICOLON);
				}
				}
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 518;
			Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeDeclarationContext simpleTypeDeclaration() {
			return GetRuleContext<SimpleTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeDeclarationContext subrangeTypeDeclaration() {
			return GetRuleContext<SubrangeTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeDeclarationContext enumTypeDeclaration() {
			return GetRuleContext<EnumTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeDeclarationContext arrayTypeDeclaration() {
			return GetRuleContext<ArrayTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeDeclarationContext structTypeDeclaration() {
			return GetRuleContext<StructTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeDeclarationContext stringTypeDeclaration() {
			return GetRuleContext<StringTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeDeclarationContext referenceTypeDeclaration() {
			return GetRuleContext<ReferenceTypeDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeDeclaration);
		try {
			State = 527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520;
				simpleTypeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 521;
				subrangeTypeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 522;
				enumTypeDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 523;
				arrayTypeDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 524;
				structTypeDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 525;
				stringTypeDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 526;
				referenceTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		public SimpleTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeDeclarationContext simpleTypeDeclaration() {
		SimpleTypeDeclarationContext _localctx = new SimpleTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_simpleTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			simpleTypeName();
			State = 530;
			Match(COLON);
			State = 531;
			simpleSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleInitContext simpleInit() {
			return GetRuleContext<SimpleInitContext>(0);
		}
		public SimpleSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSpecificationInitContext simpleSpecificationInit() {
		SimpleSpecificationInitContext _localctx = new SimpleSpecificationInitContext(Context, State);
		EnterRule(_localctx, 28, RULE_simpleSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			simpleSpecification();
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 536;
				Match(ASSIGN);
				State = 537;
				simpleInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleInitContext simpleInit() {
		SimpleInitContext _localctx = new SimpleInitContext(Context, State);
		EnterRule(_localctx, 30, RULE_simpleInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		public SimpleSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSpecificationContext simpleSpecification() {
		SimpleSpecificationContext _localctx = new SimpleSpecificationContext(Context, State);
		EnterRule(_localctx, 32, RULE_simpleSpecification);
		try {
			State = 544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
			case REAL:
			case LREAL:
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
			case BOOL:
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
			case TIME:
			case LTIME:
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
			case DATE:
			case LDATE:
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 542;
				elementaryTypeName();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 543;
				derivedTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementaryTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeNameContext realTypeName() {
			return GetRuleContext<RealTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTypeNameContext boolTypeName() {
			return GetRuleContext<BoolTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsTypeNameContext multibitsTypeName() {
			return GetRuleContext<MultibitsTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext stringTypeName() {
			return GetRuleContext<StringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTypeNameContext dateTypeName() {
			return GetRuleContext<DateTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayTypeNameContext timeOfDayTypeName() {
			return GetRuleContext<TimeOfDayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeTypeNameContext dateAndTimeTypeName() {
			return GetRuleContext<DateAndTimeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationTypeNameContext durationTypeName() {
			return GetRuleContext<DurationTypeNameContext>(0);
		}
		public ElementaryTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementaryTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementaryTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementaryTypeNameContext elementaryTypeName() {
		ElementaryTypeNameContext _localctx = new ElementaryTypeNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_elementaryTypeName);
		try {
			State = 555;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 546;
				intTypeName();
				}
				break;
			case REAL:
			case LREAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 547;
				realTypeName();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 548;
				boolTypeName();
				}
				break;
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 549;
				multibitsTypeName();
				}
				break;
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 550;
				stringTypeName();
				}
				break;
			case DATE:
			case LDATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 551;
				dateTypeName();
				}
				break;
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
				EnterOuterAlt(_localctx, 7);
				{
				State = 552;
				timeOfDayTypeName();
				}
				break;
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 8);
				{
				State = 553;
				dateAndTimeTypeName();
				}
				break;
			case TIME:
			case LTIME:
				EnterOuterAlt(_localctx, 9);
				{
				State = 554;
				durationTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringSizeContext stringSize() {
			return GetRuleContext<StringSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(stParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WCHAR() { return GetToken(stParser.WCHAR, 0); }
		public StringTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeNameContext stringTypeName() {
		StringTypeNameContext _localctx = new StringTypeNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_stringTypeName);
		int _la;
		try {
			State = 566;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case WSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==WSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 558;
					Match(LEFT_BRACKET);
					State = 559;
					stringSize();
					State = 560;
					Match(RIGHT_BRACKET);
					}
				}

				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 564;
				Match(CHAR);
				}
				break;
			case WCHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 565;
				Match(WCHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public StringSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringSizeContext stringSize() {
		StringSizeContext _localctx = new StringSizeContext(Context, State);
		EnterRule(_localctx, 38, RULE_stringSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(UNSIGNED_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeNameContext subrangeTypeName() {
			return GetRuleContext<SubrangeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationInitContext subrangeSpecificationInit() {
			return GetRuleContext<SubrangeSpecificationInitContext>(0);
		}
		public SubrangeTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeDeclarationContext subrangeTypeDeclaration() {
		SubrangeTypeDeclarationContext _localctx = new SubrangeTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_subrangeTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			subrangeTypeName();
			State = 571;
			Match(COLON);
			State = 572;
			subrangeSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public SubrangeTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeNameContext subrangeTypeName() {
		SubrangeTypeNameContext _localctx = new SubrangeTypeNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_subrangeTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationContext subrangeSpecification() {
			return GetRuleContext<SubrangeSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeInitContext subrangeInit() {
			return GetRuleContext<SubrangeInitContext>(0);
		}
		public SubrangeSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeSpecificationInitContext subrangeSpecificationInit() {
		SubrangeSpecificationInitContext _localctx = new SubrangeSpecificationInitContext(Context, State);
		EnterRule(_localctx, 44, RULE_subrangeSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			subrangeSpecification();
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 577;
				Match(ASSIGN);
				State = 578;
				subrangeInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		public SubrangeSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeSpecificationContext subrangeSpecification() {
		SubrangeSpecificationContext _localctx = new SubrangeSpecificationContext(Context, State);
		EnterRule(_localctx, 46, RULE_subrangeSpecification);
		try {
			State = 587;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 581;
				intTypeName();
				State = 582;
				Match(LEFT_PAREN);
				State = 583;
				subrange();
				State = 584;
				Match(RIGHT_PAREN);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586;
				derivedTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignOperatorContext signOperator() {
			return GetRuleContext<SignOperatorContext>(0);
		}
		public SubrangeInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeInitContext subrangeInit() {
		SubrangeInitContext _localctx = new SubrangeInitContext(Context, State);
		EnterRule(_localctx, 48, RULE_subrangeInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 589;
				signOperator();
				}
			}

			State = 592;
			Match(UNSIGNED_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeBeginContext subrangeBegin() {
			return GetRuleContext<SubrangeBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(stParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeEndContext subrangeEnd() {
			return GetRuleContext<SubrangeEndContext>(0);
		}
		public SubrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeContext subrange() {
		SubrangeContext _localctx = new SubrangeContext(Context, State);
		EnterRule(_localctx, 50, RULE_subrange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			subrangeBegin();
			State = 595;
			Match(RANGE);
			State = 596;
			subrangeEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubrangeBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeBeginContext subrangeBegin() {
		SubrangeBeginContext _localctx = new SubrangeBeginContext(Context, State);
		EnterRule(_localctx, 52, RULE_subrangeBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubrangeEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeEndContext subrangeEnd() {
		SubrangeEndContext _localctx = new SubrangeEndContext(Context, State);
		EnterRule(_localctx, 54, RULE_subrangeEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumNamedSpecificationInitContext enumNamedSpecificationInit() {
			return GetRuleContext<EnumNamedSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecificationInitContext enumSpecificationInit() {
			return GetRuleContext<EnumSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		public EnumTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeDeclarationContext enumTypeDeclaration() {
		EnumTypeDeclarationContext _localctx = new EnumTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_enumTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			enumTypeName();
			State = 603;
			Match(COLON);
			State = 609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17588964786176L) != 0)) {
					{
					State = 604;
					elementaryTypeName();
					}
				}

				State = 607;
				enumNamedSpecificationInit();
				}
				break;
			case 2:
				{
				State = 608;
				enumSpecificationInit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public EnumTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeNameContext enumTypeName() {
		EnumTypeNameContext _localctx = new EnumTypeNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_enumTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNamedSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementSpecificationInitContext[] enumElementSpecificationInit() {
			return GetRuleContexts<EnumElementSpecificationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementSpecificationInitContext enumElementSpecificationInit(int i) {
			return GetRuleContext<EnumElementSpecificationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public EnumNamedSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumNamedSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumNamedSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNamedSpecificationInitContext enumNamedSpecificationInit() {
		EnumNamedSpecificationInitContext _localctx = new EnumNamedSpecificationInitContext(Context, State);
		EnterRule(_localctx, 60, RULE_enumNamedSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			Match(LEFT_PAREN);
			State = 614;
			enumElementSpecificationInit();
			State = 619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 615;
				Match(COMMA);
				State = 616;
				enumElementSpecificationInit();
				}
				}
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 622;
			Match(RIGHT_PAREN);
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 623;
				Match(ASSIGN);
				State = 624;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementValueContext enumElementValue() {
			return GetRuleContext<EnumElementValueContext>(0);
		}
		public EnumElementSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementSpecificationInitContext enumElementSpecificationInit() {
		EnumElementSpecificationInitContext _localctx = new EnumElementSpecificationInitContext(Context, State);
		EnterRule(_localctx, 62, RULE_enumElementSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			enumElementName();
			State = 630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 628;
				Match(ASSIGN);
				State = 629;
				enumElementValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public EnumElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementNameContext enumElementName() {
		EnumElementNameContext _localctx = new EnumElementNameContext(Context, State);
		EnterRule(_localctx, 64, RULE_enumElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementValueContext enumElementValue() {
		EnumElementValueContext _localctx = new EnumElementValueContext(Context, State);
		EnterRule(_localctx, 66, RULE_enumElementValue);
		try {
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 634;
				intLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 68, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 638;
				enumTypeName();
				State = 639;
				Match(HASH);
				}
				break;
			}
			State = 643;
			enumElementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext[] enumElementName() {
			return GetRuleContexts<EnumElementNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName(int i) {
			return GetRuleContext<EnumElementNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public EnumSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecificationInitContext enumSpecificationInit() {
		EnumSpecificationInitContext _localctx = new EnumSpecificationInitContext(Context, State);
		EnterRule(_localctx, 70, RULE_enumSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				State = 645;
				Match(LEFT_PAREN);
				State = 646;
				enumElementName();
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 647;
					Match(COMMA);
					State = 648;
					enumElementName();
					}
					}
					State = 653;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 654;
				Match(RIGHT_PAREN);
				}
				break;
			case IDENTIFIER:
				{
				State = 656;
				derivedTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 659;
				Match(ASSIGN);
				State = 660;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeNameContext arrayTypeName() {
			return GetRuleContext<ArrayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		public ArrayTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeDeclarationContext arrayTypeDeclaration() {
		ArrayTypeDeclarationContext _localctx = new ArrayTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_arrayTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			arrayTypeName();
			State = 664;
			Match(COLON);
			State = 665;
			arraySpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ArrayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeNameContext arrayTypeName() {
		ArrayTypeNameContext _localctx = new ArrayTypeNameContext(Context, State);
		EnterRule(_localctx, 74, RULE_arrayTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArraySpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySpecificationInitContext arraySpecificationInit() {
		ArraySpecificationInitContext _localctx = new ArraySpecificationInitContext(Context, State);
		EnterRule(_localctx, 76, RULE_arraySpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			arraySpecification();
			State = 672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 670;
				Match(ASSIGN);
				State = 671;
				arrayInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(stParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext[] subrange() {
			return GetRuleContexts<SubrangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange(int i) {
			return GetRuleContext<SubrangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArraySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySpecificationContext arraySpecification() {
		ArraySpecificationContext _localctx = new ArraySpecificationContext(Context, State);
		EnterRule(_localctx, 78, RULE_arraySpecification);
		int _la;
		try {
			State = 689;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 674;
				derivedTypeAccess();
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 675;
				Match(ARRAY);
				State = 676;
				Match(LEFT_BRACKET);
				State = 677;
				subrange();
				State = 682;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 678;
					Match(COMMA);
					State = 679;
					subrange();
					}
					}
					State = 684;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 685;
				Match(RIGHT_BRACKET);
				State = 686;
				Match(OF);
				State = 687;
				dataTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitContext[] arrayElementInit() {
			return GetRuleContexts<ArrayElementInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitContext arrayElementInit(int i) {
			return GetRuleContext<ArrayElementInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArrayInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitContext arrayInit() {
		ArrayInitContext _localctx = new ArrayInitContext(Context, State);
		EnterRule(_localctx, 80, RULE_arrayInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(LEFT_BRACKET);
			State = 692;
			arrayElementInit();
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 693;
				Match(COMMA);
				State = 694;
				arrayElementInit();
				}
				}
				State = 699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 700;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitValueContext arrayElementInitValue() {
			return GetRuleContext<ArrayElementInitValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementMultiplierContext arrayElementMultiplier() {
			return GetRuleContext<ArrayElementMultiplierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		public ArrayElementInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementInitContext arrayElementInit() {
		ArrayElementInitContext _localctx = new ArrayElementInitContext(Context, State);
		EnterRule(_localctx, 82, RULE_arrayElementInit);
		int _la;
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 702;
				arrayElementInitValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 703;
				arrayElementMultiplier();
				State = 704;
				Match(LEFT_PAREN);
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13528387846929948L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 1445656305019650049L) != 0) || _la==IDENTIFIER) {
					{
					State = 705;
					arrayElementInitValue();
					}
				}

				State = 708;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementMultiplierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public ArrayElementMultiplierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementMultiplier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementMultiplier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementMultiplierContext arrayElementMultiplier() {
		ArrayElementMultiplierContext _localctx = new ArrayElementMultiplierContext(Context, State);
		EnterRule(_localctx, 84, RULE_arrayElementMultiplier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			Match(UNSIGNED_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementInitValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArrayElementInitValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementInitValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementInitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementInitValueContext arrayElementInitValue() {
		ArrayElementInitValueContext _localctx = new ArrayElementInitValueContext(Context, State);
		EnterRule(_localctx, 86, RULE_arrayElementInitValue);
		try {
			State = 718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 714;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 715;
				enumValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 716;
				structInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 717;
				arrayInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConformDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformandContext arrayConformand() {
			return GetRuleContext<ArrayConformandContext>(0);
		}
		public ArrayConformDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayConformDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConformDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConformDeclarationContext arrayConformDeclaration() {
		ArrayConformDeclarationContext _localctx = new ArrayConformDeclarationContext(Context, State);
		EnterRule(_localctx, 88, RULE_arrayConformDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			variableList();
			State = 721;
			Match(COLON);
			State = 722;
			arrayConformand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConformandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(stParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASTERISK() { return GetTokens(stParser.ASTERISK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK(int i) {
			return GetToken(stParser.ASTERISK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArrayConformandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayConformand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConformand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConformandContext arrayConformand() {
		ArrayConformandContext _localctx = new ArrayConformandContext(Context, State);
		EnterRule(_localctx, 90, RULE_arrayConformand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			Match(ARRAY);
			State = 725;
			Match(LEFT_BRACKET);
			State = 726;
			Match(ASTERISK);
			State = 731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 727;
				Match(COMMA);
				State = 728;
				Match(ASTERISK);
				}
				}
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 734;
			Match(RIGHT_BRACKET);
			State = 735;
			Match(OF);
			State = 736;
			dataTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		public ArrayVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayVarDeclarationInitContext arrayVarDeclarationInit() {
		ArrayVarDeclarationInitContext _localctx = new ArrayVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 92, RULE_arrayVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			variableList();
			State = 739;
			Match(COLON);
			State = 740;
			arraySpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeSpecificationContext structTypeSpecification() {
			return GetRuleContext<StructTypeSpecificationContext>(0);
		}
		public StructTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeDeclarationContext structTypeDeclaration() {
		StructTypeDeclarationContext _localctx = new StructTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 94, RULE_structTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			structTypeName();
			State = 743;
			Match(COLON);
			State = 744;
			structTypeSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StructTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeNameContext structTypeName() {
		StructTypeNameContext _localctx = new StructTypeNameContext(Context, State);
		EnterRule(_localctx, 96, RULE_structTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		public StructTypeSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeSpecificationContext structTypeSpecification() {
		StructTypeSpecificationContext _localctx = new StructTypeSpecificationContext(Context, State);
		EnterRule(_localctx, 98, RULE_structTypeSpecification);
		try {
			State = 750;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRUCT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 748;
				structDeclaration();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 749;
				structSpecificationInit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(stParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_STRUCT() { return GetToken(stParser.END_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAP() { return GetToken(stParser.OVERLAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementDeclarationContext[] structElementDeclaration() {
			return GetRuleContexts<StructElementDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementDeclarationContext structElementDeclaration(int i) {
			return GetRuleContext<StructElementDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 100, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 752;
			Match(STRUCT);
			State = 754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERLAP) {
				{
				State = 753;
				Match(OVERLAP);
				}
			}

			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 756;
				structElementDeclaration();
				State = 757;
				Match(SEMICOLON);
				}
				}
				State = 761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 763;
			Match(END_STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructElementNameContext structElementName() {
			return GetRuleContext<StructElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationInitContext subrangeSpecificationInit() {
			return GetRuleContext<SubrangeSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecificationInitContext enumSpecificationInit() {
			return GetRuleContext<EnumSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitPartAccessContext multibitPartAccess() {
			return GetRuleContext<MultibitPartAccessContext>(0);
		}
		public StructElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementDeclarationContext structElementDeclaration() {
		StructElementDeclarationContext _localctx = new StructElementDeclarationContext(Context, State);
		EnterRule(_localctx, 102, RULE_structElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			structElementName();
			State = 770;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 766;
				locatedAt();
				State = 768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 767;
					multibitPartAccess();
					}
				}

				}
			}

			State = 772;
			Match(COLON);
			State = 778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 773;
				simpleSpecificationInit();
				}
				break;
			case 2:
				{
				State = 774;
				subrangeSpecificationInit();
				}
				break;
			case 3:
				{
				State = 775;
				enumSpecificationInit();
				}
				break;
			case 4:
				{
				State = 776;
				arraySpecificationInit();
				}
				break;
			case 5:
				{
				State = 777;
				structSpecificationInit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StructElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementNameContext structElementName() {
		StructElementNameContext _localctx = new StructElementNameContext(Context, State);
		EnterRule(_localctx, 104, RULE_structElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedAtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(stParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelativeAddressContext relativeAddress() {
			return GetRuleContext<RelativeAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartlySpecifiedAddressContext partlySpecifiedAddress() {
			return GetRuleContext<PartlySpecifiedAddressContext>(0);
		}
		public LocatedAtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedAt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedAt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedAtContext locatedAt() {
		LocatedAtContext _localctx = new LocatedAtContext(Context, State);
		EnterRule(_localctx, 106, RULE_locatedAt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			Match(AT);
			State = 785;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RELATIVE_ADDRESS:
				{
				State = 783;
				relativeAddress();
				}
				break;
			case DIRECT_VARIABLE:
				{
				State = 784;
				partlySpecifiedAddress();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelativeAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		public RelativeAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relativeAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelativeAddressContext relativeAddress() {
		RelativeAddressContext _localctx = new RelativeAddressContext(Context, State);
		EnterRule(_localctx, 108, RULE_relativeAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			Match(RELATIVE_ADDRESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartlySpecifiedAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_VARIABLE() { return GetToken(stParser.DIRECT_VARIABLE, 0); }
		public PartlySpecifiedAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partlySpecifiedAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartlySpecifiedAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartlySpecifiedAddressContext partlySpecifiedAddress() {
		PartlySpecifiedAddressContext _localctx = new PartlySpecifiedAddressContext(Context, State);
		EnterRule(_localctx, 110, RULE_partlySpecifiedAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			Match(DIRECT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitPartAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(stParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		public MultibitPartAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitPartAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitPartAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitPartAccessContext multibitPartAccess() {
		MultibitPartAccessContext _localctx = new MultibitPartAccessContext(Context, State);
		EnterRule(_localctx, 112, RULE_multibitPartAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			Match(DOT);
			State = 792;
			_la = TokenStream.LA(1);
			if ( !(_la==RELATIVE_ADDRESS || _la==UNSIGNED_INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationContext structSpecification() {
			return GetRuleContext<StructSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		public StructSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecificationInitContext structSpecificationInit() {
		StructSpecificationInitContext _localctx = new StructSpecificationInitContext(Context, State);
		EnterRule(_localctx, 114, RULE_structSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			structSpecification();
			State = 797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 795;
				Match(ASSIGN);
				State = 796;
				structInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		public StructSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecificationContext structSpecification() {
		StructSpecificationContext _localctx = new StructSpecificationContext(Context, State);
		EnterRule(_localctx, 116, RULE_structSpecification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			derivedTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementInitContext[] structElementInit() {
			return GetRuleContexts<StructElementInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementInitContext structElementInit(int i) {
			return GetRuleContext<StructElementInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public StructInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructInitContext structInit() {
		StructInitContext _localctx = new StructInitContext(Context, State);
		EnterRule(_localctx, 118, RULE_structInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			Match(LEFT_PAREN);
			State = 802;
			structElementInit();
			State = 807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 803;
				Match(COMMA);
				State = 804;
				structElementInit();
				}
				}
				State = 809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 810;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructElementNameContext structElementName() {
			return GetRuleContext<StructElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public StructElementInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementInitContext structElementInit() {
		StructElementInitContext _localctx = new StructElementInitContext(Context, State);
		EnterRule(_localctx, 120, RULE_structElementInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812;
			structElementName();
			State = 813;
			Match(ASSIGN);
			State = 819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 814;
				expression(0);
				}
				break;
			case 2:
				{
				State = 815;
				enumValue();
				}
				break;
			case 3:
				{
				State = 816;
				arrayInit();
				}
				break;
			case 4:
				{
				State = 817;
				structInit();
				}
				break;
			case 5:
				{
				State = 818;
				referenceValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		public StructVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructVarDeclarationInitContext structVarDeclarationInit() {
		StructVarDeclarationInitContext _localctx = new StructVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 122, RULE_structVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			variableList();
			State = 822;
			Match(COLON);
			State = 823;
			structSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringDerivedTypeNameContext stringDerivedTypeName() {
			return GetRuleContext<StringDerivedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext stringTypeName() {
			return GetRuleContext<StringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharStringContext charString() {
			return GetRuleContext<CharStringContext>(0);
		}
		public StringTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeDeclarationContext stringTypeDeclaration() {
		StringTypeDeclarationContext _localctx = new StringTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_stringTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			stringDerivedTypeName();
			State = 826;
			Match(COLON);
			State = 827;
			stringTypeName();
			State = 830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 828;
				Match(ASSIGN);
				State = 829;
				charString();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringDerivedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StringDerivedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringDerivedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDerivedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringDerivedTypeNameContext stringDerivedTypeName() {
		StringDerivedTypeNameContext _localctx = new StringDerivedTypeNameContext(Context, State);
		EnterRule(_localctx, 126, RULE_stringDerivedTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeNameContext referenceTypeName() {
			return GetRuleContext<ReferenceTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationInitContext referenceSpecificationInit() {
			return GetRuleContext<ReferenceSpecificationInitContext>(0);
		}
		public ReferenceTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeDeclarationContext referenceTypeDeclaration() {
		ReferenceTypeDeclarationContext _localctx = new ReferenceTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_referenceTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834;
			referenceTypeName();
			State = 835;
			Match(COLON);
			State = 836;
			referenceSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ReferenceTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeNameContext referenceTypeName() {
		ReferenceTypeNameContext _localctx = new ReferenceTypeNameContext(Context, State);
		EnterRule(_localctx, 130, RULE_referenceTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationContext referenceSpecification() {
			return GetRuleContext<ReferenceSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public ReferenceSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceSpecificationInitContext referenceSpecificationInit() {
		ReferenceSpecificationInitContext _localctx = new ReferenceSpecificationInitContext(Context, State);
		EnterRule(_localctx, 132, RULE_referenceSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			referenceSpecification();
			State = 843;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 841;
				Match(ASSIGN);
				State = 842;
				referenceValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REF_TO() { return GetTokens(stParser.REF_TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF_TO(int i) {
			return GetToken(stParser.REF_TO, i);
		}
		public ReferenceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceSpecificationContext referenceSpecification() {
		ReferenceSpecificationContext _localctx = new ReferenceSpecificationContext(Context, State);
		EnterRule(_localctx, 134, RULE_referenceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 845;
				Match(REF_TO);
				}
				}
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==REF_TO );
			State = 850;
			dataTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceAddressContext referenceAddress() {
			return GetRuleContext<ReferenceAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(stParser.NULL, 0); }
		public ReferenceValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceValueContext referenceValue() {
		ReferenceValueContext _localctx = new ReferenceValueContext(Context, State);
		EnterRule(_localctx, 136, RULE_referenceValue);
		try {
			State = 854;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 852;
				referenceAddress();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 853;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(stParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext functionBlockInstanceName() {
			return GetRuleContext<FunctionBlockInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName() {
			return GetRuleContext<ClassInstanceNameContext>(0);
		}
		public ReferenceAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceAddressContext referenceAddress() {
		ReferenceAddressContext _localctx = new ReferenceAddressContext(Context, State);
		EnterRule(_localctx, 138, RULE_referenceAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			Match(REF);
			State = 857;
			Match(LEFT_PAREN);
			State = 861;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 858;
				symbolicVariable();
				}
				break;
			case 2:
				{
				State = 859;
				functionBlockInstanceName();
				}
				break;
			case 3:
				{
				State = 860;
				classInstanceName();
				}
				break;
			}
			State = 863;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ReferenceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceNameContext referenceName() {
		ReferenceNameContext _localctx = new ReferenceNameContext(Context, State);
		EnterRule(_localctx, 140, RULE_referenceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext referenceName() {
			return GetRuleContext<ReferenceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public DereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DereferenceContext dereference() {
		DereferenceContext _localctx = new DereferenceContext(Context, State);
		EnterRule(_localctx, 142, RULE_dereference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			referenceName();
			State = 869;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 868;
					Match(CARET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 871;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_BLOCK() { return GetToken(stParser.FUNCTION_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockNameContext functionBlockName() {
			return GetRuleContext<FunctionBlockNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockBodyContext functionBlockBody() {
			return GetRuleContext<FunctionBlockBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FUNCTION_BLOCK() { return GetToken(stParser.END_FUNCTION_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(stParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		public FunctionBlockDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockDeclarationContext functionBlockDeclaration() {
		FunctionBlockDeclarationContext _localctx = new FunctionBlockDeclarationContext(Context, State);
		EnterRule(_localctx, 144, RULE_functionBlockDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873;
			Match(FUNCTION_BLOCK);
			State = 875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 874;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 877;
			functionBlockName();
			State = 881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 878;
				usingDirective();
				}
				}
				State = 883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 884;
				Match(EXTENDS);
				State = 885;
				derivedTypeAccess();
				}
			}

			State = 890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 888;
				Match(IMPLEMENTS);
				State = 889;
				interfaceTypeList();
				}
			}

			State = 899;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 3353L) != 0)) {
				{
				State = 897;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 892;
					ioVarDeclarations();
					}
					break;
				case 2:
					{
					State = 893;
					externalVarDeclarations();
					}
					break;
				case 3:
					{
					State = 894;
					normalVarDeclarations();
					}
					break;
				case 4:
					{
					State = 895;
					tempVarDeclarations();
					}
					break;
				case 5:
					{
					State = 896;
					otherVarDeclarations();
					}
					break;
				}
				}
				State = 901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 902;
				methodDeclaration();
				}
				}
				State = 907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 908;
			functionBlockBody();
			State = 909;
			Match(END_FUNCTION_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FunctionBlockNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockNameContext functionBlockName() {
		FunctionBlockNameContext _localctx = new FunctionBlockNameContext(Context, State);
		EnterRule(_localctx, 146, RULE_functionBlockName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockInstanceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockNameContext functionBlockName() {
			return GetRuleContext<FunctionBlockNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public FunctionBlockInstanceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockInstanceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockInstanceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockInstanceNameContext functionBlockInstanceName() {
		FunctionBlockInstanceNameContext _localctx = new FunctionBlockInstanceNameContext(Context, State);
		EnterRule(_localctx, 148, RULE_functionBlockInstanceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 913;
					namespaceName();
					State = 914;
					Match(DOT);
					}
					} 
				}
				State = 920;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			State = 921;
			functionBlockName();
			State = 925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 922;
				Match(CARET);
				}
				}
				State = 927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FunctionBlockBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockBodyContext functionBlockBody() {
		FunctionBlockBodyContext _localctx = new FunctionBlockBodyContext(Context, State);
		EnterRule(_localctx, 150, RULE_functionBlockBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockVarSpecificationInitContext functionBlockVarSpecificationInit() {
			return GetRuleContext<FunctionBlockVarSpecificationInitContext>(0);
		}
		public FunctionBlockVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockVarDeclarationInitContext functionBlockVarDeclarationInit() {
		FunctionBlockVarDeclarationInitContext _localctx = new FunctionBlockVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 152, RULE_functionBlockVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			variableList();
			State = 931;
			Match(COLON);
			State = 932;
			functionBlockVarSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockVarSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		public FunctionBlockVarSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockVarSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockVarSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockVarSpecificationInitContext functionBlockVarSpecificationInit() {
		FunctionBlockVarSpecificationInitContext _localctx = new FunctionBlockVarSpecificationInitContext(Context, State);
		EnterRule(_localctx, 154, RULE_functionBlockVarSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			derivedTypeAccess();
			State = 937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 935;
				Match(ASSIGN);
				State = 936;
				structInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(stParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_METHOD() { return GetToken(stParser.END_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(stParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 156, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939;
			Match(METHOD);
			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 15L) != 0)) {
				{
				State = 940;
				accessSpecification();
				}
			}

			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 943;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERRIDE) {
				{
				State = 946;
				Match(OVERRIDE);
				}
			}

			State = 949;
			methodName();
			State = 952;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 950;
				Match(COLON);
				State = 951;
				dataTypeAccess();
				}
			}

			State = 960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 3353L) != 0)) {
				{
				State = 958;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR_INPUT:
				case VAR_OUTPUT:
				case VAR_IN_OUT:
					{
					State = 954;
					ioVarDeclarations();
					}
					break;
				case VAR_EXTERNAL:
					{
					State = 955;
					externalVarDeclarations();
					}
					break;
				case VAR:
					{
					State = 956;
					normalVarDeclarations();
					}
					break;
				case VAR_TEMP:
					{
					State = 957;
					tempVarDeclarations();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 963;
			functionBody();
			State = 964;
			Match(END_METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 158, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		public DataTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeAccessContext dataTypeAccess() {
		DataTypeAccessContext _localctx = new DataTypeAccessContext(Context, State);
		EnterRule(_localctx, 160, RULE_dataTypeAccess);
		try {
			State = 970;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
			case REAL:
			case LREAL:
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
			case BOOL:
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
			case TIME:
			case LTIME:
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
			case DATE:
			case LDATE:
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 968;
				elementaryTypeName();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 969;
				derivedTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeNameContext derivedTypeName() {
			return GetRuleContext<DerivedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public DerivedTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTypeAccessContext derivedTypeAccess() {
		DerivedTypeAccessContext _localctx = new DerivedTypeAccessContext(Context, State);
		EnterRule(_localctx, 162, RULE_derivedTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 972;
					namespaceName();
					State = 973;
					Match(DOT);
					}
					} 
				}
				State = 979;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			State = 980;
			derivedTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public DerivedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTypeNameContext derivedTypeName() {
		DerivedTypeNameContext _localctx = new DerivedTypeNameContext(Context, State);
		EnterRule(_localctx, 164, RULE_derivedTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectVariableContext directVariable() {
			return GetRuleContext<DirectVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 166, RULE_variable);
		try {
			State = 986;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIRECT_VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 984;
				directVariable();
				}
				break;
			case THIS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 985;
				symbolicVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolicVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(stParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableElementSelectContext[] variableElementSelect() {
			return GetRuleContexts<VariableElementSelectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableElementSelectContext variableElementSelect(int i) {
			return GetRuleContext<VariableElementSelectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		public SymbolicVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolicVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolicVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolicVariableContext symbolicVariable() {
		SymbolicVariableContext _localctx = new SymbolicVariableContext(Context, State);
		EnterRule(_localctx, 168, RULE_symbolicVariable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 997;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 988;
				Match(THIS);
				State = 989;
				Match(DOT);
				}
				break;
			case 2:
				{
				State = 993;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 990;
						namespaceName();
						State = 991;
						Match(DOT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 995;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			{
			State = 999;
			variableAccess();
			State = 1003;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1000;
					variableElementSelect();
					}
					} 
				}
				State = 1005;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		public VariableAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAccessContext variableAccess() {
		VariableAccessContext _localctx = new VariableAccessContext(Context, State);
		EnterRule(_localctx, 170, RULE_variableAccess);
		try {
			State = 1008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1006;
				variableName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1007;
				dereference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 172, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableElementSelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptListContext subscriptList() {
			return GetRuleContext<SubscriptListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(stParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		public VariableElementSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableElementSelect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableElementSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableElementSelectContext variableElementSelect() {
		VariableElementSelectContext _localctx = new VariableElementSelectContext(Context, State);
		EnterRule(_localctx, 174, RULE_variableElementSelect);
		try {
			State = 1015;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1012;
				subscriptList();
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1013;
				Match(COMMA);
				State = 1014;
				variableAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public SubscriptListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptListContext subscriptList() {
		SubscriptListContext _localctx = new SubscriptListContext(Context, State);
		EnterRule(_localctx, 176, RULE_subscriptList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017;
			Match(LEFT_BRACKET);
			State = 1018;
			expression(0);
			State = 1023;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1019;
				Match(COMMA);
				State = 1020;
				expression(0);
				}
				}
				State = 1025;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1026;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IoVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDeclarationsContext inputVarDeclarations() {
			return GetRuleContext<InputVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputVarDeclarationsContext outputVarDeclarations() {
			return GetRuleContext<OutputVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationsContext inOutVarDeclarations() {
			return GetRuleContext<InOutVarDeclarationsContext>(0);
		}
		public IoVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ioVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIoVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IoVarDeclarationsContext ioVarDeclarations() {
		IoVarDeclarationsContext _localctx = new IoVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 178, RULE_ioVarDeclarations);
		try {
			State = 1031;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_INPUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1028;
				inputVarDeclarations();
				}
				break;
			case VAR_OUTPUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1029;
				outputVarDeclarations();
				}
				break;
			case VAR_IN_OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1030;
				inOutVarDeclarations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_INPUT() { return GetToken(stParser.VAR_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDeclarationContext[] inputVarDeclaration() {
			return GetRuleContexts<InputVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDeclarationContext inputVarDeclaration(int i) {
			return GetRuleContext<InputVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public InputVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVarDeclarationsContext inputVarDeclarations() {
		InputVarDeclarationsContext _localctx = new InputVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 180, RULE_inputVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033;
			Match(VAR_INPUT);
			State = 1035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1034;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1042;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1037;
				inputVarDeclaration();
				State = 1038;
				Match(SEMICOLON);
				}
				}
				State = 1044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1045;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EdgeDeclarationContext edgeDeclaration() {
			return GetRuleContext<EdgeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public InputVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVarDeclarationContext inputVarDeclaration() {
		InputVarDeclarationContext _localctx = new InputVarDeclarationContext(Context, State);
		EnterRule(_localctx, 182, RULE_inputVarDeclaration);
		try {
			State = 1050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1047;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1048;
				edgeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1049;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(stParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_EDGE() { return GetToken(stParser.R_EDGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F_EDGE() { return GetToken(stParser.F_EDGE, 0); }
		public EdgeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeDeclarationContext edgeDeclaration() {
		EdgeDeclarationContext _localctx = new EdgeDeclarationContext(Context, State);
		EnterRule(_localctx, 184, RULE_edgeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			variableList();
			State = 1053;
			Match(COLON);
			State = 1054;
			Match(BOOL);
			State = 1055;
			_la = TokenStream.LA(1);
			if ( !(_la==R_EDGE || _la==F_EDGE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarDeclarationInitContext stringVarDeclarationInit() {
			return GetRuleContext<StringVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationInitContext referenceSpecificationInit() {
			return GetRuleContext<ReferenceSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayVarDeclarationInitContext arrayVarDeclarationInit() {
			return GetRuleContext<ArrayVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructVarDeclarationInitContext structVarDeclarationInit() {
			return GetRuleContext<StructVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockVarDeclarationInitContext functionBlockVarDeclarationInit() {
			return GetRuleContext<FunctionBlockVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceVarDeclarationInitContext interfaceVarDeclarationInit() {
			return GetRuleContext<InterfaceVarDeclarationInitContext>(0);
		}
		public VarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationInitContext varDeclarationInit() {
		VarDeclarationInitContext _localctx = new VarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 186, RULE_varDeclarationInit);
		try {
			State = 1068;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1057;
				variableList();
				State = 1058;
				Match(COLON);
				State = 1062;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
				case 1:
					{
					State = 1059;
					simpleSpecificationInit();
					}
					break;
				case 2:
					{
					State = 1060;
					stringVarDeclarationInit();
					}
					break;
				case 3:
					{
					State = 1061;
					referenceSpecificationInit();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1064;
				arrayVarDeclarationInit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1065;
				structVarDeclarationInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1066;
				functionBlockVarDeclarationInit();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1067;
				interfaceVarDeclarationInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext[] variableName() {
			return GetRuleContexts<VariableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName(int i) {
			return GetRuleContext<VariableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public VariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListContext variableList() {
		VariableListContext _localctx = new VariableListContext(Context, State);
		EnterRule(_localctx, 188, RULE_variableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			variableName();
			State = 1075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1071;
				Match(COMMA);
				State = 1072;
				variableName();
				}
				}
				State = 1077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_OUTPUT() { return GetToken(stParser.VAR_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputVarDeclarationContext[] outputVarDeclaration() {
			return GetRuleContexts<OutputVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputVarDeclarationContext outputVarDeclaration(int i) {
			return GetRuleContext<OutputVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public OutputVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputVarDeclarationsContext outputVarDeclarations() {
		OutputVarDeclarationsContext _localctx = new OutputVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 190, RULE_outputVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1078;
			Match(VAR_OUTPUT);
			State = 1080;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1079;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1087;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1082;
				outputVarDeclaration();
				State = 1083;
				Match(SEMICOLON);
				}
				}
				State = 1089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1090;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public OutputVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputVarDeclarationContext outputVarDeclaration() {
		OutputVarDeclarationContext _localctx = new OutputVarDeclarationContext(Context, State);
		EnterRule(_localctx, 192, RULE_outputVarDeclaration);
		try {
			State = 1094;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1092;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1093;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOutVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_IN_OUT() { return GetToken(stParser.VAR_IN_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationContext[] inOutVarDeclaration() {
			return GetRuleContexts<InOutVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationContext inOutVarDeclaration(int i) {
			return GetRuleContext<InOutVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public InOutVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOutVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOutVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOutVarDeclarationsContext inOutVarDeclarations() {
		InOutVarDeclarationsContext _localctx = new InOutVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 194, RULE_inOutVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1096;
			Match(VAR_IN_OUT);
			State = 1102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1097;
				inOutVarDeclaration();
				State = 1098;
				Match(SEMICOLON);
				}
				}
				State = 1104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1105;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOutVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public InOutVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOutVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOutVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOutVarDeclarationContext inOutVarDeclaration() {
		InOutVarDeclarationContext _localctx = new InOutVarDeclarationContext(Context, State);
		EnterRule(_localctx, 196, RULE_inOutVarDeclaration);
		try {
			State = 1109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1107;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1108;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public NormalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalVarDeclarationsContext normalVarDeclarations() {
		NormalVarDeclarationsContext _localctx = new NormalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 198, RULE_normalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1111;
			Match(VAR);
			State = 1113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1112;
				Match(CONSTANT);
				}
			}

			State = 1116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 15L) != 0)) {
				{
				State = 1115;
				accessSpecification();
				}
			}

			State = 1123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1118;
				varDeclarationInit();
				State = 1119;
				Match(SEMICOLON);
				}
				}
				State = 1125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1126;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RetainVarDeclarationsContext retainVarDeclarations() {
			return GetRuleContext<RetainVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonRetainVarDeclarationsContext nonRetainVarDeclarations() {
			return GetRuleContext<NonRetainVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedPartlyVarDeclarationContext locatedPartlyVarDeclaration() {
			return GetRuleContext<LocatedPartlyVarDeclarationContext>(0);
		}
		public OtherVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherVarDeclarationsContext otherVarDeclarations() {
		OtherVarDeclarationsContext _localctx = new OtherVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 200, RULE_otherVarDeclarations);
		try {
			State = 1131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1128;
				retainVarDeclarations();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1129;
				nonRetainVarDeclarations();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1130;
				locatedPartlyVarDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonRetainVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public NonRetainVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonRetainVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonRetainVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonRetainVarDeclarationsContext nonRetainVarDeclarations() {
		NonRetainVarDeclarationsContext _localctx = new NonRetainVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 202, RULE_nonRetainVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133;
			Match(VAR);
			State = 1134;
			Match(NON_RETAIN);
			State = 1136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 15L) != 0)) {
				{
				State = 1135;
				accessSpecification();
				}
			}

			State = 1143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1138;
				varDeclarationInit();
				State = 1139;
				Match(SEMICOLON);
				}
				}
				State = 1145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1146;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetainVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public RetainVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retainVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetainVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetainVarDeclarationsContext retainVarDeclarations() {
		RetainVarDeclarationsContext _localctx = new RetainVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 204, RULE_retainVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1148;
			Match(VAR);
			State = 1149;
			Match(RETAIN);
			State = 1151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 15L) != 0)) {
				{
				State = 1150;
				accessSpecification();
				}
			}

			State = 1158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1153;
				varDeclarationInit();
				State = 1154;
				Match(SEMICOLON);
				}
				}
				State = 1160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1161;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedPartlyVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocatedPartlyVarContext[] locatedPartlyVar() {
			return GetRuleContexts<LocatedPartlyVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedPartlyVarContext locatedPartlyVar(int i) {
			return GetRuleContext<LocatedPartlyVarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public LocatedPartlyVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedPartlyVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedPartlyVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedPartlyVarDeclarationContext locatedPartlyVarDeclaration() {
		LocatedPartlyVarDeclarationContext _localctx = new LocatedPartlyVarDeclarationContext(Context, State);
		EnterRule(_localctx, 206, RULE_locatedPartlyVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1163;
			Match(VAR);
			State = 1165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1164;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1167;
				locatedPartlyVar();
				}
				}
				State = 1172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1173;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedPartlyVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(stParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecificationContext varSpecification() {
			return GetRuleContext<VarSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(stParser.SEMICOLON, 0); }
		public LocatedPartlyVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedPartlyVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedPartlyVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedPartlyVarContext locatedPartlyVar() {
		LocatedPartlyVarContext _localctx = new LocatedPartlyVarContext(Context, State);
		EnterRule(_localctx, 208, RULE_locatedPartlyVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1175;
			variableName();
			State = 1176;
			Match(AT);
			State = 1177;
			Match(RELATIVE_ADDRESS);
			State = 1178;
			Match(COLON);
			State = 1179;
			varSpecification();
			State = 1180;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringSpecificationContext stringSpecification() {
			return GetRuleContext<StringSpecificationContext>(0);
		}
		public VarSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSpecificationContext varSpecification() {
		VarSpecificationContext _localctx = new VarSpecificationContext(Context, State);
		EnterRule(_localctx, 210, RULE_varSpecification);
		try {
			State = 1185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1182;
				simpleSpecification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1183;
				arraySpecification();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1184;
				stringSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarDeclarationContext[] locatedVarDeclaration() {
			return GetRuleContexts<LocatedVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarDeclarationContext locatedVarDeclaration(int i) {
			return GetRuleContext<LocatedVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public LocatedVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedVarDeclarationsContext locatedVarDeclarations() {
		LocatedVarDeclarationsContext _localctx = new LocatedVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 212, RULE_locatedVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1187;
			Match(VAR);
			State = 1189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -7493989779944505344L) != 0)) {
				{
				State = 1188;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -7493989779944505344L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==IDENTIFIER) {
				{
				{
				State = 1191;
				locatedVarDeclaration();
				State = 1192;
				Match(SEMICOLON);
				}
				}
				State = 1198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1199;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarSpecificationInitContext locatedVarSpecificationInit() {
			return GetRuleContext<LocatedVarSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public LocatedVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedVarDeclarationContext locatedVarDeclaration() {
		LocatedVarDeclarationContext _localctx = new LocatedVarDeclarationContext(Context, State);
		EnterRule(_localctx, 214, RULE_locatedVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 1201;
				variableName();
				}
			}

			State = 1204;
			locatedAt();
			State = 1205;
			Match(COLON);
			State = 1206;
			locatedVarSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_TEMP() { return GetToken(stParser.VAR_TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		public TempVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempVarDeclarationsContext tempVarDeclarations() {
		TempVarDeclarationsContext _localctx = new TempVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 216, RULE_tempVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208;
			Match(VAR_TEMP);
			State = 1214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				{
				State = 1209;
				varDeclarationInit();
				}
				State = 1210;
				Match(SEMICOLON);
				}
				}
				State = 1216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1217;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_EXTERNAL() { return GetToken(stParser.VAR_EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext[] externalDeclaration() {
			return GetRuleContexts<ExternalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext externalDeclaration(int i) {
			return GetRuleContext<ExternalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public ExternalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalVarDeclarationsContext externalVarDeclarations() {
		ExternalVarDeclarationsContext _localctx = new ExternalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 218, RULE_externalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219;
			Match(VAR_EXTERNAL);
			State = 1221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1220;
				Match(CONSTANT);
				}
			}

			State = 1228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1223;
				externalDeclaration();
				State = 1224;
				Match(SEMICOLON);
				}
				}
				State = 1230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1231;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext globalVarName() {
			return GetRuleContext<GlobalVarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 220, RULE_externalDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1233;
			globalVarName();
			State = 1234;
			Match(COLON);
			State = 1237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				{
				State = 1235;
				simpleSpecification();
				}
				break;
			case 2:
				{
				State = 1236;
				arraySpecification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public GlobalVarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarNameContext globalVarName() {
		GlobalVarNameContext _localctx = new GlobalVarNameContext(Context, State);
		EnterRule(_localctx, 222, RULE_globalVarName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_GLOBAL() { return GetToken(stParser.VAR_GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationContext[] globalVarDeclaration() {
			return GetRuleContexts<GlobalVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationContext globalVarDeclaration(int i) {
			return GetRuleContext<GlobalVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		public GlobalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclarationsContext globalVarDeclarations() {
		GlobalVarDeclarationsContext _localctx = new GlobalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 224, RULE_globalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1241;
			Match(VAR_GLOBAL);
			State = 1243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==CONSTANT) {
				{
				State = 1242;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==CONSTANT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1245;
				globalVarDeclaration();
				State = 1246;
				Match(SEMICOLON);
				}
				}
				State = 1252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1253;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarSpecificationContext globalVarSpecification() {
			return GetRuleContext<GlobalVarSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarSpecificationInitContext locatedVarSpecificationInit() {
			return GetRuleContext<LocatedVarSpecificationInitContext>(0);
		}
		public GlobalVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclarationContext globalVarDeclaration() {
		GlobalVarDeclarationContext _localctx = new GlobalVarDeclarationContext(Context, State);
		EnterRule(_localctx, 226, RULE_globalVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255;
			globalVarSpecification();
			State = 1256;
			Match(COLON);
			{
			State = 1257;
			locatedVarSpecificationInit();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext[] globalVarName() {
			return GetRuleContexts<GlobalVarNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext globalVarName(int i) {
			return GetRuleContext<GlobalVarNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		public GlobalVarSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarSpecificationContext globalVarSpecification() {
		GlobalVarSpecificationContext _localctx = new GlobalVarSpecificationContext(Context, State);
		EnterRule(_localctx, 228, RULE_globalVarSpecification);
		int _la;
		try {
			State = 1270;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1259;
				globalVarName();
				State = 1264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1260;
					Match(COMMA);
					State = 1261;
					globalVarName();
					}
					}
					State = 1266;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1267;
				globalVarName();
				State = 1268;
				locatedAt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedVarSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringSpecificationInitContext stringSpecificationInit() {
			return GetRuleContext<StringSpecificationInitContext>(0);
		}
		public LocatedVarSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedVarSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedVarSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedVarSpecificationInitContext locatedVarSpecificationInit() {
		LocatedVarSpecificationInitContext _localctx = new LocatedVarSpecificationInitContext(Context, State);
		EnterRule(_localctx, 230, RULE_locatedVarSpecificationInit);
		try {
			State = 1276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1272;
				simpleSpecificationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1273;
				arraySpecificationInit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1274;
				structSpecificationInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1275;
				stringSpecificationInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringSpecificationInitContext stringSpecificationInit() {
			return GetRuleContext<StringSpecificationInitContext>(0);
		}
		public StringVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarDeclarationInitContext stringVarDeclarationInit() {
		StringVarDeclarationInitContext _localctx = new StringVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 232, RULE_stringVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278;
			variableList();
			State = 1279;
			Match(COLON);
			State = 1280;
			stringSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringSpecificationContext stringSpecification() {
			return GetRuleContext<StringSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringInitContext stringInit() {
			return GetRuleContext<StringInitContext>(0);
		}
		public StringSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringSpecificationInitContext stringSpecificationInit() {
		StringSpecificationInitContext _localctx = new StringSpecificationInitContext(Context, State);
		EnterRule(_localctx, 234, RULE_stringSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1282;
			stringSpecification();
			State = 1284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SINGLE_BYTE_STRING || _la==DOUBLE_BYTE_STRING) {
				{
				State = 1283;
				stringInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringSizeContext stringSize() {
			return GetRuleContext<StringSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		public StringSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringSpecificationContext stringSpecification() {
		StringSpecificationContext _localctx = new StringSpecificationContext(Context, State);
		EnterRule(_localctx, 236, RULE_stringSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==WSTRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 1287;
				Match(LEFT_BRACKET);
				State = 1288;
				stringSize();
				State = 1289;
				Match(RIGHT_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BYTE_STRING() { return GetToken(stParser.SINGLE_BYTE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BYTE_STRING() { return GetToken(stParser.DOUBLE_BYTE_STRING, 0); }
		public StringInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringInitContext stringInit() {
		StringInitContext _localctx = new StringInitContext(Context, State);
		EnterRule(_localctx, 238, RULE_stringInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293;
			_la = TokenStream.LA(1);
			if ( !(_la==SINGLE_BYTE_STRING || _la==DOUBLE_BYTE_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(stParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FUNCTION() { return GetToken(stParser.END_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 240, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1295;
			Match(FUNCTION);
			State = 1296;
			functionName();
			State = 1299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1297;
				Match(COLON);
				State = 1298;
				dataTypeAccess();
				}
			}

			State = 1304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1301;
				usingDirective();
				}
				}
				State = 1306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 3353L) != 0)) {
				{
				State = 1311;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR_INPUT:
				case VAR_OUTPUT:
				case VAR_IN_OUT:
					{
					State = 1307;
					ioVarDeclarations();
					}
					break;
				case VAR_EXTERNAL:
					{
					State = 1308;
					externalVarDeclarations();
					}
					break;
				case VAR:
					{
					State = 1309;
					normalVarDeclarations();
					}
					break;
				case VAR_TEMP:
					{
					State = 1310;
					tempVarDeclarations();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1316;
			functionBody();
			State = 1317;
			Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 242, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1319;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(stParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CLASS() { return GetToken(stParser.END_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(stParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 244, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1321;
			Match(CLASS);
			State = 1323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 1322;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1325;
			classTypeName();
			State = 1329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1326;
				usingDirective();
				}
				}
				State = 1331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1332;
				Match(EXTENDS);
				State = 1333;
				derivedTypeAccess();
				}
			}

			State = 1338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1336;
				Match(IMPLEMENTS);
				State = 1337;
				interfaceTypeList();
				}
			}

			State = 1345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VAR || _la==VAR_EXTERNAL) {
				{
				State = 1343;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
				case 1:
					{
					State = 1340;
					externalVarDeclarations();
					}
					break;
				case 2:
					{
					State = 1341;
					normalVarDeclarations();
					}
					break;
				case 3:
					{
					State = 1342;
					otherVarDeclarations();
					}
					break;
				}
				}
				State = 1347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 1348;
				methodDeclaration();
				}
				}
				State = 1353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1354;
			Match(END_CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ClassTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeNameContext classTypeName() {
		ClassTypeNameContext _localctx = new ClassTypeNameContext(Context, State);
		EnterRule(_localctx, 246, RULE_classTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1356;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 248, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1358;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public ClassInstanceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceNameContext classInstanceName() {
		ClassInstanceNameContext _localctx = new ClassInstanceNameContext(Context, State);
		EnterRule(_localctx, 250, RULE_classInstanceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1360;
					namespaceName();
					State = 1361;
					Match(DOT);
					}
					} 
				}
				State = 1367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			}
			State = 1368;
			className();
			State = 1372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 1369;
				Match(CARET);
				}
				}
				State = 1374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(stParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(stParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(stParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(stParser.INTERNAL, 0); }
		public AccessSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecificationContext accessSpecification() {
		AccessSpecificationContext _localctx = new AccessSpecificationContext(Context, State);
		EnterRule(_localctx, 252, RULE_accessSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(stParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceNameContext interfaceName() {
			return GetRuleContext<InterfaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_INTERFACE() { return GetToken(stParser.END_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodPrototypeContext[] methodPrototype() {
			return GetRuleContexts<MethodPrototypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodPrototypeContext methodPrototype(int i) {
			return GetRuleContext<MethodPrototypeContext>(i);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 254, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1377;
			Match(INTERFACE);
			State = 1378;
			interfaceName();
			State = 1382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1379;
				usingDirective();
				}
				}
				State = 1384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1385;
				Match(EXTENDS);
				State = 1386;
				interfaceTypeList();
				}
			}

			State = 1392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 1389;
				methodPrototype();
				}
				}
				State = 1394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1395;
			Match(END_INTERFACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public InterfaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceNameContext interfaceName() {
		InterfaceNameContext _localctx = new InterfaceNameContext(Context, State);
		EnterRule(_localctx, 256, RULE_interfaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1397;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext[] derivedTypeAccess() {
			return GetRuleContexts<DerivedTypeAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess(int i) {
			return GetRuleContext<DerivedTypeAccessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(stParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(stParser.COLON, i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext interfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 258, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1399;
			derivedTypeAccess();
			State = 1404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 1400;
				Match(COLON);
				State = 1401;
				derivedTypeAccess();
				}
				}
				State = 1406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodPrototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(stParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_METHOD() { return GetToken(stParser.END_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		public MethodPrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodPrototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodPrototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodPrototypeContext methodPrototype() {
		MethodPrototypeContext _localctx = new MethodPrototypeContext(Context, State);
		EnterRule(_localctx, 260, RULE_methodPrototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1407;
			Match(METHOD);
			State = 1408;
			methodName();
			State = 1411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1409;
				Match(COLON);
				State = 1410;
				dataTypeAccess();
				}
			}

			State = 1416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 450359962737049600L) != 0)) {
				{
				{
				State = 1413;
				ioVarDeclarations();
				}
				}
				State = 1418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1419;
			Match(END_METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceSpecificationInitContext interfaceSpecificationInit() {
			return GetRuleContext<InterfaceSpecificationInitContext>(0);
		}
		public InterfaceVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceVarDeclarationInitContext interfaceVarDeclarationInit() {
		InterfaceVarDeclarationInitContext _localctx = new InterfaceVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 262, RULE_interfaceVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1421;
			variableList();
			State = 1422;
			Match(COLON);
			State = 1423;
			interfaceSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceValueContext interfaceValue() {
			return GetRuleContext<InterfaceValueContext>(0);
		}
		public InterfaceSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceSpecificationInitContext interfaceSpecificationInit() {
		InterfaceSpecificationInitContext _localctx = new InterfaceSpecificationInitContext(Context, State);
		EnterRule(_localctx, 264, RULE_interfaceSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425;
			derivedTypeAccess();
			State = 1428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1426;
				Match(ASSIGN);
				State = 1427;
				interfaceValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext functionBlockInstanceName() {
			return GetRuleContext<FunctionBlockInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName() {
			return GetRuleContext<ClassInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(stParser.NULL, 0); }
		public InterfaceValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceValueContext interfaceValue() {
		InterfaceValueContext _localctx = new InterfaceValueContext(Context, State);
		EnterRule(_localctx, 266, RULE_interfaceValue);
		try {
			State = 1434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1430;
				symbolicVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1431;
				functionBlockInstanceName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1432;
				classInstanceName();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1433;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 268, RULE_statementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1442;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1437;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DIRECT_VARIABLE || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 43436742657L) != 0) || _la==IDENTIFIER) {
						{
						State = 1436;
						statement();
						}
					}

					State = 1439;
					Match(SEMICOLON);
					}
					} 
				}
				State = 1444;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogControlStatementContext subprogControlStatement() {
			return GetRuleContext<SubprogControlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 270, RULE_statement);
		try {
			State = 1449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1445;
				assignStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1446;
				subprogControlStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1447;
				selectionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1448;
				loopStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignOperatorContext assignOperator() {
			return GetRuleContext<AssignOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 272, RULE_assignStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1451;
			variable();
			State = 1452;
			assignOperator();
			State = 1453;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTEMPT_ASSIGN() { return GetToken(stParser.ATTEMPT_ASSIGN, 0); }
		public AssignOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignOperatorContext assignOperator() {
		AssignOperatorContext _localctx = new AssignOperatorContext(Context, State);
		EnterRule(_localctx, 274, RULE_assignOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==ATTEMPT_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogControlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationStatementContext invocationStatement() {
			return GetRuleContext<InvocationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperCallStatementContext superCallStatement() {
			return GetRuleContext<SuperCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public SubprogControlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogControlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogControlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogControlStatementContext subprogControlStatement() {
		SubprogControlStatementContext _localctx = new SubprogControlStatementContext(Context, State);
		EnterRule(_localctx, 276, RULE_subprogControlStatement);
		try {
			State = 1461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1457;
				functionCallStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1458;
				invocationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1459;
				superCallStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1460;
				returnStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 278, RULE_functionCallStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1463;
			functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionAccessContext functionAccess() {
			return GetRuleContext<FunctionAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext[] parameterAssign() {
			return GetRuleContexts<ParameterAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext parameterAssign(int i) {
			return GetRuleContext<ParameterAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 280, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1465;
			functionAccess();
			State = 1466;
			Match(LEFT_PAREN);
			State = 1475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13528387846929948L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 292734800412803073L) != 0) || _la==IDENTIFIER) {
				{
				State = 1467;
				parameterAssign();
				State = 1472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1468;
					Match(COMMA);
					State = 1469;
					parameterAssign();
					}
					}
					State = 1474;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1477;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public FunctionAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionAccessContext functionAccess() {
		FunctionAccessContext _localctx = new FunctionAccessContext(Context, State);
		EnterRule(_localctx, 282, RULE_functionAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1479;
					namespaceName();
					State = 1480;
					Match(DOT);
					}
					} 
				}
				State = 1486;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			}
			State = 1487;
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 284, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1489;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext[] functionBlockInstanceName() {
			return GetRuleContexts<FunctionBlockInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext functionBlockInstanceName(int i) {
			return GetRuleContext<FunctionBlockInstanceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext[] parameterAssign() {
			return GetRuleContexts<ParameterAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext parameterAssign(int i) {
			return GetRuleContext<ParameterAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(stParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext[] classInstanceName() {
			return GetRuleContexts<ClassInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName(int i) {
			return GetRuleContext<ClassInstanceNameContext>(i);
		}
		public InvocationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationStatementContext invocationStatement() {
		InvocationStatementContext _localctx = new InvocationStatementContext(Context, State);
		EnterRule(_localctx, 286, RULE_invocationStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				{
				State = 1491;
				functionBlockInstanceName();
				}
				break;
			case 2:
				{
				State = 1494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THIS) {
					{
					State = 1492;
					Match(THIS);
					State = 1493;
					Match(DOT);
					}
				}

				{
				State = 1502;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1498;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
						case 1:
							{
							State = 1496;
							functionBlockInstanceName();
							}
							break;
						case 2:
							{
							State = 1497;
							classInstanceName();
							}
							break;
						}
						State = 1500;
						Match(DOT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1504;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				State = 1506;
				methodName();
				}
				break;
			}
			State = 1510;
			Match(LEFT_PAREN);
			State = 1519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13528387846929948L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 292734800412803073L) != 0) || _la==IDENTIFIER) {
				{
				State = 1511;
				parameterAssign();
				State = 1516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1512;
					Match(COMMA);
					State = 1513;
					parameterAssign();
					}
					}
					State = 1518;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1521;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OUT() { return GetToken(stParser.ASSIGN_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(stParser.NOT, 0); }
		public ParameterAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterAssignContext parameterAssign() {
		ParameterAssignContext _localctx = new ParameterAssignContext(Context, State);
		EnterRule(_localctx, 288, RULE_parameterAssign);
		int _la;
		try {
			State = 1536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1526;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
				case 1:
					{
					State = 1523;
					variableName();
					State = 1524;
					Match(ASSIGN);
					}
					break;
				}
				State = 1528;
				expression(0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1529;
					Match(NOT);
					}
				}

				State = 1532;
				variableName();
				State = 1533;
				Match(ASSIGN_OUT);
				State = 1534;
				variable();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(stParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		public SuperCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperCallStatementContext superCallStatement() {
		SuperCallStatementContext _localctx = new SuperCallStatementContext(Context, State);
		EnterRule(_localctx, 290, RULE_superCallStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1538;
			Match(SUPER);
			State = 1539;
			Match(LEFT_PAREN);
			State = 1540;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(stParser.RETURN, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 292, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1542;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 294, RULE_selectionStatement);
		try {
			State = 1546;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1544;
				ifStatement();
				}
				break;
			case CASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1545;
				caseStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(stParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(stParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(stParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementListContext ifStatementList() {
			return GetRuleContext<IfStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_IF() { return GetToken(stParser.END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSIF() { return GetTokens(stParser.ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF(int i) {
			return GetToken(stParser.ELSIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsifConditionContext[] elsifCondition() {
			return GetRuleContexts<ElsifConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsifConditionContext elsifCondition(int i) {
			return GetRuleContext<ElsifConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsifStatementListContext[] elsifStatementList() {
			return GetRuleContexts<ElsifStatementListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsifStatementListContext elsifStatementList(int i) {
			return GetRuleContext<ElsifStatementListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(stParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementListContext elseStatementList() {
			return GetRuleContext<ElseStatementListContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 296, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1548;
			Match(IF);
			State = 1549;
			ifCondition();
			State = 1550;
			Match(THEN);
			State = 1551;
			ifStatementList();
			State = 1559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 1552;
				Match(ELSIF);
				State = 1553;
				elsifCondition();
				State = 1554;
				Match(THEN);
				State = 1555;
				elsifStatementList();
				}
				}
				State = 1561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1562;
				Match(ELSE);
				State = 1563;
				elseStatementList();
				}
			}

			State = 1566;
			Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 298, RULE_ifCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1568;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public IfStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementListContext ifStatementList() {
		IfStatementListContext _localctx = new IfStatementListContext(Context, State);
		EnterRule(_localctx, 300, RULE_ifStatementList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1570;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsifConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElsifConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsifCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsifCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsifConditionContext elsifCondition() {
		ElsifConditionContext _localctx = new ElsifConditionContext(Context, State);
		EnterRule(_localctx, 302, RULE_elsifCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1572;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsifStatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ElsifStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsifStatementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsifStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsifStatementListContext elsifStatementList() {
		ElsifStatementListContext _localctx = new ElsifStatementListContext(Context, State);
		EnterRule(_localctx, 304, RULE_elsifStatementList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1574;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ElseStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementListContext elseStatementList() {
		ElseStatementListContext _localctx = new ElseStatementListContext(Context, State);
		EnterRule(_localctx, 306, RULE_elseStatementList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(stParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CASE() { return GetToken(stParser.END_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseSelectionContext[] caseSelection() {
			return GetRuleContexts<CaseSelectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseSelectionContext caseSelection(int i) {
			return GetRuleContext<CaseSelectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(stParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 308, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1578;
			Match(CASE);
			State = 1579;
			expression(0);
			State = 1580;
			Match(OF);
			State = 1582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1581;
				caseSelection();
				}
				}
				State = 1584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 13528387846929948L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 292734800412803073L) != 0) || _la==IDENTIFIER );
			State = 1588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1586;
				Match(ELSE);
				State = 1587;
				statementList();
				}
			}

			State = 1590;
			Match(END_CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseSelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseListContext caseList() {
			return GetRuleContext<CaseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseSelection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseSelectionContext caseSelection() {
		CaseSelectionContext _localctx = new CaseSelectionContext(Context, State);
		EnterRule(_localctx, 310, RULE_caseSelection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1592;
			caseList();
			State = 1593;
			Match(COLON);
			State = 1594;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext[] caseListElement() {
			return GetRuleContexts<CaseListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext caseListElement(int i) {
			return GetRuleContext<CaseListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public CaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListContext caseList() {
		CaseListContext _localctx = new CaseListContext(Context, State);
		EnterRule(_localctx, 312, RULE_caseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1596;
			caseListElement();
			State = 1601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1597;
				Match(COMMA);
				State = 1598;
				caseListElement();
				}
				}
				State = 1603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListElementContext caseListElement() {
		CaseListElementContext _localctx = new CaseListElementContext(Context, State);
		EnterRule(_localctx, 314, RULE_caseListElement);
		try {
			State = 1606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1604;
				subrange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1605;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStatementContext exitStatement() {
			return GetRuleContext<ExitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 316, RULE_loopStatement);
		try {
			State = 1613;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1608;
				forStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1609;
				whileStatement();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1610;
				repeatStatement();
				}
				break;
			case EXIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1611;
				exitStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1612;
				continueStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(stParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ControlVariableContext controlVariable() {
			return GetRuleContext<ControlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForRangeContext forRange() {
			return GetRuleContext<ForRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(stParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FOR() { return GetToken(stParser.END_FOR, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 318, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1615;
			Match(FOR);
			State = 1616;
			controlVariable();
			State = 1617;
			Match(ASSIGN);
			State = 1618;
			forRange();
			State = 1619;
			Match(DO);
			State = 1620;
			statementList();
			State = 1621;
			Match(END_FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ControlVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlVariableContext controlVariable() {
		ControlVariableContext _localctx = new ControlVariableContext(Context, State);
		EnterRule(_localctx, 320, RULE_controlVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1623;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(stParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(stParser.BY, 0); }
		public ForRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeContext forRange() {
		ForRangeContext _localctx = new ForRangeContext(Context, State);
		EnterRule(_localctx, 322, RULE_forRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1625;
			expression(0);
			State = 1626;
			Match(TO);
			State = 1627;
			expression(0);
			State = 1630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 1628;
				Match(BY);
				State = 1629;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(stParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(stParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_WHILE() { return GetToken(stParser.END_WHILE, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 324, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632;
			Match(WHILE);
			State = 1633;
			expression(0);
			State = 1634;
			Match(DO);
			State = 1635;
			statementList();
			State = 1636;
			Match(END_WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(stParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(stParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_REPEAT() { return GetToken(stParser.END_REPEAT, 0); }
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 326, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638;
			Match(REPEAT);
			State = 1639;
			statementList();
			State = 1640;
			Match(UNTIL);
			State = 1641;
			expression(0);
			State = 1642;
			Match(END_REPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableValueContext variableValue() {
			return GetRuleContext<VariableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrOperatorContext orOperator() {
			return GetRuleContext<OrOperatorContext>(0);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndOperatorContext andOperator() {
			return GetRuleContext<AndOperatorContext>(0);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentOperatorContext exponentOperator() {
			return GetRuleContext<ExponentOperatorContext>(0);
		}
		public ExponentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddSubOperatorContext addSubOperator() {
			return GetRuleContext<AddSubOperatorContext>(0);
		}
		public AddSubExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XorOperatorContext xorOperator() {
			return GetRuleContext<XorOperatorContext>(0);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		public BracketedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DerefExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerefOperatorContext[] derefOperator() {
			return GetRuleContexts<DerefOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerefOperatorContext derefOperator(int i) {
			return GetRuleContext<DerefOperatorContext>(i);
		}
		public DerefExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FuncCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultDivModExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultDivModOperatorContext multDivModOperator() {
			return GetRuleContext<MultDivModOperatorContext>(0);
		}
		public MultDivModExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultDivModExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 328;
		EnterRecursionRule(_localctx, 328, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1649;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
				case 1:
					{
					State = 1645;
					literalValue();
					}
					break;
				case 2:
					{
					State = 1646;
					variableValue();
					}
					break;
				case 3:
					{
					State = 1647;
					enumValue();
					}
					break;
				case 4:
					{
					State = 1648;
					referenceValue();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new BracketedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1651;
				Match(LEFT_PAREN);
				State = 1652;
				expression(0);
				State = 1653;
				Match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new FuncCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1655;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1656;
				unaryOperator();
				State = 1657;
				expression(8);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1697;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1695;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
					case 1:
						{
						_localctx = new ExponentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1661;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1662;
						exponentOperator();
						State = 1663;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new MultDivModExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1665;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1666;
						multDivModOperator();
						State = 1667;
						expression(7);
						}
						break;
					case 3:
						{
						_localctx = new AddSubExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1669;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1670;
						addSubOperator();
						State = 1671;
						expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1673;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1674;
						comparisonOperator();
						State = 1675;
						expression(5);
						}
						break;
					case 5:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1677;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1678;
						andOperator();
						State = 1679;
						expression(4);
						}
						break;
					case 6:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1681;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1682;
						xorOperator();
						State = 1683;
						expression(3);
						}
						break;
					case 7:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1685;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1686;
						orOperator();
						State = 1687;
						expression(2);
						}
						break;
					case 8:
						{
						_localctx = new DerefExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1689;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1691;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 1690;
								derefOperator();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 1693;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 1699;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DerefOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(stParser.CARET, 0); }
		public DerefOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derefOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerefOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerefOperatorContext derefOperator() {
		DerefOperatorContext _localctx = new DerefOperatorContext(Context, State);
		EnterRule(_localctx, 330, RULE_derefOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1700;
			Match(CARET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignOperatorContext signOperator() {
			return GetRuleContext<SignOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(stParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 332, RULE_unaryOperator);
		try {
			State = 1704;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1702;
				signOperator();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1703;
				Match(NOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(stParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(stParser.MINUS, 0); }
		public SignOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignOperatorContext signOperator() {
		SignOperatorContext _localctx = new SignOperatorContext(Context, State);
		EnterRule(_localctx, 334, RULE_signOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(stParser.POWER, 0); }
		public ExponentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExponentOperatorContext exponentOperator() {
		ExponentOperatorContext _localctx = new ExponentOperatorContext(Context, State);
		EnterRule(_localctx, 336, RULE_exponentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1708;
			Match(POWER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultDivModOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(stParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(stParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(stParser.MOD, 0); }
		public MultDivModOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multDivModOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultDivModOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultDivModOperatorContext multDivModOperator() {
		MultDivModOperatorContext _localctx = new MultDivModOperatorContext(Context, State);
		EnterRule(_localctx, 338, RULE_multDivModOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1710;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & 13L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddSubOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(stParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(stParser.MINUS, 0); }
		public AddSubOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addSubOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddSubOperatorContext addSubOperator() {
		AddSubOperatorContext _localctx = new AddSubOperatorContext(Context, State);
		EnterRule(_localctx, 340, RULE_addSubOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(stParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(stParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(stParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(stParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(stParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(stParser.NOT_EQUAL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 342, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(stParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(stParser.AND, 0); }
		public AndOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndOperatorContext andOperator() {
		AndOperatorContext _localctx = new AndOperatorContext(Context, State);
		EnterRule(_localctx, 344, RULE_andOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1716;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==AMPERSAND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(stParser.XOR, 0); }
		public XorOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorOperatorContext xorOperator() {
		XorOperatorContext _localctx = new XorOperatorContext(Context, State);
		EnterRule(_localctx, 346, RULE_xorOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1718;
			Match(XOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(stParser.OR, 0); }
		public OrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrOperatorContext orOperator() {
		OrOperatorContext _localctx = new OrOperatorContext(Context, State);
		EnterRule(_localctx, 348, RULE_orOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1720;
			Match(OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(stParser.EXIT, 0); }
		public ExitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStatementContext exitStatement() {
		ExitStatementContext _localctx = new ExitStatementContext(Context, State);
		EnterRule(_localctx, 350, RULE_exitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1722;
			Match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(stParser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 352, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1724;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitPartAccessContext multibitPartAccess() {
			return GetRuleContext<MultibitPartAccessContext>(0);
		}
		public VariableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableValueContext variableValue() {
		VariableValueContext _localctx = new VariableValueContext(Context, State);
		EnterRule(_localctx, 354, RULE_variableValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1726;
			variable();
			State = 1728;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 1727;
				multibitPartAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralContext realLiteral() {
			return GetRuleContext<RealLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeLiteralContext timeLiteral() {
			return GetRuleContext<TimeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsLiteralContext multibitsLiteral() {
			return GetRuleContext<MultibitsLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 356, RULE_literalValue);
		try {
			State = 1736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1730;
				intLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1731;
				realLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1732;
				charLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1733;
				timeLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1734;
				multibitsLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1735;
				boolLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralValueContext intLiteralValue() {
			return GetRuleContext<IntLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public IntLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralContext intLiteral() {
		IntLiteralContext _localctx = new IntLiteralContext(Context, State);
		EnterRule(_localctx, 358, RULE_intLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8355840L) != 0)) {
				{
				State = 1738;
				intTypeName();
				State = 1739;
				Match(HASH);
				}
			}

			State = 1743;
			intLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignOperatorContext signOperator() {
			return GetRuleContext<SignOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_INT() { return GetToken(stParser.BINARY_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_INT() { return GetToken(stParser.OCTAL_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INT() { return GetToken(stParser.HEX_INT, 0); }
		public IntLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralValueContext intLiteralValue() {
		IntLiteralValueContext _localctx = new IntLiteralValueContext(Context, State);
		EnterRule(_localctx, 360, RULE_intLiteralValue);
		int _la;
		try {
			State = 1752;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSIGNED_INT:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 1745;
					signOperator();
					}
				}

				State = 1748;
				Match(UNSIGNED_INT);
				}
				break;
			case BINARY_INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1749;
				Match(BINARY_INT);
				}
				break;
			case OCTAL_INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1750;
				Match(OCTAL_INT);
				}
				break;
			case HEX_INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1751;
				Match(HEX_INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USINT() { return GetToken(stParser.USINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(stParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDINT() { return GetToken(stParser.UDINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULINT() { return GetToken(stParser.ULINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT() { return GetToken(stParser.SINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(stParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DINT() { return GetToken(stParser.DINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINT() { return GetToken(stParser.LINT, 0); }
		public IntTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntTypeNameContext intTypeName() {
		IntTypeNameContext _localctx = new IntTypeNameContext(Context, State);
		EnterRule(_localctx, 362, RULE_intTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8355840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsLiteralValueContext multibitsLiteralValue() {
			return GetRuleContext<MultibitsLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsTypeNameContext multibitsTypeName() {
			return GetRuleContext<MultibitsTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public MultibitsLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsLiteralContext multibitsLiteral() {
		MultibitsLiteralContext _localctx = new MultibitsLiteralContext(Context, State);
		EnterRule(_localctx, 364, RULE_multibitsLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 503316480L) != 0)) {
				{
				State = 1756;
				multibitsTypeName();
				State = 1757;
				Match(HASH);
				}
			}

			State = 1761;
			multibitsLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_INT() { return GetToken(stParser.BINARY_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_INT() { return GetToken(stParser.OCTAL_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INT() { return GetToken(stParser.HEX_INT, 0); }
		public MultibitsLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsLiteralValueContext multibitsLiteralValue() {
		MultibitsLiteralValueContext _localctx = new MultibitsLiteralValueContext(Context, State);
		EnterRule(_localctx, 366, RULE_multibitsLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1763;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15360L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(stParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(stParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DWORD() { return GetToken(stParser.DWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LWORD() { return GetToken(stParser.LWORD, 0); }
		public MultibitsTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsTypeNameContext multibitsTypeName() {
		MultibitsTypeNameContext _localctx = new MultibitsTypeNameContext(Context, State);
		EnterRule(_localctx, 368, RULE_multibitsTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 503316480L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralValueContext realLiteralValue() {
			return GetRuleContext<RealLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeNameContext realTypeName() {
			return GetRuleContext<RealTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public RealLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralContext realLiteral() {
		RealLiteralContext _localctx = new RealLiteralContext(Context, State);
		EnterRule(_localctx, 370, RULE_realLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REAL || _la==LREAL) {
				{
				State = 1767;
				realTypeName();
				State = 1768;
				Match(HASH);
				}
			}

			State = 1772;
			realLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_REAL_VALUE() { return GetToken(stParser.UNSIGNED_REAL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignOperatorContext signOperator() {
			return GetRuleContext<SignOperatorContext>(0);
		}
		public RealLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralValueContext realLiteralValue() {
		RealLiteralValueContext _localctx = new RealLiteralValueContext(Context, State);
		EnterRule(_localctx, 372, RULE_realLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1774;
				signOperator();
				}
			}

			State = 1777;
			Match(UNSIGNED_REAL_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(stParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LREAL() { return GetToken(stParser.LREAL, 0); }
		public RealTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealTypeNameContext realTypeName() {
		RealTypeNameContext _localctx = new RealTypeNameContext(Context, State);
		EnterRule(_localctx, 374, RULE_realTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1779;
			_la = TokenStream.LA(1);
			if ( !(_la==REAL || _la==LREAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralValueContext boolLiteralValue() {
			return GetRuleContext<BoolLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTypeNameContext boolTypeName() {
			return GetRuleContext<BoolTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 376, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BOOL) {
				{
				State = 1781;
				boolTypeName();
				State = 1782;
				Match(HASH);
				}
			}

			State = 1786;
			boolLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(stParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public BoolLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralValueContext boolLiteralValue() {
		BoolLiteralValueContext _localctx = new BoolLiteralValueContext(Context, State);
		EnterRule(_localctx, 378, RULE_boolLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1788;
			_la = TokenStream.LA(1);
			if ( !(_la==UNSIGNED_INT || _la==BOOLEAN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(stParser.BOOL, 0); }
		public BoolTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolTypeNameContext boolTypeName() {
		BoolTypeNameContext _localctx = new BoolTypeNameContext(Context, State);
		EnterRule(_localctx, 380, RULE_boolTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1790;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharStringContext charString() {
			return GetRuleContext<CharStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharStringTypeNameContext charStringTypeName() {
			return GetRuleContext<CharStringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 382, RULE_charLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 64424509440L) != 0)) {
				{
				State = 1792;
				charStringTypeName();
				State = 1793;
				Match(HASH);
				}
			}

			State = 1797;
			charString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BYTE_STRING() { return GetToken(stParser.SINGLE_BYTE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BYTE_STRING() { return GetToken(stParser.DOUBLE_BYTE_STRING, 0); }
		public CharStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharStringContext charString() {
		CharStringContext _localctx = new CharStringContext(Context, State);
		EnterRule(_localctx, 384, RULE_charString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1799;
			_la = TokenStream.LA(1);
			if ( !(_la==SINGLE_BYTE_STRING || _la==DOUBLE_BYTE_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharStringTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(stParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WCHAR() { return GetToken(stParser.WCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		public CharStringTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charStringTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharStringTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharStringTypeNameContext charStringTypeName() {
		CharStringTypeNameContext _localctx = new CharStringTypeNameContext(Context, State);
		EnterRule(_localctx, 386, RULE_charStringTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 64424509440L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationLiteralContext durationLiteral() {
			return GetRuleContext<DurationLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayLiteralContext timeOfDayLiteral() {
			return GetRuleContext<TimeOfDayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeLiteralContext dateAndTimeLiteral() {
			return GetRuleContext<DateAndTimeLiteralContext>(0);
		}
		public TimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeLiteralContext timeLiteral() {
		TimeLiteralContext _localctx = new TimeLiteralContext(Context, State);
		EnterRule(_localctx, 388, RULE_timeLiteral);
		try {
			State = 1807;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TIME:
			case LTIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1803;
				durationLiteral();
				}
				break;
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1804;
				timeOfDayLiteral();
				}
				break;
			case DATE:
			case LDATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1805;
				dateLiteral();
				}
				break;
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1806;
				dateAndTimeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DurationLiteralValueContext durationLiteralValue() {
			return GetRuleContext<DurationLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationTypeNameContext durationTypeName() {
			return GetRuleContext<DurationTypeNameContext>(0);
		}
		public DurationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationLiteralContext durationLiteral() {
		DurationLiteralContext _localctx = new DurationLiteralContext(Context, State);
		EnterRule(_localctx, 390, RULE_durationLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1809;
			durationTypeName();
			}
			State = 1810;
			Match(HASH);
			State = 1811;
			durationLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_DURATION() { return GetToken(stParser.UNSIGNED_DURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignOperatorContext signOperator() {
			return GetRuleContext<SignOperatorContext>(0);
		}
		public DurationLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationLiteralValueContext durationLiteralValue() {
		DurationLiteralValueContext _localctx = new DurationLiteralValueContext(Context, State);
		EnterRule(_localctx, 392, RULE_durationLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1813;
				signOperator();
				}
			}

			State = 1816;
			Match(UNSIGNED_DURATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(stParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTIME() { return GetToken(stParser.LTIME, 0); }
		public DurationTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationTypeNameContext durationTypeName() {
		DurationTypeNameContext _localctx = new DurationTypeNameContext(Context, State);
		EnterRule(_localctx, 394, RULE_durationTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1818;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME || _la==LTIME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayTypeNameContext timeOfDayTypeName() {
			return GetRuleContext<TimeOfDayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayLiteralValueContext timeOfDayLiteralValue() {
			return GetRuleContext<TimeOfDayLiteralValueContext>(0);
		}
		public TimeOfDayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayLiteralContext timeOfDayLiteral() {
		TimeOfDayLiteralContext _localctx = new TimeOfDayLiteralContext(Context, State);
		EnterRule(_localctx, 396, RULE_timeOfDayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1820;
			timeOfDayTypeName();
			State = 1821;
			Match(HASH);
			State = 1822;
			timeOfDayLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCK_TIME() { return GetToken(stParser.CLOCK_TIME, 0); }
		public TimeOfDayLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayLiteralValueContext timeOfDayLiteralValue() {
		TimeOfDayLiteralValueContext _localctx = new TimeOfDayLiteralValueContext(Context, State);
		EnterRule(_localctx, 398, RULE_timeOfDayLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1824;
			Match(CLOCK_TIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_OF_DAY() { return GetToken(stParser.TIME_OF_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTIME_OF_DAY() { return GetToken(stParser.LTIME_OF_DAY, 0); }
		public TimeOfDayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayTypeNameContext timeOfDayTypeName() {
		TimeOfDayTypeNameContext _localctx = new TimeOfDayTypeNameContext(Context, State);
		EnterRule(_localctx, 400, RULE_timeOfDayTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1826;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME_OF_DAY || _la==LTIME_OF_DAY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralValueContext dateLiteralValue() {
			return GetRuleContext<DateLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTypeNameContext dateTypeName() {
			return GetRuleContext<DateTypeNameContext>(0);
		}
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(Context, State);
		EnterRule(_localctx, 402, RULE_dateLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1828;
			dateTypeName();
			}
			State = 1829;
			Match(HASH);
			State = 1830;
			dateLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_VALUE() { return GetToken(stParser.DATE_VALUE, 0); }
		public DateLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralValueContext dateLiteralValue() {
		DateLiteralValueContext _localctx = new DateLiteralValueContext(Context, State);
		EnterRule(_localctx, 404, RULE_dateLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1832;
			Match(DATE_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(stParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDATE() { return GetToken(stParser.LDATE, 0); }
		public DateTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTypeNameContext dateTypeName() {
		DateTypeNameContext _localctx = new DateTypeNameContext(Context, State);
		EnterRule(_localctx, 406, RULE_dateTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1834;
			_la = TokenStream.LA(1);
			if ( !(_la==DATE || _la==LDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeLiteralValueContext dateAndTimeLiteralValue() {
			return GetRuleContext<DateAndTimeLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeTypeNameContext dateAndTimeTypeName() {
			return GetRuleContext<DateAndTimeTypeNameContext>(0);
		}
		public DateAndTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeLiteralContext dateAndTimeLiteral() {
		DateAndTimeLiteralContext _localctx = new DateAndTimeLiteralContext(Context, State);
		EnterRule(_localctx, 408, RULE_dateAndTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1836;
			dateAndTimeTypeName();
			}
			State = 1837;
			Match(HASH);
			State = 1838;
			dateAndTimeLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_TIME_VALUE() { return GetToken(stParser.DATE_TIME_VALUE, 0); }
		public DateAndTimeLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeLiteralValueContext dateAndTimeLiteralValue() {
		DateAndTimeLiteralValueContext _localctx = new DateAndTimeLiteralValueContext(Context, State);
		EnterRule(_localctx, 410, RULE_dateAndTimeLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840;
			Match(DATE_TIME_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_AND_TIME() { return GetToken(stParser.DATE_AND_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDATE_AND_TIME() { return GetToken(stParser.LDATE_AND_TIME, 0); }
		public DateAndTimeTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeTypeNameContext dateAndTimeTypeName() {
		DateAndTimeTypeNameContext _localctx = new DateAndTimeTypeNameContext(Context, State);
		EnterRule(_localctx, 412, RULE_dateAndTimeTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842;
			_la = TokenStream.LA(1);
			if ( !(_la==DATE_AND_TIME || _la==LDATE_AND_TIME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_VARIABLE() { return GetToken(stParser.DIRECT_VARIABLE, 0); }
		public DirectVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectVariableContext directVariable() {
		DirectVariableContext _localctx = new DirectVariableContext(Context, State);
		EnterRule(_localctx, 414, RULE_directVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1844;
			Match(DIRECT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 164: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,158,1847,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,1,0,1,0,5,0,419,8,0,10,0,12,0,422,9,0,1,0,1,0,1,0,1,0,1,0,
		3,0,429,8,0,4,0,431,8,0,11,0,12,0,432,1,1,5,1,436,8,1,10,1,12,1,439,9,
		1,1,1,1,1,1,1,3,1,444,8,1,1,2,1,2,3,2,448,8,2,1,2,1,2,5,2,452,8,2,10,2,
		12,2,455,9,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,4,3,466,8,3,11,3,12,3,
		467,1,4,1,4,1,4,5,4,473,8,4,10,4,12,4,476,9,4,1,5,1,5,1,6,1,6,1,6,1,6,
		5,6,484,8,6,10,6,12,6,487,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		5,7,499,8,7,10,7,12,7,502,9,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
		10,1,10,4,10,515,8,10,11,10,12,10,516,1,10,1,10,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,3,11,528,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,
		3,14,539,8,14,1,15,1,15,1,16,1,16,3,16,545,8,16,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,3,17,556,8,17,1,18,1,18,1,18,1,18,1,18,3,18,563,
		8,18,1,18,1,18,3,18,567,8,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,
		22,1,22,1,22,3,22,580,8,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,588,8,23,
		1,24,3,24,591,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,
		28,1,28,1,28,3,28,606,8,28,1,28,1,28,3,28,610,8,28,1,29,1,29,1,30,1,30,
		1,30,1,30,5,30,618,8,30,10,30,12,30,621,9,30,1,30,1,30,1,30,3,30,626,8,
		30,1,31,1,31,1,31,3,31,631,8,31,1,32,1,32,1,33,1,33,3,33,637,8,33,1,34,
		1,34,1,34,3,34,642,8,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,650,8,35,10,
		35,12,35,653,9,35,1,35,1,35,1,35,3,35,658,8,35,1,35,1,35,3,35,662,8,35,
		1,36,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,3,38,673,8,38,1,39,1,39,1,
		39,1,39,1,39,1,39,5,39,681,8,39,10,39,12,39,684,9,39,1,39,1,39,1,39,1,
		39,3,39,690,8,39,1,40,1,40,1,40,1,40,5,40,696,8,40,10,40,12,40,699,9,40,
		1,40,1,40,1,41,1,41,1,41,1,41,3,41,707,8,41,1,41,1,41,3,41,711,8,41,1,
		42,1,42,1,43,1,43,1,43,1,43,3,43,719,8,43,1,44,1,44,1,44,1,44,1,45,1,45,
		1,45,1,45,1,45,5,45,730,8,45,10,45,12,45,733,9,45,1,45,1,45,1,45,1,45,
		1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,49,1,49,3,49,751,8,
		49,1,50,1,50,3,50,755,8,50,1,50,1,50,1,50,4,50,760,8,50,11,50,12,50,761,
		1,50,1,50,1,51,1,51,1,51,3,51,769,8,51,3,51,771,8,51,1,51,1,51,1,51,1,
		51,1,51,1,51,3,51,779,8,51,1,52,1,52,1,53,1,53,1,53,3,53,786,8,53,1,54,
		1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,3,57,798,8,57,1,58,1,58,1,
		59,1,59,1,59,1,59,5,59,806,8,59,10,59,12,59,809,9,59,1,59,1,59,1,60,1,
		60,1,60,1,60,1,60,1,60,1,60,3,60,820,8,60,1,61,1,61,1,61,1,61,1,62,1,62,
		1,62,1,62,1,62,3,62,831,8,62,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,1,
		66,1,66,1,66,3,66,844,8,66,1,67,4,67,847,8,67,11,67,12,67,848,1,67,1,67,
		1,68,1,68,3,68,855,8,68,1,69,1,69,1,69,1,69,1,69,3,69,862,8,69,1,69,1,
		69,1,70,1,70,1,71,1,71,4,71,870,8,71,11,71,12,71,871,1,72,1,72,3,72,876,
		8,72,1,72,1,72,5,72,880,8,72,10,72,12,72,883,9,72,1,72,1,72,3,72,887,8,
		72,1,72,1,72,3,72,891,8,72,1,72,1,72,1,72,1,72,1,72,5,72,898,8,72,10,72,
		12,72,901,9,72,1,72,5,72,904,8,72,10,72,12,72,907,9,72,1,72,1,72,1,72,
		1,73,1,73,1,74,1,74,1,74,5,74,917,8,74,10,74,12,74,920,9,74,1,74,1,74,
		5,74,924,8,74,10,74,12,74,927,9,74,1,75,1,75,1,76,1,76,1,76,1,76,1,77,
		1,77,1,77,3,77,938,8,77,1,78,1,78,3,78,942,8,78,1,78,3,78,945,8,78,1,78,
		3,78,948,8,78,1,78,1,78,1,78,3,78,953,8,78,1,78,1,78,1,78,1,78,5,78,959,
		8,78,10,78,12,78,962,9,78,1,78,1,78,1,78,1,79,1,79,1,80,1,80,3,80,971,
		8,80,1,81,1,81,1,81,5,81,976,8,81,10,81,12,81,979,9,81,1,81,1,81,1,82,
		1,82,1,83,1,83,3,83,987,8,83,1,84,1,84,1,84,1,84,1,84,4,84,994,8,84,11,
		84,12,84,995,3,84,998,8,84,1,84,1,84,5,84,1002,8,84,10,84,12,84,1005,9,
		84,1,85,1,85,3,85,1009,8,85,1,86,1,86,1,87,1,87,1,87,3,87,1016,8,87,1,
		88,1,88,1,88,1,88,5,88,1022,8,88,10,88,12,88,1025,9,88,1,88,1,88,1,89,
		1,89,1,89,3,89,1032,8,89,1,90,1,90,3,90,1036,8,90,1,90,1,90,1,90,5,90,
		1041,8,90,10,90,12,90,1044,9,90,1,90,1,90,1,91,1,91,1,91,3,91,1051,8,91,
		1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,3,93,1063,8,93,1,93,
		1,93,1,93,1,93,3,93,1069,8,93,1,94,1,94,1,94,5,94,1074,8,94,10,94,12,94,
		1077,9,94,1,95,1,95,3,95,1081,8,95,1,95,1,95,1,95,5,95,1086,8,95,10,95,
		12,95,1089,9,95,1,95,1,95,1,96,1,96,3,96,1095,8,96,1,97,1,97,1,97,1,97,
		5,97,1101,8,97,10,97,12,97,1104,9,97,1,97,1,97,1,98,1,98,3,98,1110,8,98,
		1,99,1,99,3,99,1114,8,99,1,99,3,99,1117,8,99,1,99,1,99,1,99,5,99,1122,
		8,99,10,99,12,99,1125,9,99,1,99,1,99,1,100,1,100,1,100,3,100,1132,8,100,
		1,101,1,101,1,101,3,101,1137,8,101,1,101,1,101,1,101,5,101,1142,8,101,
		10,101,12,101,1145,9,101,1,101,1,101,1,102,1,102,1,102,3,102,1152,8,102,
		1,102,1,102,1,102,5,102,1157,8,102,10,102,12,102,1160,9,102,1,102,1,102,
		1,103,1,103,3,103,1166,8,103,1,103,5,103,1169,8,103,10,103,12,103,1172,
		9,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,105,1,105,
		1,105,3,105,1186,8,105,1,106,1,106,3,106,1190,8,106,1,106,1,106,1,106,
		5,106,1195,8,106,10,106,12,106,1198,9,106,1,106,1,106,1,107,3,107,1203,
		8,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,5,108,1213,8,108,
		10,108,12,108,1216,9,108,1,108,1,108,1,109,1,109,3,109,1222,8,109,1,109,
		1,109,1,109,5,109,1227,8,109,10,109,12,109,1230,9,109,1,109,1,109,1,110,
		1,110,1,110,1,110,3,110,1238,8,110,1,111,1,111,1,112,1,112,3,112,1244,
		8,112,1,112,1,112,1,112,5,112,1249,8,112,10,112,12,112,1252,9,112,1,112,
		1,112,1,113,1,113,1,113,1,113,1,114,1,114,1,114,5,114,1263,8,114,10,114,
		12,114,1266,9,114,1,114,1,114,1,114,3,114,1271,8,114,1,115,1,115,1,115,
		1,115,3,115,1277,8,115,1,116,1,116,1,116,1,116,1,117,1,117,3,117,1285,
		8,117,1,118,1,118,1,118,1,118,1,118,3,118,1292,8,118,1,119,1,119,1,120,
		1,120,1,120,1,120,3,120,1300,8,120,1,120,5,120,1303,8,120,10,120,12,120,
		1306,9,120,1,120,1,120,1,120,1,120,5,120,1312,8,120,10,120,12,120,1315,
		9,120,1,120,1,120,1,120,1,121,1,121,1,122,1,122,3,122,1324,8,122,1,122,
		1,122,5,122,1328,8,122,10,122,12,122,1331,9,122,1,122,1,122,3,122,1335,
		8,122,1,122,1,122,3,122,1339,8,122,1,122,1,122,1,122,5,122,1344,8,122,
		10,122,12,122,1347,9,122,1,122,5,122,1350,8,122,10,122,12,122,1353,9,122,
		1,122,1,122,1,123,1,123,1,124,1,124,1,125,1,125,1,125,5,125,1364,8,125,
		10,125,12,125,1367,9,125,1,125,1,125,5,125,1371,8,125,10,125,12,125,1374,
		9,125,1,126,1,126,1,127,1,127,1,127,5,127,1381,8,127,10,127,12,127,1384,
		9,127,1,127,1,127,3,127,1388,8,127,1,127,5,127,1391,8,127,10,127,12,127,
		1394,9,127,1,127,1,127,1,128,1,128,1,129,1,129,1,129,5,129,1403,8,129,
		10,129,12,129,1406,9,129,1,130,1,130,1,130,1,130,3,130,1412,8,130,1,130,
		5,130,1415,8,130,10,130,12,130,1418,9,130,1,130,1,130,1,131,1,131,1,131,
		1,131,1,132,1,132,1,132,3,132,1429,8,132,1,133,1,133,1,133,1,133,3,133,
		1435,8,133,1,134,3,134,1438,8,134,1,134,5,134,1441,8,134,10,134,12,134,
		1444,9,134,1,135,1,135,1,135,1,135,3,135,1450,8,135,1,136,1,136,1,136,
		1,136,1,137,1,137,1,138,1,138,1,138,1,138,3,138,1462,8,138,1,139,1,139,
		1,140,1,140,1,140,1,140,1,140,5,140,1471,8,140,10,140,12,140,1474,9,140,
		3,140,1476,8,140,1,140,1,140,1,141,1,141,1,141,5,141,1483,8,141,10,141,
		12,141,1486,9,141,1,141,1,141,1,142,1,142,1,143,1,143,1,143,3,143,1495,
		8,143,1,143,1,143,3,143,1499,8,143,1,143,1,143,4,143,1503,8,143,11,143,
		12,143,1504,1,143,1,143,3,143,1509,8,143,1,143,1,143,1,143,1,143,5,143,
		1515,8,143,10,143,12,143,1518,9,143,3,143,1520,8,143,1,143,1,143,1,144,
		1,144,1,144,3,144,1527,8,144,1,144,1,144,3,144,1531,8,144,1,144,1,144,
		1,144,1,144,3,144,1537,8,144,1,145,1,145,1,145,1,145,1,146,1,146,1,147,
		1,147,3,147,1547,8,147,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
		1,148,5,148,1558,8,148,10,148,12,148,1561,9,148,1,148,1,148,3,148,1565,
		8,148,1,148,1,148,1,149,1,149,1,150,1,150,1,151,1,151,1,152,1,152,1,153,
		1,153,1,154,1,154,1,154,1,154,4,154,1583,8,154,11,154,12,154,1584,1,154,
		1,154,3,154,1589,8,154,1,154,1,154,1,155,1,155,1,155,1,155,1,156,1,156,
		1,156,5,156,1600,8,156,10,156,12,156,1603,9,156,1,157,1,157,3,157,1607,
		8,157,1,158,1,158,1,158,1,158,1,158,3,158,1614,8,158,1,159,1,159,1,159,
		1,159,1,159,1,159,1,159,1,159,1,160,1,160,1,161,1,161,1,161,1,161,1,161,
		3,161,1631,8,161,1,162,1,162,1,162,1,162,1,162,1,162,1,163,1,163,1,163,
		1,163,1,163,1,163,1,164,1,164,1,164,1,164,1,164,3,164,1650,8,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,164,1660,8,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,4,164,1692,8,164,11,164,12,164,1693,5,164,1696,
		8,164,10,164,12,164,1699,9,164,1,165,1,165,1,166,1,166,3,166,1705,8,166,
		1,167,1,167,1,168,1,168,1,169,1,169,1,170,1,170,1,171,1,171,1,172,1,172,
		1,173,1,173,1,174,1,174,1,175,1,175,1,176,1,176,1,177,1,177,3,177,1729,
		8,177,1,178,1,178,1,178,1,178,1,178,1,178,3,178,1737,8,178,1,179,1,179,
		1,179,3,179,1742,8,179,1,179,1,179,1,180,3,180,1747,8,180,1,180,1,180,
		1,180,1,180,3,180,1753,8,180,1,181,1,181,1,182,1,182,1,182,3,182,1760,
		8,182,1,182,1,182,1,183,1,183,1,184,1,184,1,185,1,185,1,185,3,185,1771,
		8,185,1,185,1,185,1,186,3,186,1776,8,186,1,186,1,186,1,187,1,187,1,188,
		1,188,1,188,3,188,1785,8,188,1,188,1,188,1,189,1,189,1,190,1,190,1,191,
		1,191,1,191,3,191,1796,8,191,1,191,1,191,1,192,1,192,1,193,1,193,1,194,
		1,194,1,194,1,194,3,194,1808,8,194,1,195,1,195,1,195,1,195,1,196,3,196,
		1815,8,196,1,196,1,196,1,197,1,197,1,198,1,198,1,198,1,198,1,199,1,199,
		1,200,1,200,1,201,1,201,1,201,1,201,1,202,1,202,1,203,1,203,1,204,1,204,
		1,204,1,204,1,205,1,205,1,206,1,206,1,207,1,207,1,207,0,1,328,208,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
		210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
		246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
		282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
		318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,
		354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,
		390,392,394,396,398,400,402,404,406,408,410,412,414,0,24,1,0,32,33,2,0,
		1,1,10,10,1,0,71,72,1,0,59,60,1,0,55,56,2,0,59,60,63,63,2,0,59,59,63,63,
		1,0,3,4,1,0,84,87,2,0,132,132,134,134,1,0,115,116,2,0,117,117,119,120,
		1,0,121,126,2,0,127,127,131,131,1,0,15,22,1,0,10,13,1,0,25,28,1,0,23,24,
		2,0,10,10,14,14,1,0,32,35,1,0,36,37,1,0,38,39,1,0,40,41,1,0,42,43,1902,
		0,430,1,0,0,0,2,437,1,0,0,0,4,445,1,0,0,0,6,465,1,0,0,0,8,469,1,0,0,0,
		10,477,1,0,0,0,12,479,1,0,0,0,14,490,1,0,0,0,16,506,1,0,0,0,18,508,1,0,
		0,0,20,510,1,0,0,0,22,527,1,0,0,0,24,529,1,0,0,0,26,533,1,0,0,0,28,535,
		1,0,0,0,30,540,1,0,0,0,32,544,1,0,0,0,34,555,1,0,0,0,36,566,1,0,0,0,38,
		568,1,0,0,0,40,570,1,0,0,0,42,574,1,0,0,0,44,576,1,0,0,0,46,587,1,0,0,
		0,48,590,1,0,0,0,50,594,1,0,0,0,52,598,1,0,0,0,54,600,1,0,0,0,56,602,1,
		0,0,0,58,611,1,0,0,0,60,613,1,0,0,0,62,627,1,0,0,0,64,632,1,0,0,0,66,636,
		1,0,0,0,68,641,1,0,0,0,70,657,1,0,0,0,72,663,1,0,0,0,74,667,1,0,0,0,76,
		669,1,0,0,0,78,689,1,0,0,0,80,691,1,0,0,0,82,710,1,0,0,0,84,712,1,0,0,
		0,86,718,1,0,0,0,88,720,1,0,0,0,90,724,1,0,0,0,92,738,1,0,0,0,94,742,1,
		0,0,0,96,746,1,0,0,0,98,750,1,0,0,0,100,752,1,0,0,0,102,765,1,0,0,0,104,
		780,1,0,0,0,106,782,1,0,0,0,108,787,1,0,0,0,110,789,1,0,0,0,112,791,1,
		0,0,0,114,794,1,0,0,0,116,799,1,0,0,0,118,801,1,0,0,0,120,812,1,0,0,0,
		122,821,1,0,0,0,124,825,1,0,0,0,126,832,1,0,0,0,128,834,1,0,0,0,130,838,
		1,0,0,0,132,840,1,0,0,0,134,846,1,0,0,0,136,854,1,0,0,0,138,856,1,0,0,
		0,140,865,1,0,0,0,142,867,1,0,0,0,144,873,1,0,0,0,146,911,1,0,0,0,148,
		918,1,0,0,0,150,928,1,0,0,0,152,930,1,0,0,0,154,934,1,0,0,0,156,939,1,
		0,0,0,158,966,1,0,0,0,160,970,1,0,0,0,162,977,1,0,0,0,164,982,1,0,0,0,
		166,986,1,0,0,0,168,997,1,0,0,0,170,1008,1,0,0,0,172,1010,1,0,0,0,174,
		1015,1,0,0,0,176,1017,1,0,0,0,178,1031,1,0,0,0,180,1033,1,0,0,0,182,1050,
		1,0,0,0,184,1052,1,0,0,0,186,1068,1,0,0,0,188,1070,1,0,0,0,190,1078,1,
		0,0,0,192,1094,1,0,0,0,194,1096,1,0,0,0,196,1109,1,0,0,0,198,1111,1,0,
		0,0,200,1131,1,0,0,0,202,1133,1,0,0,0,204,1148,1,0,0,0,206,1163,1,0,0,
		0,208,1175,1,0,0,0,210,1185,1,0,0,0,212,1187,1,0,0,0,214,1202,1,0,0,0,
		216,1208,1,0,0,0,218,1219,1,0,0,0,220,1233,1,0,0,0,222,1239,1,0,0,0,224,
		1241,1,0,0,0,226,1255,1,0,0,0,228,1270,1,0,0,0,230,1276,1,0,0,0,232,1278,
		1,0,0,0,234,1282,1,0,0,0,236,1286,1,0,0,0,238,1293,1,0,0,0,240,1295,1,
		0,0,0,242,1319,1,0,0,0,244,1321,1,0,0,0,246,1356,1,0,0,0,248,1358,1,0,
		0,0,250,1365,1,0,0,0,252,1375,1,0,0,0,254,1377,1,0,0,0,256,1397,1,0,0,
		0,258,1399,1,0,0,0,260,1407,1,0,0,0,262,1421,1,0,0,0,264,1425,1,0,0,0,
		266,1434,1,0,0,0,268,1442,1,0,0,0,270,1449,1,0,0,0,272,1451,1,0,0,0,274,
		1455,1,0,0,0,276,1461,1,0,0,0,278,1463,1,0,0,0,280,1465,1,0,0,0,282,1484,
		1,0,0,0,284,1489,1,0,0,0,286,1508,1,0,0,0,288,1536,1,0,0,0,290,1538,1,
		0,0,0,292,1542,1,0,0,0,294,1546,1,0,0,0,296,1548,1,0,0,0,298,1568,1,0,
		0,0,300,1570,1,0,0,0,302,1572,1,0,0,0,304,1574,1,0,0,0,306,1576,1,0,0,
		0,308,1578,1,0,0,0,310,1592,1,0,0,0,312,1596,1,0,0,0,314,1606,1,0,0,0,
		316,1613,1,0,0,0,318,1615,1,0,0,0,320,1623,1,0,0,0,322,1625,1,0,0,0,324,
		1632,1,0,0,0,326,1638,1,0,0,0,328,1659,1,0,0,0,330,1700,1,0,0,0,332,1704,
		1,0,0,0,334,1706,1,0,0,0,336,1708,1,0,0,0,338,1710,1,0,0,0,340,1712,1,
		0,0,0,342,1714,1,0,0,0,344,1716,1,0,0,0,346,1718,1,0,0,0,348,1720,1,0,
		0,0,350,1722,1,0,0,0,352,1724,1,0,0,0,354,1726,1,0,0,0,356,1736,1,0,0,
		0,358,1741,1,0,0,0,360,1752,1,0,0,0,362,1754,1,0,0,0,364,1759,1,0,0,0,
		366,1763,1,0,0,0,368,1765,1,0,0,0,370,1770,1,0,0,0,372,1775,1,0,0,0,374,
		1779,1,0,0,0,376,1784,1,0,0,0,378,1788,1,0,0,0,380,1790,1,0,0,0,382,1795,
		1,0,0,0,384,1799,1,0,0,0,386,1801,1,0,0,0,388,1807,1,0,0,0,390,1809,1,
		0,0,0,392,1814,1,0,0,0,394,1818,1,0,0,0,396,1820,1,0,0,0,398,1824,1,0,
		0,0,400,1826,1,0,0,0,402,1828,1,0,0,0,404,1832,1,0,0,0,406,1834,1,0,0,
		0,408,1836,1,0,0,0,410,1840,1,0,0,0,412,1842,1,0,0,0,414,1844,1,0,0,0,
		416,431,3,2,1,0,417,419,3,12,6,0,418,417,1,0,0,0,419,422,1,0,0,0,420,418,
		1,0,0,0,420,421,1,0,0,0,421,428,1,0,0,0,422,420,1,0,0,0,423,429,3,4,2,
		0,424,429,3,224,112,0,425,429,3,20,10,0,426,429,3,244,122,0,427,429,3,
		254,127,0,428,423,1,0,0,0,428,424,1,0,0,0,428,425,1,0,0,0,428,426,1,0,
		0,0,428,427,1,0,0,0,429,431,1,0,0,0,430,416,1,0,0,0,430,420,1,0,0,0,431,
		432,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,1,1,0,0,0,434,436,3,12,
		6,0,435,434,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,
		443,1,0,0,0,439,437,1,0,0,0,440,444,3,240,120,0,441,444,3,144,72,0,442,
		444,3,14,7,0,443,440,1,0,0,0,443,441,1,0,0,0,443,442,1,0,0,0,444,3,1,0,
		0,0,445,447,5,93,0,0,446,448,5,87,0,0,447,446,1,0,0,0,447,448,1,0,0,0,
		448,449,1,0,0,0,449,453,3,8,4,0,450,452,3,12,6,0,451,450,1,0,0,0,452,455,
		1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,453,1,0,0,
		0,456,457,3,6,3,0,457,458,5,94,0,0,458,5,1,0,0,0,459,466,3,20,10,0,460,
		466,3,240,120,0,461,466,3,144,72,0,462,466,3,244,122,0,463,466,3,254,127,
		0,464,466,3,4,2,0,465,459,1,0,0,0,465,460,1,0,0,0,465,461,1,0,0,0,465,
		462,1,0,0,0,465,463,1,0,0,0,465,464,1,0,0,0,466,467,1,0,0,0,467,465,1,
		0,0,0,467,468,1,0,0,0,468,7,1,0,0,0,469,474,3,10,5,0,470,471,5,142,0,0,
		471,473,3,10,5,0,472,470,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,
		1,0,0,0,475,9,1,0,0,0,476,474,1,0,0,0,477,478,5,148,0,0,478,11,1,0,0,0,
		479,480,5,95,0,0,480,485,3,8,4,0,481,482,5,139,0,0,482,484,3,8,4,0,483,
		481,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,488,1,
		0,0,0,487,485,1,0,0,0,488,489,5,141,0,0,489,13,1,0,0,0,490,491,5,90,0,
		0,491,500,3,16,8,0,492,499,3,178,89,0,493,499,3,218,109,0,494,499,3,198,
		99,0,495,499,3,216,108,0,496,499,3,200,100,0,497,499,3,212,106,0,498,492,
		1,0,0,0,498,493,1,0,0,0,498,494,1,0,0,0,498,495,1,0,0,0,498,496,1,0,0,
		0,498,497,1,0,0,0,499,502,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,
		503,1,0,0,0,502,500,1,0,0,0,503,504,3,18,9,0,504,505,5,91,0,0,505,15,1,
		0,0,0,506,507,5,148,0,0,507,17,1,0,0,0,508,509,3,268,134,0,509,19,1,0,
		0,0,510,514,5,44,0,0,511,512,3,22,11,0,512,513,5,141,0,0,513,515,1,0,0,
		0,514,511,1,0,0,0,515,516,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,
		518,1,0,0,0,518,519,5,45,0,0,519,21,1,0,0,0,520,528,3,24,12,0,521,528,
		3,40,20,0,522,528,3,56,28,0,523,528,3,72,36,0,524,528,3,94,47,0,525,528,
		3,124,62,0,526,528,3,128,64,0,527,520,1,0,0,0,527,521,1,0,0,0,527,522,
		1,0,0,0,527,523,1,0,0,0,527,524,1,0,0,0,527,525,1,0,0,0,527,526,1,0,0,
		0,528,23,1,0,0,0,529,530,3,26,13,0,530,531,5,140,0,0,531,532,3,28,14,0,
		532,25,1,0,0,0,533,534,5,148,0,0,534,27,1,0,0,0,535,538,3,32,16,0,536,
		537,5,132,0,0,537,539,3,30,15,0,538,536,1,0,0,0,538,539,1,0,0,0,539,29,
		1,0,0,0,540,541,3,328,164,0,541,31,1,0,0,0,542,545,3,34,17,0,543,545,3,
		162,81,0,544,542,1,0,0,0,544,543,1,0,0,0,545,33,1,0,0,0,546,556,3,362,
		181,0,547,556,3,374,187,0,548,556,3,380,190,0,549,556,3,368,184,0,550,
		556,3,36,18,0,551,556,3,406,203,0,552,556,3,400,200,0,553,556,3,412,206,
		0,554,556,3,394,197,0,555,546,1,0,0,0,555,547,1,0,0,0,555,548,1,0,0,0,
		555,549,1,0,0,0,555,550,1,0,0,0,555,551,1,0,0,0,555,552,1,0,0,0,555,553,
		1,0,0,0,555,554,1,0,0,0,556,35,1,0,0,0,557,562,7,0,0,0,558,559,5,137,0,
		0,559,560,3,38,19,0,560,561,5,138,0,0,561,563,1,0,0,0,562,558,1,0,0,0,
		562,563,1,0,0,0,563,567,1,0,0,0,564,567,5,34,0,0,565,567,5,35,0,0,566,
		557,1,0,0,0,566,564,1,0,0,0,566,565,1,0,0,0,567,37,1,0,0,0,568,569,5,10,
		0,0,569,39,1,0,0,0,570,571,3,42,21,0,571,572,5,140,0,0,572,573,3,44,22,
		0,573,41,1,0,0,0,574,575,5,148,0,0,575,43,1,0,0,0,576,579,3,46,23,0,577,
		578,5,132,0,0,578,580,3,48,24,0,579,577,1,0,0,0,579,580,1,0,0,0,580,45,
		1,0,0,0,581,582,3,362,181,0,582,583,5,135,0,0,583,584,3,50,25,0,584,585,
		5,136,0,0,585,588,1,0,0,0,586,588,3,162,81,0,587,581,1,0,0,0,587,586,1,
		0,0,0,588,47,1,0,0,0,589,591,3,334,167,0,590,589,1,0,0,0,590,591,1,0,0,
		0,591,592,1,0,0,0,592,593,5,10,0,0,593,49,1,0,0,0,594,595,3,52,26,0,595,
		596,5,143,0,0,596,597,3,54,27,0,597,51,1,0,0,0,598,599,3,328,164,0,599,
		53,1,0,0,0,600,601,3,328,164,0,601,55,1,0,0,0,602,603,3,58,29,0,603,609,
		5,140,0,0,604,606,3,34,17,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,
		0,0,0,607,610,3,60,30,0,608,610,3,70,35,0,609,605,1,0,0,0,609,608,1,0,
		0,0,610,57,1,0,0,0,611,612,5,148,0,0,612,59,1,0,0,0,613,614,5,135,0,0,
		614,619,3,62,31,0,615,616,5,139,0,0,616,618,3,62,31,0,617,615,1,0,0,0,
		618,621,1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,622,1,0,0,0,621,619,
		1,0,0,0,622,625,5,136,0,0,623,624,5,132,0,0,624,626,3,68,34,0,625,623,
		1,0,0,0,625,626,1,0,0,0,626,61,1,0,0,0,627,630,3,64,32,0,628,629,5,132,
		0,0,629,631,3,66,33,0,630,628,1,0,0,0,630,631,1,0,0,0,631,63,1,0,0,0,632,
		633,5,148,0,0,633,65,1,0,0,0,634,637,3,358,179,0,635,637,3,328,164,0,636,
		634,1,0,0,0,636,635,1,0,0,0,637,67,1,0,0,0,638,639,3,58,29,0,639,640,5,
		144,0,0,640,642,1,0,0,0,641,638,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,
		0,643,644,3,64,32,0,644,69,1,0,0,0,645,646,5,135,0,0,646,651,3,64,32,0,
		647,648,5,139,0,0,648,650,3,64,32,0,649,647,1,0,0,0,650,653,1,0,0,0,651,
		649,1,0,0,0,651,652,1,0,0,0,652,654,1,0,0,0,653,651,1,0,0,0,654,655,5,
		136,0,0,655,658,1,0,0,0,656,658,3,162,81,0,657,645,1,0,0,0,657,656,1,0,
		0,0,658,661,1,0,0,0,659,660,5,132,0,0,660,662,3,68,34,0,661,659,1,0,0,
		0,661,662,1,0,0,0,662,71,1,0,0,0,663,664,3,74,37,0,664,665,5,140,0,0,665,
		666,3,76,38,0,666,73,1,0,0,0,667,668,5,148,0,0,668,75,1,0,0,0,669,672,
		3,78,39,0,670,671,5,132,0,0,671,673,3,80,40,0,672,670,1,0,0,0,672,673,
		1,0,0,0,673,77,1,0,0,0,674,690,3,162,81,0,675,676,5,46,0,0,676,677,5,137,
		0,0,677,682,3,50,25,0,678,679,5,139,0,0,679,681,3,50,25,0,680,678,1,0,
		0,0,681,684,1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,685,1,0,0,0,684,
		682,1,0,0,0,685,686,5,138,0,0,686,687,5,47,0,0,687,688,3,160,80,0,688,
		690,1,0,0,0,689,674,1,0,0,0,689,675,1,0,0,0,690,79,1,0,0,0,691,692,5,137,
		0,0,692,697,3,82,41,0,693,694,5,139,0,0,694,696,3,82,41,0,695,693,1,0,
		0,0,696,699,1,0,0,0,697,695,1,0,0,0,697,698,1,0,0,0,698,700,1,0,0,0,699,
		697,1,0,0,0,700,701,5,138,0,0,701,81,1,0,0,0,702,711,3,86,43,0,703,704,
		3,84,42,0,704,706,5,135,0,0,705,707,3,86,43,0,706,705,1,0,0,0,706,707,
		1,0,0,0,707,708,1,0,0,0,708,709,5,136,0,0,709,711,1,0,0,0,710,702,1,0,
		0,0,710,703,1,0,0,0,711,83,1,0,0,0,712,713,5,10,0,0,713,85,1,0,0,0,714,
		719,3,328,164,0,715,719,3,68,34,0,716,719,3,118,59,0,717,719,3,80,40,0,
		718,714,1,0,0,0,718,715,1,0,0,0,718,716,1,0,0,0,718,717,1,0,0,0,719,87,
		1,0,0,0,720,721,3,188,94,0,721,722,5,140,0,0,722,723,3,90,45,0,723,89,
		1,0,0,0,724,725,5,46,0,0,725,726,5,137,0,0,726,731,5,117,0,0,727,728,5,
		139,0,0,728,730,5,117,0,0,729,727,1,0,0,0,730,733,1,0,0,0,731,729,1,0,
		0,0,731,732,1,0,0,0,732,734,1,0,0,0,733,731,1,0,0,0,734,735,5,138,0,0,
		735,736,5,47,0,0,736,737,3,160,80,0,737,91,1,0,0,0,738,739,3,188,94,0,
		739,740,5,140,0,0,740,741,3,76,38,0,741,93,1,0,0,0,742,743,3,96,48,0,743,
		744,5,140,0,0,744,745,3,98,49,0,745,95,1,0,0,0,746,747,5,148,0,0,747,97,
		1,0,0,0,748,751,3,100,50,0,749,751,3,114,57,0,750,748,1,0,0,0,750,749,
		1,0,0,0,751,99,1,0,0,0,752,754,5,48,0,0,753,755,5,49,0,0,754,753,1,0,0,
		0,754,755,1,0,0,0,755,759,1,0,0,0,756,757,3,102,51,0,757,758,5,141,0,0,
		758,760,1,0,0,0,759,756,1,0,0,0,760,761,1,0,0,0,761,759,1,0,0,0,761,762,
		1,0,0,0,762,763,1,0,0,0,763,764,5,50,0,0,764,101,1,0,0,0,765,770,3,104,
		52,0,766,768,3,106,53,0,767,769,3,112,56,0,768,767,1,0,0,0,768,769,1,0,
		0,0,769,771,1,0,0,0,770,766,1,0,0,0,770,771,1,0,0,0,771,772,1,0,0,0,772,
		778,5,140,0,0,773,779,3,28,14,0,774,779,3,44,22,0,775,779,3,70,35,0,776,
		779,3,76,38,0,777,779,3,114,57,0,778,773,1,0,0,0,778,774,1,0,0,0,778,775,
		1,0,0,0,778,776,1,0,0,0,778,777,1,0,0,0,779,103,1,0,0,0,780,781,5,148,
		0,0,781,105,1,0,0,0,782,785,5,67,0,0,783,786,3,108,54,0,784,786,3,110,
		55,0,785,783,1,0,0,0,785,784,1,0,0,0,786,107,1,0,0,0,787,788,5,1,0,0,788,
		109,1,0,0,0,789,790,5,2,0,0,790,111,1,0,0,0,791,792,5,142,0,0,792,793,
		7,1,0,0,793,113,1,0,0,0,794,797,3,116,58,0,795,796,5,132,0,0,796,798,3,
		118,59,0,797,795,1,0,0,0,797,798,1,0,0,0,798,115,1,0,0,0,799,800,3,162,
		81,0,800,117,1,0,0,0,801,802,5,135,0,0,802,807,3,120,60,0,803,804,5,139,
		0,0,804,806,3,120,60,0,805,803,1,0,0,0,806,809,1,0,0,0,807,805,1,0,0,0,
		807,808,1,0,0,0,808,810,1,0,0,0,809,807,1,0,0,0,810,811,5,136,0,0,811,
		119,1,0,0,0,812,813,3,104,52,0,813,819,5,132,0,0,814,820,3,328,164,0,815,
		820,3,68,34,0,816,820,3,80,40,0,817,820,3,118,59,0,818,820,3,136,68,0,
		819,814,1,0,0,0,819,815,1,0,0,0,819,816,1,0,0,0,819,817,1,0,0,0,819,818,
		1,0,0,0,820,121,1,0,0,0,821,822,3,188,94,0,822,823,5,140,0,0,823,824,3,
		114,57,0,824,123,1,0,0,0,825,826,3,126,63,0,826,827,5,140,0,0,827,830,
		3,36,18,0,828,829,5,132,0,0,829,831,3,384,192,0,830,828,1,0,0,0,830,831,
		1,0,0,0,831,125,1,0,0,0,832,833,5,148,0,0,833,127,1,0,0,0,834,835,3,130,
		65,0,835,836,5,140,0,0,836,837,3,132,66,0,837,129,1,0,0,0,838,839,5,148,
		0,0,839,131,1,0,0,0,840,843,3,134,67,0,841,842,5,132,0,0,842,844,3,136,
		68,0,843,841,1,0,0,0,843,844,1,0,0,0,844,133,1,0,0,0,845,847,5,51,0,0,
		846,845,1,0,0,0,847,848,1,0,0,0,848,846,1,0,0,0,848,849,1,0,0,0,849,850,
		1,0,0,0,850,851,3,160,80,0,851,135,1,0,0,0,852,855,3,138,69,0,853,855,
		5,53,0,0,854,852,1,0,0,0,854,853,1,0,0,0,855,137,1,0,0,0,856,857,5,52,
		0,0,857,861,5,135,0,0,858,862,3,168,84,0,859,862,3,148,74,0,860,862,3,
		250,125,0,861,858,1,0,0,0,861,859,1,0,0,0,861,860,1,0,0,0,862,863,1,0,
		0,0,863,864,5,136,0,0,864,139,1,0,0,0,865,866,5,148,0,0,866,141,1,0,0,
		0,867,869,3,140,70,0,868,870,5,145,0,0,869,868,1,0,0,0,870,871,1,0,0,0,
		871,869,1,0,0,0,871,872,1,0,0,0,872,143,1,0,0,0,873,875,5,70,0,0,874,876,
		7,2,0,0,875,874,1,0,0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,881,3,146,
		73,0,878,880,3,12,6,0,879,878,1,0,0,0,880,883,1,0,0,0,881,879,1,0,0,0,
		881,882,1,0,0,0,882,886,1,0,0,0,883,881,1,0,0,0,884,885,5,73,0,0,885,887,
		3,162,81,0,886,884,1,0,0,0,886,887,1,0,0,0,887,890,1,0,0,0,888,889,5,74,
		0,0,889,891,3,258,129,0,890,888,1,0,0,0,890,891,1,0,0,0,891,899,1,0,0,
		0,892,898,3,178,89,0,893,898,3,218,109,0,894,898,3,198,99,0,895,898,3,
		216,108,0,896,898,3,200,100,0,897,892,1,0,0,0,897,893,1,0,0,0,897,894,
		1,0,0,0,897,895,1,0,0,0,897,896,1,0,0,0,898,901,1,0,0,0,899,897,1,0,0,
		0,899,900,1,0,0,0,900,905,1,0,0,0,901,899,1,0,0,0,902,904,3,156,78,0,903,
		902,1,0,0,0,904,907,1,0,0,0,905,903,1,0,0,0,905,906,1,0,0,0,906,908,1,
		0,0,0,907,905,1,0,0,0,908,909,3,150,75,0,909,910,5,75,0,0,910,145,1,0,
		0,0,911,912,5,148,0,0,912,147,1,0,0,0,913,914,3,10,5,0,914,915,5,142,0,
		0,915,917,1,0,0,0,916,913,1,0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,
		919,1,0,0,0,919,921,1,0,0,0,920,918,1,0,0,0,921,925,3,146,73,0,922,924,
		5,145,0,0,923,922,1,0,0,0,924,927,1,0,0,0,925,923,1,0,0,0,925,926,1,0,
		0,0,926,149,1,0,0,0,927,925,1,0,0,0,928,929,3,268,134,0,929,151,1,0,0,
		0,930,931,3,188,94,0,931,932,5,140,0,0,932,933,3,154,77,0,933,153,1,0,
		0,0,934,937,3,162,81,0,935,936,5,132,0,0,936,938,3,118,59,0,937,935,1,
		0,0,0,937,938,1,0,0,0,938,155,1,0,0,0,939,941,5,76,0,0,940,942,3,252,126,
		0,941,940,1,0,0,0,941,942,1,0,0,0,942,944,1,0,0,0,943,945,7,2,0,0,944,
		943,1,0,0,0,944,945,1,0,0,0,945,947,1,0,0,0,946,948,5,78,0,0,947,946,1,
		0,0,0,947,948,1,0,0,0,948,949,1,0,0,0,949,952,3,158,79,0,950,951,5,140,
		0,0,951,953,3,160,80,0,952,950,1,0,0,0,952,953,1,0,0,0,953,960,1,0,0,0,
		954,959,3,178,89,0,955,959,3,218,109,0,956,959,3,198,99,0,957,959,3,216,
		108,0,958,954,1,0,0,0,958,955,1,0,0,0,958,956,1,0,0,0,958,957,1,0,0,0,
		959,962,1,0,0,0,960,958,1,0,0,0,960,961,1,0,0,0,961,963,1,0,0,0,962,960,
		1,0,0,0,963,964,3,242,121,0,964,965,5,79,0,0,965,157,1,0,0,0,966,967,5,
		148,0,0,967,159,1,0,0,0,968,971,3,34,17,0,969,971,3,162,81,0,970,968,1,
		0,0,0,970,969,1,0,0,0,971,161,1,0,0,0,972,973,3,10,5,0,973,974,5,142,0,
		0,974,976,1,0,0,0,975,972,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,
		978,1,0,0,0,978,980,1,0,0,0,979,977,1,0,0,0,980,981,3,164,82,0,981,163,
		1,0,0,0,982,983,5,148,0,0,983,165,1,0,0,0,984,987,3,414,207,0,985,987,
		3,168,84,0,986,984,1,0,0,0,986,985,1,0,0,0,987,167,1,0,0,0,988,989,5,77,
		0,0,989,998,5,142,0,0,990,991,3,10,5,0,991,992,5,142,0,0,992,994,1,0,0,
		0,993,990,1,0,0,0,994,995,1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,
		998,1,0,0,0,997,988,1,0,0,0,997,993,1,0,0,0,997,998,1,0,0,0,998,999,1,
		0,0,0,999,1003,3,170,85,0,1000,1002,3,174,87,0,1001,1000,1,0,0,0,1002,
		1005,1,0,0,0,1003,1001,1,0,0,0,1003,1004,1,0,0,0,1004,169,1,0,0,0,1005,
		1003,1,0,0,0,1006,1009,3,172,86,0,1007,1009,3,142,71,0,1008,1006,1,0,0,
		0,1008,1007,1,0,0,0,1009,171,1,0,0,0,1010,1011,5,148,0,0,1011,173,1,0,
		0,0,1012,1016,3,176,88,0,1013,1014,5,139,0,0,1014,1016,3,170,85,0,1015,
		1012,1,0,0,0,1015,1013,1,0,0,0,1016,175,1,0,0,0,1017,1018,5,137,0,0,1018,
		1023,3,328,164,0,1019,1020,5,139,0,0,1020,1022,3,328,164,0,1021,1019,1,
		0,0,0,1022,1025,1,0,0,0,1023,1021,1,0,0,0,1023,1024,1,0,0,0,1024,1026,
		1,0,0,0,1025,1023,1,0,0,0,1026,1027,5,138,0,0,1027,177,1,0,0,0,1028,1032,
		3,180,90,0,1029,1032,3,190,95,0,1030,1032,3,194,97,0,1031,1028,1,0,0,0,
		1031,1029,1,0,0,0,1031,1030,1,0,0,0,1032,179,1,0,0,0,1033,1035,5,54,0,
		0,1034,1036,7,3,0,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1042,1,0,
		0,0,1037,1038,3,182,91,0,1038,1039,5,141,0,0,1039,1041,1,0,0,0,1040,1037,
		1,0,0,0,1041,1044,1,0,0,0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,1045,
		1,0,0,0,1044,1042,1,0,0,0,1045,1046,5,61,0,0,1046,181,1,0,0,0,1047,1051,
		3,186,93,0,1048,1051,3,184,92,0,1049,1051,3,88,44,0,1050,1047,1,0,0,0,
		1050,1048,1,0,0,0,1050,1049,1,0,0,0,1051,183,1,0,0,0,1052,1053,3,188,94,
		0,1053,1054,5,140,0,0,1054,1055,5,29,0,0,1055,1056,7,4,0,0,1056,185,1,
		0,0,0,1057,1058,3,188,94,0,1058,1062,5,140,0,0,1059,1063,3,28,14,0,1060,
		1063,3,232,116,0,1061,1063,3,132,66,0,1062,1059,1,0,0,0,1062,1060,1,0,
		0,0,1062,1061,1,0,0,0,1063,1069,1,0,0,0,1064,1069,3,92,46,0,1065,1069,
		3,122,61,0,1066,1069,3,152,76,0,1067,1069,3,262,131,0,1068,1057,1,0,0,
		0,1068,1064,1,0,0,0,1068,1065,1,0,0,0,1068,1066,1,0,0,0,1068,1067,1,0,
		0,0,1069,187,1,0,0,0,1070,1075,3,172,86,0,1071,1072,5,139,0,0,1072,1074,
		3,172,86,0,1073,1071,1,0,0,0,1074,1077,1,0,0,0,1075,1073,1,0,0,0,1075,
		1076,1,0,0,0,1076,189,1,0,0,0,1077,1075,1,0,0,0,1078,1080,5,57,0,0,1079,
		1081,7,3,0,0,1080,1079,1,0,0,0,1080,1081,1,0,0,0,1081,1087,1,0,0,0,1082,
		1083,3,192,96,0,1083,1084,5,141,0,0,1084,1086,1,0,0,0,1085,1082,1,0,0,
		0,1086,1089,1,0,0,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1090,1,0,
		0,0,1089,1087,1,0,0,0,1090,1091,5,61,0,0,1091,191,1,0,0,0,1092,1095,3,
		186,93,0,1093,1095,3,88,44,0,1094,1092,1,0,0,0,1094,1093,1,0,0,0,1095,
		193,1,0,0,0,1096,1102,5,58,0,0,1097,1098,3,196,98,0,1098,1099,5,141,0,
		0,1099,1101,1,0,0,0,1100,1097,1,0,0,0,1101,1104,1,0,0,0,1102,1100,1,0,
		0,0,1102,1103,1,0,0,0,1103,1105,1,0,0,0,1104,1102,1,0,0,0,1105,1106,5,
		61,0,0,1106,195,1,0,0,0,1107,1110,3,186,93,0,1108,1110,3,88,44,0,1109,
		1107,1,0,0,0,1109,1108,1,0,0,0,1110,197,1,0,0,0,1111,1113,5,62,0,0,1112,
		1114,5,63,0,0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1116,1,0,0,0,1115,
		1117,3,252,126,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1123,1,0,0,0,
		1118,1119,3,186,93,0,1119,1120,5,141,0,0,1120,1122,1,0,0,0,1121,1118,1,
		0,0,0,1122,1125,1,0,0,0,1123,1121,1,0,0,0,1123,1124,1,0,0,0,1124,1126,
		1,0,0,0,1125,1123,1,0,0,0,1126,1127,5,61,0,0,1127,199,1,0,0,0,1128,1132,
		3,204,102,0,1129,1132,3,202,101,0,1130,1132,3,206,103,0,1131,1128,1,0,
		0,0,1131,1129,1,0,0,0,1131,1130,1,0,0,0,1132,201,1,0,0,0,1133,1134,5,62,
		0,0,1134,1136,5,60,0,0,1135,1137,3,252,126,0,1136,1135,1,0,0,0,1136,1137,
		1,0,0,0,1137,1143,1,0,0,0,1138,1139,3,186,93,0,1139,1140,5,141,0,0,1140,
		1142,1,0,0,0,1141,1138,1,0,0,0,1142,1145,1,0,0,0,1143,1141,1,0,0,0,1143,
		1144,1,0,0,0,1144,1146,1,0,0,0,1145,1143,1,0,0,0,1146,1147,5,61,0,0,1147,
		203,1,0,0,0,1148,1149,5,62,0,0,1149,1151,5,59,0,0,1150,1152,3,252,126,
		0,1151,1150,1,0,0,0,1151,1152,1,0,0,0,1152,1158,1,0,0,0,1153,1154,3,186,
		93,0,1154,1155,5,141,0,0,1155,1157,1,0,0,0,1156,1153,1,0,0,0,1157,1160,
		1,0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,1159,1161,1,0,0,0,1160,1158,
		1,0,0,0,1161,1162,5,61,0,0,1162,205,1,0,0,0,1163,1165,5,62,0,0,1164,1166,
		7,3,0,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,1170,1,0,0,0,1167,1169,
		3,208,104,0,1168,1167,1,0,0,0,1169,1172,1,0,0,0,1170,1168,1,0,0,0,1170,
		1171,1,0,0,0,1171,1173,1,0,0,0,1172,1170,1,0,0,0,1173,1174,5,61,0,0,1174,
		207,1,0,0,0,1175,1176,3,172,86,0,1176,1177,5,67,0,0,1177,1178,5,1,0,0,
		1178,1179,5,140,0,0,1179,1180,3,210,105,0,1180,1181,5,141,0,0,1181,209,
		1,0,0,0,1182,1186,3,32,16,0,1183,1186,3,78,39,0,1184,1186,3,236,118,0,
		1185,1182,1,0,0,0,1185,1183,1,0,0,0,1185,1184,1,0,0,0,1186,211,1,0,0,0,
		1187,1189,5,62,0,0,1188,1190,7,5,0,0,1189,1188,1,0,0,0,1189,1190,1,0,0,
		0,1190,1196,1,0,0,0,1191,1192,3,214,107,0,1192,1193,5,141,0,0,1193,1195,
		1,0,0,0,1194,1191,1,0,0,0,1195,1198,1,0,0,0,1196,1194,1,0,0,0,1196,1197,
		1,0,0,0,1197,1199,1,0,0,0,1198,1196,1,0,0,0,1199,1200,5,61,0,0,1200,213,
		1,0,0,0,1201,1203,3,172,86,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,
		1204,1,0,0,0,1204,1205,3,106,53,0,1205,1206,5,140,0,0,1206,1207,3,230,
		115,0,1207,215,1,0,0,0,1208,1214,5,64,0,0,1209,1210,3,186,93,0,1210,1211,
		5,141,0,0,1211,1213,1,0,0,0,1212,1209,1,0,0,0,1213,1216,1,0,0,0,1214,1212,
		1,0,0,0,1214,1215,1,0,0,0,1215,1217,1,0,0,0,1216,1214,1,0,0,0,1217,1218,
		5,61,0,0,1218,217,1,0,0,0,1219,1221,5,65,0,0,1220,1222,5,63,0,0,1221,1220,
		1,0,0,0,1221,1222,1,0,0,0,1222,1228,1,0,0,0,1223,1224,3,220,110,0,1224,
		1225,5,141,0,0,1225,1227,1,0,0,0,1226,1223,1,0,0,0,1227,1230,1,0,0,0,1228,
		1226,1,0,0,0,1228,1229,1,0,0,0,1229,1231,1,0,0,0,1230,1228,1,0,0,0,1231,
		1232,5,61,0,0,1232,219,1,0,0,0,1233,1234,3,222,111,0,1234,1237,5,140,0,
		0,1235,1238,3,32,16,0,1236,1238,3,78,39,0,1237,1235,1,0,0,0,1237,1236,
		1,0,0,0,1238,221,1,0,0,0,1239,1240,5,148,0,0,1240,223,1,0,0,0,1241,1243,
		5,66,0,0,1242,1244,7,6,0,0,1243,1242,1,0,0,0,1243,1244,1,0,0,0,1244,1250,
		1,0,0,0,1245,1246,3,226,113,0,1246,1247,5,141,0,0,1247,1249,1,0,0,0,1248,
		1245,1,0,0,0,1249,1252,1,0,0,0,1250,1248,1,0,0,0,1250,1251,1,0,0,0,1251,
		1253,1,0,0,0,1252,1250,1,0,0,0,1253,1254,5,61,0,0,1254,225,1,0,0,0,1255,
		1256,3,228,114,0,1256,1257,5,140,0,0,1257,1258,3,230,115,0,1258,227,1,
		0,0,0,1259,1264,3,222,111,0,1260,1261,5,139,0,0,1261,1263,3,222,111,0,
		1262,1260,1,0,0,0,1263,1266,1,0,0,0,1264,1262,1,0,0,0,1264,1265,1,0,0,
		0,1265,1271,1,0,0,0,1266,1264,1,0,0,0,1267,1268,3,222,111,0,1268,1269,
		3,106,53,0,1269,1271,1,0,0,0,1270,1259,1,0,0,0,1270,1267,1,0,0,0,1271,
		229,1,0,0,0,1272,1277,3,28,14,0,1273,1277,3,76,38,0,1274,1277,3,114,57,
		0,1275,1277,3,234,117,0,1276,1272,1,0,0,0,1276,1273,1,0,0,0,1276,1274,
		1,0,0,0,1276,1275,1,0,0,0,1277,231,1,0,0,0,1278,1279,3,188,94,0,1279,1280,
		5,140,0,0,1280,1281,3,234,117,0,1281,233,1,0,0,0,1282,1284,3,236,118,0,
		1283,1285,3,238,119,0,1284,1283,1,0,0,0,1284,1285,1,0,0,0,1285,235,1,0,
		0,0,1286,1291,7,0,0,0,1287,1288,5,137,0,0,1288,1289,3,38,19,0,1289,1290,
		5,138,0,0,1290,1292,1,0,0,0,1291,1287,1,0,0,0,1291,1292,1,0,0,0,1292,237,
		1,0,0,0,1293,1294,7,7,0,0,1294,239,1,0,0,0,1295,1296,5,68,0,0,1296,1299,
		3,284,142,0,1297,1298,5,140,0,0,1298,1300,3,160,80,0,1299,1297,1,0,0,0,
		1299,1300,1,0,0,0,1300,1304,1,0,0,0,1301,1303,3,12,6,0,1302,1301,1,0,0,
		0,1303,1306,1,0,0,0,1304,1302,1,0,0,0,1304,1305,1,0,0,0,1305,1313,1,0,
		0,0,1306,1304,1,0,0,0,1307,1312,3,178,89,0,1308,1312,3,218,109,0,1309,
		1312,3,198,99,0,1310,1312,3,216,108,0,1311,1307,1,0,0,0,1311,1308,1,0,
		0,0,1311,1309,1,0,0,0,1311,1310,1,0,0,0,1312,1315,1,0,0,0,1313,1311,1,
		0,0,0,1313,1314,1,0,0,0,1314,1316,1,0,0,0,1315,1313,1,0,0,0,1316,1317,
		3,242,121,0,1317,1318,5,69,0,0,1318,241,1,0,0,0,1319,1320,3,268,134,0,
		1320,243,1,0,0,0,1321,1323,5,80,0,0,1322,1324,7,2,0,0,1323,1322,1,0,0,
		0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,1329,3,246,123,0,1326,1328,
		3,12,6,0,1327,1326,1,0,0,0,1328,1331,1,0,0,0,1329,1327,1,0,0,0,1329,1330,
		1,0,0,0,1330,1334,1,0,0,0,1331,1329,1,0,0,0,1332,1333,5,73,0,0,1333,1335,
		3,162,81,0,1334,1332,1,0,0,0,1334,1335,1,0,0,0,1335,1338,1,0,0,0,1336,
		1337,5,74,0,0,1337,1339,3,258,129,0,1338,1336,1,0,0,0,1338,1339,1,0,0,
		0,1339,1345,1,0,0,0,1340,1344,3,218,109,0,1341,1344,3,198,99,0,1342,1344,
		3,200,100,0,1343,1340,1,0,0,0,1343,1341,1,0,0,0,1343,1342,1,0,0,0,1344,
		1347,1,0,0,0,1345,1343,1,0,0,0,1345,1346,1,0,0,0,1346,1351,1,0,0,0,1347,
		1345,1,0,0,0,1348,1350,3,156,78,0,1349,1348,1,0,0,0,1350,1353,1,0,0,0,
		1351,1349,1,0,0,0,1351,1352,1,0,0,0,1352,1354,1,0,0,0,1353,1351,1,0,0,
		0,1354,1355,5,81,0,0,1355,245,1,0,0,0,1356,1357,5,148,0,0,1357,247,1,0,
		0,0,1358,1359,5,148,0,0,1359,249,1,0,0,0,1360,1361,3,10,5,0,1361,1362,
		5,142,0,0,1362,1364,1,0,0,0,1363,1360,1,0,0,0,1364,1367,1,0,0,0,1365,1363,
		1,0,0,0,1365,1366,1,0,0,0,1366,1368,1,0,0,0,1367,1365,1,0,0,0,1368,1372,
		3,248,124,0,1369,1371,5,145,0,0,1370,1369,1,0,0,0,1371,1374,1,0,0,0,1372,
		1370,1,0,0,0,1372,1373,1,0,0,0,1373,251,1,0,0,0,1374,1372,1,0,0,0,1375,
		1376,7,8,0,0,1376,253,1,0,0,0,1377,1378,5,82,0,0,1378,1382,3,256,128,0,
		1379,1381,3,12,6,0,1380,1379,1,0,0,0,1381,1384,1,0,0,0,1382,1380,1,0,0,
		0,1382,1383,1,0,0,0,1383,1387,1,0,0,0,1384,1382,1,0,0,0,1385,1386,5,73,
		0,0,1386,1388,3,258,129,0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,1392,
		1,0,0,0,1389,1391,3,260,130,0,1390,1389,1,0,0,0,1391,1394,1,0,0,0,1392,
		1390,1,0,0,0,1392,1393,1,0,0,0,1393,1395,1,0,0,0,1394,1392,1,0,0,0,1395,
		1396,5,83,0,0,1396,255,1,0,0,0,1397,1398,5,148,0,0,1398,257,1,0,0,0,1399,
		1404,3,162,81,0,1400,1401,5,140,0,0,1401,1403,3,162,81,0,1402,1400,1,0,
		0,0,1403,1406,1,0,0,0,1404,1402,1,0,0,0,1404,1405,1,0,0,0,1405,259,1,0,
		0,0,1406,1404,1,0,0,0,1407,1408,5,76,0,0,1408,1411,3,158,79,0,1409,1410,
		5,140,0,0,1410,1412,3,160,80,0,1411,1409,1,0,0,0,1411,1412,1,0,0,0,1412,
		1416,1,0,0,0,1413,1415,3,178,89,0,1414,1413,1,0,0,0,1415,1418,1,0,0,0,
		1416,1414,1,0,0,0,1416,1417,1,0,0,0,1417,1419,1,0,0,0,1418,1416,1,0,0,
		0,1419,1420,5,79,0,0,1420,261,1,0,0,0,1421,1422,3,188,94,0,1422,1423,5,
		140,0,0,1423,1424,3,264,132,0,1424,263,1,0,0,0,1425,1428,3,162,81,0,1426,
		1427,5,132,0,0,1427,1429,3,266,133,0,1428,1426,1,0,0,0,1428,1429,1,0,0,
		0,1429,265,1,0,0,0,1430,1435,3,168,84,0,1431,1435,3,148,74,0,1432,1435,
		3,250,125,0,1433,1435,5,53,0,0,1434,1430,1,0,0,0,1434,1431,1,0,0,0,1434,
		1432,1,0,0,0,1434,1433,1,0,0,0,1435,267,1,0,0,0,1436,1438,3,270,135,0,
		1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1439,1,0,0,0,1439,1441,5,141,
		0,0,1440,1437,1,0,0,0,1441,1444,1,0,0,0,1442,1440,1,0,0,0,1442,1443,1,
		0,0,0,1443,269,1,0,0,0,1444,1442,1,0,0,0,1445,1450,3,272,136,0,1446,1450,
		3,276,138,0,1447,1450,3,294,147,0,1448,1450,3,316,158,0,1449,1445,1,0,
		0,0,1449,1446,1,0,0,0,1449,1447,1,0,0,0,1449,1448,1,0,0,0,1450,271,1,0,
		0,0,1451,1452,3,166,83,0,1452,1453,3,274,137,0,1453,1454,3,328,164,0,1454,
		273,1,0,0,0,1455,1456,7,9,0,0,1456,275,1,0,0,0,1457,1462,3,278,139,0,1458,
		1462,3,286,143,0,1459,1462,3,290,145,0,1460,1462,3,292,146,0,1461,1457,
		1,0,0,0,1461,1458,1,0,0,0,1461,1459,1,0,0,0,1461,1460,1,0,0,0,1462,277,
		1,0,0,0,1463,1464,3,280,140,0,1464,279,1,0,0,0,1465,1466,3,282,141,0,1466,
		1475,5,135,0,0,1467,1472,3,288,144,0,1468,1469,5,139,0,0,1469,1471,3,288,
		144,0,1470,1468,1,0,0,0,1471,1474,1,0,0,0,1472,1470,1,0,0,0,1472,1473,
		1,0,0,0,1473,1476,1,0,0,0,1474,1472,1,0,0,0,1475,1467,1,0,0,0,1475,1476,
		1,0,0,0,1476,1477,1,0,0,0,1477,1478,5,136,0,0,1478,281,1,0,0,0,1479,1480,
		3,10,5,0,1480,1481,5,142,0,0,1481,1483,1,0,0,0,1482,1479,1,0,0,0,1483,
		1486,1,0,0,0,1484,1482,1,0,0,0,1484,1485,1,0,0,0,1485,1487,1,0,0,0,1486,
		1484,1,0,0,0,1487,1488,3,284,142,0,1488,283,1,0,0,0,1489,1490,5,148,0,
		0,1490,285,1,0,0,0,1491,1509,3,148,74,0,1492,1493,5,77,0,0,1493,1495,5,
		142,0,0,1494,1492,1,0,0,0,1494,1495,1,0,0,0,1495,1502,1,0,0,0,1496,1499,
		3,148,74,0,1497,1499,3,250,125,0,1498,1496,1,0,0,0,1498,1497,1,0,0,0,1499,
		1500,1,0,0,0,1500,1501,5,142,0,0,1501,1503,1,0,0,0,1502,1498,1,0,0,0,1503,
		1504,1,0,0,0,1504,1502,1,0,0,0,1504,1505,1,0,0,0,1505,1506,1,0,0,0,1506,
		1507,3,158,79,0,1507,1509,1,0,0,0,1508,1491,1,0,0,0,1508,1494,1,0,0,0,
		1509,1510,1,0,0,0,1510,1519,5,135,0,0,1511,1516,3,288,144,0,1512,1513,
		5,139,0,0,1513,1515,3,288,144,0,1514,1512,1,0,0,0,1515,1518,1,0,0,0,1516,
		1514,1,0,0,0,1516,1517,1,0,0,0,1517,1520,1,0,0,0,1518,1516,1,0,0,0,1519,
		1511,1,0,0,0,1519,1520,1,0,0,0,1520,1521,1,0,0,0,1521,1522,5,136,0,0,1522,
		287,1,0,0,0,1523,1524,3,172,86,0,1524,1525,5,132,0,0,1525,1527,1,0,0,0,
		1526,1523,1,0,0,0,1526,1527,1,0,0,0,1527,1528,1,0,0,0,1528,1537,3,328,
		164,0,1529,1531,5,129,0,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,1531,1532,
		1,0,0,0,1532,1533,3,172,86,0,1533,1534,5,133,0,0,1534,1535,3,166,83,0,
		1535,1537,1,0,0,0,1536,1526,1,0,0,0,1536,1530,1,0,0,0,1537,289,1,0,0,0,
		1538,1539,5,88,0,0,1539,1540,5,135,0,0,1540,1541,5,136,0,0,1541,291,1,
		0,0,0,1542,1543,5,89,0,0,1543,293,1,0,0,0,1544,1547,3,296,148,0,1545,1547,
		3,308,154,0,1546,1544,1,0,0,0,1546,1545,1,0,0,0,1547,295,1,0,0,0,1548,
		1549,5,96,0,0,1549,1550,3,298,149,0,1550,1551,5,97,0,0,1551,1559,3,300,
		150,0,1552,1553,5,98,0,0,1553,1554,3,302,151,0,1554,1555,5,97,0,0,1555,
		1556,3,304,152,0,1556,1558,1,0,0,0,1557,1552,1,0,0,0,1558,1561,1,0,0,0,
		1559,1557,1,0,0,0,1559,1560,1,0,0,0,1560,1564,1,0,0,0,1561,1559,1,0,0,
		0,1562,1563,5,99,0,0,1563,1565,3,306,153,0,1564,1562,1,0,0,0,1564,1565,
		1,0,0,0,1565,1566,1,0,0,0,1566,1567,5,100,0,0,1567,297,1,0,0,0,1568,1569,
		3,328,164,0,1569,299,1,0,0,0,1570,1571,3,268,134,0,1571,301,1,0,0,0,1572,
		1573,3,328,164,0,1573,303,1,0,0,0,1574,1575,3,268,134,0,1575,305,1,0,0,
		0,1576,1577,3,268,134,0,1577,307,1,0,0,0,1578,1579,5,101,0,0,1579,1580,
		3,328,164,0,1580,1582,5,47,0,0,1581,1583,3,310,155,0,1582,1581,1,0,0,0,
		1583,1584,1,0,0,0,1584,1582,1,0,0,0,1584,1585,1,0,0,0,1585,1588,1,0,0,
		0,1586,1587,5,99,0,0,1587,1589,3,268,134,0,1588,1586,1,0,0,0,1588,1589,
		1,0,0,0,1589,1590,1,0,0,0,1590,1591,5,102,0,0,1591,309,1,0,0,0,1592,1593,
		3,312,156,0,1593,1594,5,140,0,0,1594,1595,3,268,134,0,1595,311,1,0,0,0,
		1596,1601,3,314,157,0,1597,1598,5,139,0,0,1598,1600,3,314,157,0,1599,1597,
		1,0,0,0,1600,1603,1,0,0,0,1601,1599,1,0,0,0,1601,1602,1,0,0,0,1602,313,
		1,0,0,0,1603,1601,1,0,0,0,1604,1607,3,50,25,0,1605,1607,3,328,164,0,1606,
		1604,1,0,0,0,1606,1605,1,0,0,0,1607,315,1,0,0,0,1608,1614,3,318,159,0,
		1609,1614,3,324,162,0,1610,1614,3,326,163,0,1611,1614,3,350,175,0,1612,
		1614,3,352,176,0,1613,1608,1,0,0,0,1613,1609,1,0,0,0,1613,1610,1,0,0,0,
		1613,1611,1,0,0,0,1613,1612,1,0,0,0,1614,317,1,0,0,0,1615,1616,5,105,0,
		0,1616,1617,3,320,160,0,1617,1618,5,132,0,0,1618,1619,3,322,161,0,1619,
		1620,5,108,0,0,1620,1621,3,268,134,0,1621,1622,5,109,0,0,1622,319,1,0,
		0,0,1623,1624,5,148,0,0,1624,321,1,0,0,0,1625,1626,3,328,164,0,1626,1627,
		5,106,0,0,1627,1630,3,328,164,0,1628,1629,5,107,0,0,1629,1631,3,328,164,
		0,1630,1628,1,0,0,0,1630,1631,1,0,0,0,1631,323,1,0,0,0,1632,1633,5,110,
		0,0,1633,1634,3,328,164,0,1634,1635,5,108,0,0,1635,1636,3,268,134,0,1636,
		1637,5,111,0,0,1637,325,1,0,0,0,1638,1639,5,112,0,0,1639,1640,3,268,134,
		0,1640,1641,5,113,0,0,1641,1642,3,328,164,0,1642,1643,5,114,0,0,1643,327,
		1,0,0,0,1644,1649,6,164,-1,0,1645,1650,3,356,178,0,1646,1650,3,354,177,
		0,1647,1650,3,68,34,0,1648,1650,3,136,68,0,1649,1645,1,0,0,0,1649,1646,
		1,0,0,0,1649,1647,1,0,0,0,1649,1648,1,0,0,0,1650,1660,1,0,0,0,1651,1652,
		5,135,0,0,1652,1653,3,328,164,0,1653,1654,5,136,0,0,1654,1660,1,0,0,0,
		1655,1660,3,280,140,0,1656,1657,3,332,166,0,1657,1658,3,328,164,8,1658,
		1660,1,0,0,0,1659,1644,1,0,0,0,1659,1651,1,0,0,0,1659,1655,1,0,0,0,1659,
		1656,1,0,0,0,1660,1697,1,0,0,0,1661,1662,10,7,0,0,1662,1663,3,336,168,
		0,1663,1664,3,328,164,7,1664,1696,1,0,0,0,1665,1666,10,6,0,0,1666,1667,
		3,338,169,0,1667,1668,3,328,164,7,1668,1696,1,0,0,0,1669,1670,10,5,0,0,
		1670,1671,3,340,170,0,1671,1672,3,328,164,6,1672,1696,1,0,0,0,1673,1674,
		10,4,0,0,1674,1675,3,342,171,0,1675,1676,3,328,164,5,1676,1696,1,0,0,0,
		1677,1678,10,3,0,0,1678,1679,3,344,172,0,1679,1680,3,328,164,4,1680,1696,
		1,0,0,0,1681,1682,10,2,0,0,1682,1683,3,346,173,0,1683,1684,3,328,164,3,
		1684,1696,1,0,0,0,1685,1686,10,1,0,0,1686,1687,3,348,174,0,1687,1688,3,
		328,164,2,1688,1696,1,0,0,0,1689,1691,10,9,0,0,1690,1692,3,330,165,0,1691,
		1690,1,0,0,0,1692,1693,1,0,0,0,1693,1691,1,0,0,0,1693,1694,1,0,0,0,1694,
		1696,1,0,0,0,1695,1661,1,0,0,0,1695,1665,1,0,0,0,1695,1669,1,0,0,0,1695,
		1673,1,0,0,0,1695,1677,1,0,0,0,1695,1681,1,0,0,0,1695,1685,1,0,0,0,1695,
		1689,1,0,0,0,1696,1699,1,0,0,0,1697,1695,1,0,0,0,1697,1698,1,0,0,0,1698,
		329,1,0,0,0,1699,1697,1,0,0,0,1700,1701,5,145,0,0,1701,331,1,0,0,0,1702,
		1705,3,334,167,0,1703,1705,5,129,0,0,1704,1702,1,0,0,0,1704,1703,1,0,0,
		0,1705,333,1,0,0,0,1706,1707,7,10,0,0,1707,335,1,0,0,0,1708,1709,5,118,
		0,0,1709,337,1,0,0,0,1710,1711,7,11,0,0,1711,339,1,0,0,0,1712,1713,7,10,
		0,0,1713,341,1,0,0,0,1714,1715,7,12,0,0,1715,343,1,0,0,0,1716,1717,7,13,
		0,0,1717,345,1,0,0,0,1718,1719,5,130,0,0,1719,347,1,0,0,0,1720,1721,5,
		128,0,0,1721,349,1,0,0,0,1722,1723,5,103,0,0,1723,351,1,0,0,0,1724,1725,
		5,104,0,0,1725,353,1,0,0,0,1726,1728,3,166,83,0,1727,1729,3,112,56,0,1728,
		1727,1,0,0,0,1728,1729,1,0,0,0,1729,355,1,0,0,0,1730,1737,3,358,179,0,
		1731,1737,3,370,185,0,1732,1737,3,382,191,0,1733,1737,3,388,194,0,1734,
		1737,3,364,182,0,1735,1737,3,376,188,0,1736,1730,1,0,0,0,1736,1731,1,0,
		0,0,1736,1732,1,0,0,0,1736,1733,1,0,0,0,1736,1734,1,0,0,0,1736,1735,1,
		0,0,0,1737,357,1,0,0,0,1738,1739,3,362,181,0,1739,1740,5,144,0,0,1740,
		1742,1,0,0,0,1741,1738,1,0,0,0,1741,1742,1,0,0,0,1742,1743,1,0,0,0,1743,
		1744,3,360,180,0,1744,359,1,0,0,0,1745,1747,3,334,167,0,1746,1745,1,0,
		0,0,1746,1747,1,0,0,0,1747,1748,1,0,0,0,1748,1753,5,10,0,0,1749,1753,5,
		11,0,0,1750,1753,5,12,0,0,1751,1753,5,13,0,0,1752,1746,1,0,0,0,1752,1749,
		1,0,0,0,1752,1750,1,0,0,0,1752,1751,1,0,0,0,1753,361,1,0,0,0,1754,1755,
		7,14,0,0,1755,363,1,0,0,0,1756,1757,3,368,184,0,1757,1758,5,144,0,0,1758,
		1760,1,0,0,0,1759,1756,1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,
		1762,3,366,183,0,1762,365,1,0,0,0,1763,1764,7,15,0,0,1764,367,1,0,0,0,
		1765,1766,7,16,0,0,1766,369,1,0,0,0,1767,1768,3,374,187,0,1768,1769,5,
		144,0,0,1769,1771,1,0,0,0,1770,1767,1,0,0,0,1770,1771,1,0,0,0,1771,1772,
		1,0,0,0,1772,1773,3,372,186,0,1773,371,1,0,0,0,1774,1776,3,334,167,0,1775,
		1774,1,0,0,0,1775,1776,1,0,0,0,1776,1777,1,0,0,0,1777,1778,5,9,0,0,1778,
		373,1,0,0,0,1779,1780,7,17,0,0,1780,375,1,0,0,0,1781,1782,3,380,190,0,
		1782,1783,5,144,0,0,1783,1785,1,0,0,0,1784,1781,1,0,0,0,1784,1785,1,0,
		0,0,1785,1786,1,0,0,0,1786,1787,3,378,189,0,1787,377,1,0,0,0,1788,1789,
		7,18,0,0,1789,379,1,0,0,0,1790,1791,5,29,0,0,1791,381,1,0,0,0,1792,1793,
		3,386,193,0,1793,1794,5,144,0,0,1794,1796,1,0,0,0,1795,1792,1,0,0,0,1795,
		1796,1,0,0,0,1796,1797,1,0,0,0,1797,1798,3,384,192,0,1798,383,1,0,0,0,
		1799,1800,7,7,0,0,1800,385,1,0,0,0,1801,1802,7,19,0,0,1802,387,1,0,0,0,
		1803,1808,3,390,195,0,1804,1808,3,396,198,0,1805,1808,3,402,201,0,1806,
		1808,3,408,204,0,1807,1803,1,0,0,0,1807,1804,1,0,0,0,1807,1805,1,0,0,0,
		1807,1806,1,0,0,0,1808,389,1,0,0,0,1809,1810,3,394,197,0,1810,1811,5,144,
		0,0,1811,1812,3,392,196,0,1812,391,1,0,0,0,1813,1815,3,334,167,0,1814,
		1813,1,0,0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1817,5,5,0,0,1817,
		393,1,0,0,0,1818,1819,7,20,0,0,1819,395,1,0,0,0,1820,1821,3,400,200,0,
		1821,1822,5,144,0,0,1822,1823,3,398,199,0,1823,397,1,0,0,0,1824,1825,5,
		8,0,0,1825,399,1,0,0,0,1826,1827,7,21,0,0,1827,401,1,0,0,0,1828,1829,3,
		406,203,0,1829,1830,5,144,0,0,1830,1831,3,404,202,0,1831,403,1,0,0,0,1832,
		1833,5,7,0,0,1833,405,1,0,0,0,1834,1835,7,22,0,0,1835,407,1,0,0,0,1836,
		1837,3,412,206,0,1837,1838,5,144,0,0,1838,1839,3,410,205,0,1839,409,1,
		0,0,0,1840,1841,5,6,0,0,1841,411,1,0,0,0,1842,1843,7,23,0,0,1843,413,1,
		0,0,0,1844,1845,5,2,0,0,1845,415,1,0,0,0,184,420,428,430,432,437,443,447,
		453,465,467,474,485,498,500,516,527,538,544,555,562,566,579,587,590,605,
		609,619,625,630,636,641,651,657,661,672,682,689,697,706,710,718,731,750,
		754,761,768,770,778,785,797,807,819,830,843,848,854,861,871,875,881,886,
		890,897,899,905,918,925,937,941,944,947,952,958,960,970,977,986,995,997,
		1003,1008,1015,1023,1031,1035,1042,1050,1062,1068,1075,1080,1087,1094,
		1102,1109,1113,1116,1123,1131,1136,1143,1151,1158,1165,1170,1185,1189,
		1196,1202,1214,1221,1228,1237,1243,1250,1264,1270,1276,1284,1291,1299,
		1304,1311,1313,1323,1329,1334,1338,1343,1345,1351,1365,1372,1382,1387,
		1392,1404,1411,1416,1428,1434,1437,1442,1449,1461,1472,1475,1484,1494,
		1498,1504,1508,1516,1519,1526,1530,1536,1546,1559,1564,1584,1588,1601,
		1606,1613,1630,1649,1659,1693,1695,1697,1704,1728,1736,1741,1746,1752,
		1759,1770,1775,1784,1795,1807,1814
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
