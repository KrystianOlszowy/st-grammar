//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/kryst/Desktop/Praca magisterska/st-grammar/st.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class stParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RELATIVE_ADDRESS=1, DIRECT_VARIABLE=2, SINGLE_BYTE_STRING=3, DOUBLE_BYTE_STRING=4, 
		DURATION=5, DATE_TIME_VALUE=6, DATE_VALUE=7, CLOCK_TIME=8, REAL_VALUE=9, 
		SIGNED_INT=10, UNSIGNED_INT=11, BINARY_INT=12, OCTAL_INT=13, HEX_INT=14, 
		BOOLEAN=15, USINT=16, UINT=17, UDINT=18, ULINT=19, SINT=20, INT=21, DINT=22, 
		LINT=23, REAL=24, LREAL=25, BYTE=26, WORD=27, DWORD=28, LWORD=29, BOOL=30, 
		FALSE=31, TRUE=32, STRING=33, WSTRING=34, CHAR=35, WCHAR=36, TIME=37, 
		LTIME=38, TIME_OF_DAY=39, LTIME_OF_DAY=40, DATE=41, LDATE=42, DATE_AND_TIME=43, 
		LDATE_AND_TIME=44, TYPE=45, END_TYPE=46, ARRAY=47, OF=48, STRUCT=49, OVERLAP=50, 
		END_STRUCT=51, AT=52, REF_TO=53, REF=54, NULL=55, THIS=56, VAR_INPUT=57, 
		VAR_OUTPUT=58, VAR_IN_OUT=59, RETAIN=60, NON_RETAIN=61, END_VAR=62, VAR=63, 
		CONSTANT=64, VAR_TEMP=65, VAR_EXTERNAL=66, VAR_GLOBAL=67, FUNCTION=68, 
		END_FUNCTION=69, FUNCTION_BLOCK=70, FINAL=71, ABSTRACT=72, EXTENDS=73, 
		IMPLEMENTS=74, END_FUNCTION_BLOCK=75, METHOD=76, OVERRIDE=77, END_METHOD=78, 
		CLASS=79, END_CLASS=80, INTERFACE=81, END_INTERFACE=82, PUBLIC=83, PROTECTED=84, 
		PRIVATE=85, INTERNAL=86, SUPER=87, RETURN=88, PROGRAM=89, END_PROGRAM=90, 
		VAR_ACCESS=91, CONFIGURATION=92, END_CONFIGURATION=93, RESOURCE=94, ON=95, 
		END_RESOURCE=96, READ_WRITE=97, READ_ONLY=98, TASK=99, SINGLE=100, INTERVAL=101, 
		PRIORITY=102, WITH=103, VAR_CONFIG=104, NAMESPACE=105, END_NAMESPACE=106, 
		USING=107, IF=108, THEN=109, ELSIF=110, ELSE=111, END_IF=112, CASE=113, 
		END_CASE=114, EXIT=115, CONTINUE=116, FOR=117, TO=118, BY=119, DO=120, 
		END_FOR=121, WHILE=122, END_WHILE=123, REPEAT=124, UNTIL=125, END_REPEAT=126, 
		PLUS=127, MINUS=128, ASTERISK=129, POWER=130, SLASH=131, MOD=132, EQUAL=133, 
		NOT_EQUAL=134, LESS=135, LESS_EQUAL=136, GREATER=137, GREATER_EQUAL=138, 
		AND=139, OR=140, NOT=141, XOR=142, AMPERSAND=143, ASSIGN=144, ASSIGN_OUT=145, 
		ATTEMPT_ASSIGN=146, LEFT_PAREN=147, RIGHT_PAREN=148, LEFT_BRACKET=149, 
		RIGHT_BRACKET=150, COMMA=151, COLON=152, SEMICOLON=153, DOT=154, RANGE=155, 
		HASH=156, CARET=157, PERCENT=158, UNDERSCORE=159, IDENTIFIER=160, PRAGMA=161, 
		LINE_COMMENT=162, SLASH_COMMENT=163, BRACE_COMMENT=164, WHITESPACE=165;
	public const int
		RULE_file = 0, RULE_pouDeclaration = 1, RULE_namespaceDeclaration = 2, 
		RULE_namespaceElements = 3, RULE_namespaceAccess = 4, RULE_namespaceName = 5, 
		RULE_usingDirective = 6, RULE_programDeclaration = 7, RULE_programName = 8, 
		RULE_programNameAccess = 9, RULE_dataTypeDeclaration = 10, RULE_typeDeclaration = 11, 
		RULE_simpleTypeDeclaration = 12, RULE_simpleTypeName = 13, RULE_simpleSpecificationInit = 14, 
		RULE_simpleSpecification = 15, RULE_elementaryTypeName = 16, RULE_simpleTypeAccess = 17, 
		RULE_stringTypeName = 18, RULE_stringSize = 19, RULE_subrangeTypeDeclaration = 20, 
		RULE_subrangeTypeName = 21, RULE_subrangeSpecificationInit = 22, RULE_subrangeValue = 23, 
		RULE_subrangeSpecification = 24, RULE_subrangeTypeAccess = 25, RULE_subrange = 26, 
		RULE_subrangeBegin = 27, RULE_subrangeEnd = 28, RULE_enumTypeDeclaration = 29, 
		RULE_enumTypeName = 30, RULE_enumNamedSpecificationInit = 31, RULE_enumValueSpecification = 32, 
		RULE_enumElementName = 33, RULE_enumElementValue = 34, RULE_enumValue = 35, 
		RULE_enumSpecificationInit = 36, RULE_enumTypeAccess = 37, RULE_arrayTypeDeclaration = 38, 
		RULE_arrayTypeName = 39, RULE_arraySpecificationInit = 40, RULE_arraySpecification = 41, 
		RULE_arrayTypeAccess = 42, RULE_arrayInit = 43, RULE_arrayElementInit = 44, 
		RULE_arrayElementMultiplier = 45, RULE_arrayElementInitValue = 46, RULE_structTypeDeclaration = 47, 
		RULE_structTypeName = 48, RULE_structSpecification = 49, RULE_structDeclaration = 50, 
		RULE_structElementDeclaration = 51, RULE_structElementName = 52, RULE_locatedAt = 53, 
		RULE_relativeAddress = 54, RULE_partlySpecifiedAddress = 55, RULE_multibitPartAccess = 56, 
		RULE_structSpecificationInit = 57, RULE_structTypeAccess = 58, RULE_structInit = 59, 
		RULE_structElementInit = 60, RULE_stringTypeDeclaration = 61, RULE_stringDerivedTypeName = 62, 
		RULE_stringTypeAccess = 63, RULE_referenceTypeDeclaration = 64, RULE_referenceTypeName = 65, 
		RULE_referenceSpecificationInit = 66, RULE_referenceSpecification = 67, 
		RULE_referenceValue = 68, RULE_referenceAddress = 69, RULE_referenceTypeAccess = 70, 
		RULE_referenceAssign = 71, RULE_referenceName = 72, RULE_dereference = 73, 
		RULE_fbTypeName = 74, RULE_fbTypeAccess = 75, RULE_fbDeclaration = 76, 
		RULE_fbIOVarDeclarations = 77, RULE_fbInputDeclarations = 78, RULE_fbInputDeclaration = 79, 
		RULE_fbOutputDeclarations = 80, RULE_fbOutputDeclaration = 81, RULE_otherVarDeclarations = 82, 
		RULE_nonRetainVarDeclarations = 83, RULE_fbBody = 84, RULE_methodDeclaration = 85, 
		RULE_methodName = 86, RULE_dataTypeAccess = 87, RULE_derivedTypeAccess = 88, 
		RULE_variable = 89, RULE_symbolicVariable = 90, RULE_varAccess = 91, RULE_varName = 92, 
		RULE_multiElementVar = 93, RULE_subscriptList = 94, RULE_subscript = 95, 
		RULE_structVariable = 96, RULE_structElementSelect = 97, RULE_inputDeclarations = 98, 
		RULE_inputDeclaration = 99, RULE_varDeclarationInit = 100, RULE_referenceVarDeclaration = 101, 
		RULE_interfaceVarDeclaration = 102, RULE_variableList = 103, RULE_variableName = 104, 
		RULE_arrayVarDeclarationInit = 105, RULE_arrayConformand = 106, RULE_arrayConformDeclaration = 107, 
		RULE_structVarDeclarationInit = 108, RULE_fbDeclarationNoInit = 109, RULE_fbDeclarationInit = 110, 
		RULE_fbName = 111, RULE_fbInstanceName = 112, RULE_outputDeclarations = 113, 
		RULE_outputDeclaration = 114, RULE_inOutDeclarations = 115, RULE_inOutVarDeclaration = 116, 
		RULE_varDeclaration = 117, RULE_arrayVarDeclaration = 118, RULE_structVarDeclaration = 119, 
		RULE_varDeclarations = 120, RULE_retainVarDeclarations = 121, RULE_locVarDeclarations = 122, 
		RULE_locVarDeclaration = 123, RULE_tempVarDeclarations = 124, RULE_externalVarDeclarations = 125, 
		RULE_externalDeclaration = 126, RULE_globalVarName = 127, RULE_globalVarDeclarations = 128, 
		RULE_globalVarDeclaration = 129, RULE_globalVarSpecification = 130, RULE_locVarSpecificationInit = 131, 
		RULE_strVarDeclaration = 132, RULE_sByteStrVarDecl = 133, RULE_sByteStrSpecification = 134, 
		RULE_dByteStrVarDeclaration = 135, RULE_dByteStrSpecification = 136, RULE_locPartlyVarDeclaration = 137, 
		RULE_locPartlyVar = 138, RULE_varSpecification = 139, RULE_functionDeclaration = 140, 
		RULE_ioVarDeclarations = 141, RULE_functionVarDeclarations = 142, RULE_functionBody = 143, 
		RULE_classDeclaration = 144, RULE_classTypeName = 145, RULE_classTypeAccess = 146, 
		RULE_className = 147, RULE_classInstanceName = 148, RULE_accessSpecification = 149, 
		RULE_interfaceDeclaration = 150, RULE_interfaceName = 151, RULE_interfaceTypeList = 152, 
		RULE_interfaceTypeAccess = 153, RULE_methodPrototype = 154, RULE_interfaceSpecificationInit = 155, 
		RULE_interfaceValue = 156, RULE_statementList = 157, RULE_statement = 158, 
		RULE_assignStatement = 159, RULE_assignmentAttempt = 160, RULE_subprogControlStatement = 161, 
		RULE_functionCall = 162, RULE_functionAccess = 163, RULE_functionName = 164, 
		RULE_invocation = 165, RULE_parameterAssign = 166, RULE_selectionStatement = 167, 
		RULE_ifStatement = 168, RULE_caseStatement = 169, RULE_caseSelection = 170, 
		RULE_caseList = 171, RULE_caseListElement = 172, RULE_loopStatement = 173, 
		RULE_forStatement = 174, RULE_controlVariable = 175, RULE_forRange = 176, 
		RULE_whileStatement = 177, RULE_repeatStatement = 178, RULE_expression = 179, 
		RULE_exitStatement = 180, RULE_continueStatement = 181, RULE_variableAccess = 182, 
		RULE_literalValue = 183, RULE_intLiteral = 184, RULE_intLiteralValue = 185, 
		RULE_intTypeName = 186, RULE_multibitsLiteral = 187, RULE_multibitsLiteralValue = 188, 
		RULE_multibitsTypeName = 189, RULE_realLiteral = 190, RULE_realLiteralValue = 191, 
		RULE_realTypeName = 192, RULE_boolLiteral = 193, RULE_boolLiteralValue = 194, 
		RULE_boolTypeName = 195, RULE_charLiteral = 196, RULE_charString = 197, 
		RULE_charStringTypeName = 198, RULE_timeLiteral = 199, RULE_durationLiteral = 200, 
		RULE_durationLiteralValue = 201, RULE_durationTypeName = 202, RULE_timeOfDayLiteral = 203, 
		RULE_timeOfDayLiteralValue = 204, RULE_timeOfDayTypeName = 205, RULE_dateLiteral = 206, 
		RULE_dateLiteralValue = 207, RULE_dateTypeName = 208, RULE_dateAndTimeLiteral = 209, 
		RULE_dateAndTimeLiteralValue = 210, RULE_dateAndTimeTypeName = 211, RULE_directVariable = 212;
	public static readonly string[] ruleNames = {
		"file", "pouDeclaration", "namespaceDeclaration", "namespaceElements", 
		"namespaceAccess", "namespaceName", "usingDirective", "programDeclaration", 
		"programName", "programNameAccess", "dataTypeDeclaration", "typeDeclaration", 
		"simpleTypeDeclaration", "simpleTypeName", "simpleSpecificationInit", 
		"simpleSpecification", "elementaryTypeName", "simpleTypeAccess", "stringTypeName", 
		"stringSize", "subrangeTypeDeclaration", "subrangeTypeName", "subrangeSpecificationInit", 
		"subrangeValue", "subrangeSpecification", "subrangeTypeAccess", "subrange", 
		"subrangeBegin", "subrangeEnd", "enumTypeDeclaration", "enumTypeName", 
		"enumNamedSpecificationInit", "enumValueSpecification", "enumElementName", 
		"enumElementValue", "enumValue", "enumSpecificationInit", "enumTypeAccess", 
		"arrayTypeDeclaration", "arrayTypeName", "arraySpecificationInit", "arraySpecification", 
		"arrayTypeAccess", "arrayInit", "arrayElementInit", "arrayElementMultiplier", 
		"arrayElementInitValue", "structTypeDeclaration", "structTypeName", "structSpecification", 
		"structDeclaration", "structElementDeclaration", "structElementName", 
		"locatedAt", "relativeAddress", "partlySpecifiedAddress", "multibitPartAccess", 
		"structSpecificationInit", "structTypeAccess", "structInit", "structElementInit", 
		"stringTypeDeclaration", "stringDerivedTypeName", "stringTypeAccess", 
		"referenceTypeDeclaration", "referenceTypeName", "referenceSpecificationInit", 
		"referenceSpecification", "referenceValue", "referenceAddress", "referenceTypeAccess", 
		"referenceAssign", "referenceName", "dereference", "fbTypeName", "fbTypeAccess", 
		"fbDeclaration", "fbIOVarDeclarations", "fbInputDeclarations", "fbInputDeclaration", 
		"fbOutputDeclarations", "fbOutputDeclaration", "otherVarDeclarations", 
		"nonRetainVarDeclarations", "fbBody", "methodDeclaration", "methodName", 
		"dataTypeAccess", "derivedTypeAccess", "variable", "symbolicVariable", 
		"varAccess", "varName", "multiElementVar", "subscriptList", "subscript", 
		"structVariable", "structElementSelect", "inputDeclarations", "inputDeclaration", 
		"varDeclarationInit", "referenceVarDeclaration", "interfaceVarDeclaration", 
		"variableList", "variableName", "arrayVarDeclarationInit", "arrayConformand", 
		"arrayConformDeclaration", "structVarDeclarationInit", "fbDeclarationNoInit", 
		"fbDeclarationInit", "fbName", "fbInstanceName", "outputDeclarations", 
		"outputDeclaration", "inOutDeclarations", "inOutVarDeclaration", "varDeclaration", 
		"arrayVarDeclaration", "structVarDeclaration", "varDeclarations", "retainVarDeclarations", 
		"locVarDeclarations", "locVarDeclaration", "tempVarDeclarations", "externalVarDeclarations", 
		"externalDeclaration", "globalVarName", "globalVarDeclarations", "globalVarDeclaration", 
		"globalVarSpecification", "locVarSpecificationInit", "strVarDeclaration", 
		"sByteStrVarDecl", "sByteStrSpecification", "dByteStrVarDeclaration", 
		"dByteStrSpecification", "locPartlyVarDeclaration", "locPartlyVar", "varSpecification", 
		"functionDeclaration", "ioVarDeclarations", "functionVarDeclarations", 
		"functionBody", "classDeclaration", "classTypeName", "classTypeAccess", 
		"className", "classInstanceName", "accessSpecification", "interfaceDeclaration", 
		"interfaceName", "interfaceTypeList", "interfaceTypeAccess", "methodPrototype", 
		"interfaceSpecificationInit", "interfaceValue", "statementList", "statement", 
		"assignStatement", "assignmentAttempt", "subprogControlStatement", "functionCall", 
		"functionAccess", "functionName", "invocation", "parameterAssign", "selectionStatement", 
		"ifStatement", "caseStatement", "caseSelection", "caseList", "caseListElement", 
		"loopStatement", "forStatement", "controlVariable", "forRange", "whileStatement", 
		"repeatStatement", "expression", "exitStatement", "continueStatement", 
		"variableAccess", "literalValue", "intLiteral", "intLiteralValue", "intTypeName", 
		"multibitsLiteral", "multibitsLiteralValue", "multibitsTypeName", "realLiteral", 
		"realLiteralValue", "realTypeName", "boolLiteral", "boolLiteralValue", 
		"boolTypeName", "charLiteral", "charString", "charStringTypeName", "timeLiteral", 
		"durationLiteral", "durationLiteralValue", "durationTypeName", "timeOfDayLiteral", 
		"timeOfDayLiteralValue", "timeOfDayTypeName", "dateLiteral", "dateLiteralValue", 
		"dateTypeName", "dateAndTimeLiteral", "dateAndTimeLiteralValue", "dateAndTimeTypeName", 
		"directVariable"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'USINT'", "'UINT'", "'UDINT'", "'ULINT'", "'SINT'", 
		"'INT'", "'DINT'", "'LINT'", "'REAL'", "'LREAL'", "'BYTE'", "'WORD'", 
		"'DWORD'", "'LWORD'", "'BOOL'", "'FALSE'", "'TRUE'", "'STRING'", "'WSTRING'", 
		"'CHAR'", "'WCHAR'", null, null, null, null, null, null, null, null, "'TYPE'", 
		"'END_TYPE'", "'ARRAY'", "'OF'", "'STRUCT'", "'OVERLAP'", "'END_STRUCT'", 
		"'AT'", "'REF_TO'", "'REF'", "'NULL'", "'THIS'", "'VAR_INPUT'", "'VAR_OUTPUT'", 
		"'VAR_IN_OUT'", "'RETAIN'", "'NON_RETAIN'", "'END_VAR'", "'VAR'", "'CONSTANT'", 
		"'VAR_TEMP'", "'VAR_EXTERNAL'", "'VAR_GLOBAL'", "'FUNCTION'", "'END_FUNCTION'", 
		"'FUNCTION_BLOCK'", "'FINAL'", "'ABSTRACT'", "'EXTENDS'", "'IMPLEMENTS'", 
		"'END_FUNCTION_BLOCK'", "'METHOD'", "'OVERRIDE'", "'END_METHOD'", "'CLASS'", 
		"'END_CLASS'", "'INTERFACE'", "'END_INTERFACE'", "'PUBLIC'", "'PROTECTED'", 
		"'PRIVATE'", "'INTERAL'", "'SUPER'", "'RETURN'", "'PROGRAM'", "'END_PROGRAM'", 
		"'VAR_ACCESS'", "'CONFIGURATION'", "'END_CONFIGURATION'", "'RESOURCE'", 
		"'ON'", "'END_RESOURCE'", "'READ_WRITE'", "'READ_ONLY'", "'TASK'", "'SINGLE'", 
		"'INTERVAL'", "'PRIORITY'", "'WITH'", "'VAR_CONFIG'", "'NAMESPACE'", "'END_NAMESPACE'", 
		"'USING'", "'IF'", "'THEN'", "'ELSIF'", "'ELSE'", "'END_IF'", "'CASE'", 
		"'END_CASE'", "'EXIT'", "'CONTINUE'", "'FOR'", "'TO'", "'BY'", "'DO'", 
		"'END_FOR'", "'WHILE'", "'END_WHILE'", "'REPEAT'", "'UNTIL'", "'END_REPEAT'", 
		"'+'", "'-'", "'*'", "'**'", "'/'", "'MOD'", "'='", "'<>'", "'<'", "'<='", 
		"'>'", "'>='", "'AND'", "'OR'", "'NOT'", "'XOR'", "'&'", "':='", "'=>'", 
		"'?='", "'('", "')'", "'['", "']'", "','", "':'", "';'", "'.'", "'..'", 
		"'#'", "'^'", "'%'", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RELATIVE_ADDRESS", "DIRECT_VARIABLE", "SINGLE_BYTE_STRING", "DOUBLE_BYTE_STRING", 
		"DURATION", "DATE_TIME_VALUE", "DATE_VALUE", "CLOCK_TIME", "REAL_VALUE", 
		"SIGNED_INT", "UNSIGNED_INT", "BINARY_INT", "OCTAL_INT", "HEX_INT", "BOOLEAN", 
		"USINT", "UINT", "UDINT", "ULINT", "SINT", "INT", "DINT", "LINT", "REAL", 
		"LREAL", "BYTE", "WORD", "DWORD", "LWORD", "BOOL", "FALSE", "TRUE", "STRING", 
		"WSTRING", "CHAR", "WCHAR", "TIME", "LTIME", "TIME_OF_DAY", "LTIME_OF_DAY", 
		"DATE", "LDATE", "DATE_AND_TIME", "LDATE_AND_TIME", "TYPE", "END_TYPE", 
		"ARRAY", "OF", "STRUCT", "OVERLAP", "END_STRUCT", "AT", "REF_TO", "REF", 
		"NULL", "THIS", "VAR_INPUT", "VAR_OUTPUT", "VAR_IN_OUT", "RETAIN", "NON_RETAIN", 
		"END_VAR", "VAR", "CONSTANT", "VAR_TEMP", "VAR_EXTERNAL", "VAR_GLOBAL", 
		"FUNCTION", "END_FUNCTION", "FUNCTION_BLOCK", "FINAL", "ABSTRACT", "EXTENDS", 
		"IMPLEMENTS", "END_FUNCTION_BLOCK", "METHOD", "OVERRIDE", "END_METHOD", 
		"CLASS", "END_CLASS", "INTERFACE", "END_INTERFACE", "PUBLIC", "PROTECTED", 
		"PRIVATE", "INTERNAL", "SUPER", "RETURN", "PROGRAM", "END_PROGRAM", "VAR_ACCESS", 
		"CONFIGURATION", "END_CONFIGURATION", "RESOURCE", "ON", "END_RESOURCE", 
		"READ_WRITE", "READ_ONLY", "TASK", "SINGLE", "INTERVAL", "PRIORITY", "WITH", 
		"VAR_CONFIG", "NAMESPACE", "END_NAMESPACE", "USING", "IF", "THEN", "ELSIF", 
		"ELSE", "END_IF", "CASE", "END_CASE", "EXIT", "CONTINUE", "FOR", "TO", 
		"BY", "DO", "END_FOR", "WHILE", "END_WHILE", "REPEAT", "UNTIL", "END_REPEAT", 
		"PLUS", "MINUS", "ASTERISK", "POWER", "SLASH", "MOD", "EQUAL", "NOT_EQUAL", 
		"LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", "AND", "OR", "NOT", 
		"XOR", "AMPERSAND", "ASSIGN", "ASSIGN_OUT", "ATTEMPT_ASSIGN", "LEFT_PAREN", 
		"RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA", "COLON", "SEMICOLON", 
		"DOT", "RANGE", "HASH", "CARET", "PERCENT", "UNDERSCORE", "IDENTIFIER", 
		"PRAGMA", "LINE_COMMENT", "SLASH_COMMENT", "BRACE_COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "st.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static stParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public stParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public stParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PouDeclarationContext[] pouDeclaration() {
			return GetRuleContexts<PouDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PouDeclarationContext pouDeclaration(int i) {
			return GetRuleContext<PouDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext[] globalVarDeclarations() {
			return GetRuleContexts<GlobalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext globalVarDeclarations(int i) {
			return GetRuleContext<GlobalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext[] dataTypeDeclaration() {
			return GetRuleContexts<DataTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext dataTypeDeclaration(int i) {
			return GetRuleContext<DataTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext[] interfaceDeclaration() {
			return GetRuleContexts<InterfaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration(int i) {
			return GetRuleContext<InterfaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 440;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 426;
					pouDeclaration();
					}
					break;
				case 2:
					{
					State = 430;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==USING) {
						{
						{
						State = 427;
						usingDirective();
						}
						}
						State = 432;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 438;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NAMESPACE:
						{
						State = 433;
						namespaceDeclaration();
						}
						break;
					case VAR_GLOBAL:
						{
						State = 434;
						globalVarDeclarations();
						}
						break;
					case TYPE:
						{
						State = 435;
						dataTypeDeclaration();
						}
						break;
					case CLASS:
						{
						State = 436;
						classDeclaration();
						}
						break;
					case INTERFACE:
						{
						State = 437;
						interfaceDeclaration();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 5764625201165762561L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PouDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationContext fbDeclaration() {
			return GetRuleContext<FbDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramDeclarationContext programDeclaration() {
			return GetRuleContext<ProgramDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public PouDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pouDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPouDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PouDeclarationContext pouDeclaration() {
		PouDeclarationContext _localctx = new PouDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_pouDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 444;
				usingDirective();
				}
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNCTION:
				{
				State = 450;
				functionDeclaration();
				}
				break;
			case FUNCTION_BLOCK:
				{
				State = 451;
				fbDeclaration();
				}
				break;
			case PROGRAM:
				{
				State = 452;
				programDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(stParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext namespaceAccess() {
			return GetRuleContext<NamespaceAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceElementsContext namespaceElements() {
			return GetRuleContext<NamespaceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_NAMESPACE() { return GetToken(stParser.END_NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(stParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			Match(NAMESPACE);
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERNAL) {
				{
				State = 456;
				Match(INTERNAL);
				}
			}

			State = 459;
			namespaceAccess();
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 460;
				usingDirective();
				}
				}
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 466;
			namespaceElements();
			State = 467;
			Match(END_NAMESPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext[] dataTypeDeclaration() {
			return GetRuleContexts<DataTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext dataTypeDeclaration(int i) {
			return GetRuleContext<DataTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationContext[] fbDeclaration() {
			return GetRuleContexts<FbDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationContext fbDeclaration(int i) {
			return GetRuleContext<FbDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext[] interfaceDeclaration() {
			return GetRuleContexts<InterfaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration(int i) {
			return GetRuleContext<InterfaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public NamespaceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceElementsContext namespaceElements() {
		NamespaceElementsContext _localctx = new NamespaceElementsContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 475;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TYPE:
					{
					State = 469;
					dataTypeDeclaration();
					}
					break;
				case FUNCTION:
					{
					State = 470;
					functionDeclaration();
					}
					break;
				case FUNCTION_BLOCK:
					{
					State = 471;
					fbDeclaration();
					}
					break;
				case CLASS:
					{
					State = 472;
					classDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 473;
					interfaceDeclaration();
					}
					break;
				case NAMESPACE:
					{
					State = 474;
					namespaceDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 1152921590548135937L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public NamespaceAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceAccessContext namespaceAccess() {
		NamespaceAccessContext _localctx = new NamespaceAccessContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespaceAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			namespaceName();
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 480;
				Match(DOT);
				State = 481;
				namespaceName();
				}
				}
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(stParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext[] namespaceAccess() {
			return GetRuleContexts<NamespaceAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext namespaceAccess(int i) {
			return GetRuleContext<NamespaceAccessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(stParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(USING);
			State = 490;
			namespaceAccess();
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 491;
				Match(COMMA);
				State = 492;
				namespaceAccess();
				}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 498;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(stParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramNameContext programName() {
			return GetRuleContext<ProgramNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_PROGRAM() { return GetToken(stParser.END_PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext[] functionVarDeclarations() {
			return GetRuleContexts<FunctionVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext functionVarDeclarations(int i) {
			return GetRuleContext<FunctionVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationsContext[] locVarDeclarations() {
			return GetRuleContexts<LocVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationsContext locVarDeclarations(int i) {
			return GetRuleContext<LocVarDeclarationsContext>(i);
		}
		public ProgramDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramDeclarationContext programDeclaration() {
		ProgramDeclarationContext _localctx = new ProgramDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_programDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			Match(PROGRAM);
			State = 501;
			programName();
			State = 509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 839L) != 0)) {
				{
				State = 507;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 502;
					ioVarDeclarations();
					}
					break;
				case 2:
					{
					State = 503;
					functionVarDeclarations();
					}
					break;
				case 3:
					{
					State = 504;
					tempVarDeclarations();
					}
					break;
				case 4:
					{
					State = 505;
					otherVarDeclarations();
					}
					break;
				case 5:
					{
					State = 506;
					locVarDeclarations();
					}
					break;
				}
				}
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 512;
			statementList();
			State = 513;
			Match(END_PROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ProgramNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramNameContext programName() {
		ProgramNameContext _localctx = new ProgramNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_programName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramNameAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramNameContext programName() {
			return GetRuleContext<ProgramNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ProgramNameAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programNameAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramNameAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramNameAccessContext programNameAccess() {
		ProgramNameAccessContext _localctx = new ProgramNameAccessContext(Context, State);
		EnterRule(_localctx, 18, RULE_programNameAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 517;
					namespaceName();
					State = 518;
					Match(DOT);
					}
					} 
				}
				State = 524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 525;
			programName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(stParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_TYPE() { return GetToken(stParser.END_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public DataTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeDeclarationContext dataTypeDeclaration() {
		DataTypeDeclarationContext _localctx = new DataTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_dataTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(TYPE);
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 528;
				typeDeclaration();
				State = 529;
				Match(SEMICOLON);
				}
				}
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 535;
			Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeDeclarationContext simpleTypeDeclaration() {
			return GetRuleContext<SimpleTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeDeclarationContext subrangeTypeDeclaration() {
			return GetRuleContext<SubrangeTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeDeclarationContext enumTypeDeclaration() {
			return GetRuleContext<EnumTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeDeclarationContext arrayTypeDeclaration() {
			return GetRuleContext<ArrayTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeDeclarationContext structTypeDeclaration() {
			return GetRuleContext<StructTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeDeclarationContext stringTypeDeclaration() {
			return GetRuleContext<StringTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeDeclarationContext referenceTypeDeclaration() {
			return GetRuleContext<ReferenceTypeDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeDeclaration);
		try {
			State = 544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537;
				simpleTypeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 538;
				subrangeTypeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 539;
				enumTypeDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 540;
				arrayTypeDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 541;
				structTypeDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 542;
				stringTypeDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 543;
				referenceTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		public SimpleTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeDeclarationContext simpleTypeDeclaration() {
		SimpleTypeDeclarationContext _localctx = new SimpleTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_simpleTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			simpleTypeName();
			State = 547;
			Match(COLON);
			State = 548;
			simpleSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSpecificationInitContext simpleSpecificationInit() {
		SimpleSpecificationInitContext _localctx = new SimpleSpecificationInitContext(Context, State);
		EnterRule(_localctx, 28, RULE_simpleSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			simpleSpecification();
			State = 555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 553;
				Match(ASSIGN);
				State = 554;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeAccessContext simpleTypeAccess() {
			return GetRuleContext<SimpleTypeAccessContext>(0);
		}
		public SimpleSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSpecificationContext simpleSpecification() {
		SimpleSpecificationContext _localctx = new SimpleSpecificationContext(Context, State);
		EnterRule(_localctx, 30, RULE_simpleSpecification);
		try {
			State = 559;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
			case REAL:
			case LREAL:
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
			case BOOL:
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
			case TIME:
			case LTIME:
			case DATE:
			case LDATE:
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557;
				elementaryTypeName();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 558;
				simpleTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementaryTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeNameContext realTypeName() {
			return GetRuleContext<RealTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTypeNameContext boolTypeName() {
			return GetRuleContext<BoolTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsTypeNameContext multibitsTypeName() {
			return GetRuleContext<MultibitsTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext stringTypeName() {
			return GetRuleContext<StringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTypeNameContext dateTypeName() {
			return GetRuleContext<DateTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeTypeNameContext dateAndTimeTypeName() {
			return GetRuleContext<DateAndTimeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationTypeNameContext durationTypeName() {
			return GetRuleContext<DurationTypeNameContext>(0);
		}
		public ElementaryTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementaryTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementaryTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementaryTypeNameContext elementaryTypeName() {
		ElementaryTypeNameContext _localctx = new ElementaryTypeNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_elementaryTypeName);
		try {
			State = 569;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561;
				intTypeName();
				}
				break;
			case REAL:
			case LREAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 562;
				realTypeName();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 563;
				boolTypeName();
				}
				break;
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 564;
				multibitsTypeName();
				}
				break;
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 565;
				stringTypeName();
				}
				break;
			case DATE:
			case LDATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 566;
				dateTypeName();
				}
				break;
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 567;
				dateAndTimeTypeName();
				}
				break;
			case TIME:
			case LTIME:
				EnterOuterAlt(_localctx, 8);
				{
				State = 568;
				durationTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public SimpleTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeAccessContext simpleTypeAccess() {
		SimpleTypeAccessContext _localctx = new SimpleTypeAccessContext(Context, State);
		EnterRule(_localctx, 34, RULE_simpleTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 571;
					namespaceName();
					State = 572;
					Match(DOT);
					}
					} 
				}
				State = 578;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 579;
			simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringSizeContext stringSize() {
			return GetRuleContext<StringSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(stParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WCHAR() { return GetToken(stParser.WCHAR, 0); }
		public StringTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeNameContext stringTypeName() {
		StringTypeNameContext _localctx = new StringTypeNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_stringTypeName);
		int _la;
		try {
			State = 590;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case WSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 581;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==WSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 582;
					Match(LEFT_BRACKET);
					State = 583;
					stringSize();
					State = 584;
					Match(RIGHT_BRACKET);
					}
				}

				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588;
				Match(CHAR);
				}
				break;
			case WCHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 589;
				Match(WCHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public StringSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringSizeContext stringSize() {
		StringSizeContext _localctx = new StringSizeContext(Context, State);
		EnterRule(_localctx, 38, RULE_stringSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(UNSIGNED_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeNameContext subrangeTypeName() {
			return GetRuleContext<SubrangeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationInitContext subrangeSpecificationInit() {
			return GetRuleContext<SubrangeSpecificationInitContext>(0);
		}
		public SubrangeTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeDeclarationContext subrangeTypeDeclaration() {
		SubrangeTypeDeclarationContext _localctx = new SubrangeTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_subrangeTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			subrangeTypeName();
			State = 595;
			Match(COLON);
			State = 596;
			subrangeSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public SubrangeTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeNameContext subrangeTypeName() {
		SubrangeTypeNameContext _localctx = new SubrangeTypeNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_subrangeTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationContext subrangeSpecification() {
			return GetRuleContext<SubrangeSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeValueContext subrangeValue() {
			return GetRuleContext<SubrangeValueContext>(0);
		}
		public SubrangeSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeSpecificationInitContext subrangeSpecificationInit() {
		SubrangeSpecificationInitContext _localctx = new SubrangeSpecificationInitContext(Context, State);
		EnterRule(_localctx, 44, RULE_subrangeSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			subrangeSpecification();
			State = 603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 601;
				Match(ASSIGN);
				State = 602;
				subrangeValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_INT() { return GetToken(stParser.SIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public SubrangeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeValueContext subrangeValue() {
		SubrangeValueContext _localctx = new SubrangeValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_subrangeValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			_la = TokenStream.LA(1);
			if ( !(_la==SIGNED_INT || _la==UNSIGNED_INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeAccessContext subrangeTypeAccess() {
			return GetRuleContext<SubrangeTypeAccessContext>(0);
		}
		public SubrangeSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeSpecificationContext subrangeSpecification() {
		SubrangeSpecificationContext _localctx = new SubrangeSpecificationContext(Context, State);
		EnterRule(_localctx, 48, RULE_subrangeSpecification);
		try {
			State = 613;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 607;
				intTypeName();
				State = 608;
				Match(LEFT_PAREN);
				State = 609;
				subrange();
				State = 610;
				Match(RIGHT_PAREN);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 612;
				subrangeTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeNameContext subrangeTypeName() {
			return GetRuleContext<SubrangeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public SubrangeTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeAccessContext subrangeTypeAccess() {
		SubrangeTypeAccessContext _localctx = new SubrangeTypeAccessContext(Context, State);
		EnterRule(_localctx, 50, RULE_subrangeTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 615;
					namespaceName();
					State = 616;
					Match(DOT);
					}
					} 
				}
				State = 622;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 623;
			subrangeTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeBeginContext subrangeBegin() {
			return GetRuleContext<SubrangeBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(stParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeEndContext subrangeEnd() {
			return GetRuleContext<SubrangeEndContext>(0);
		}
		public SubrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeContext subrange() {
		SubrangeContext _localctx = new SubrangeContext(Context, State);
		EnterRule(_localctx, 52, RULE_subrange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			subrangeBegin();
			State = 626;
			Match(RANGE);
			State = 627;
			subrangeEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubrangeBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeBeginContext subrangeBegin() {
		SubrangeBeginContext _localctx = new SubrangeBeginContext(Context, State);
		EnterRule(_localctx, 54, RULE_subrangeBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubrangeEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeEndContext subrangeEnd() {
		SubrangeEndContext _localctx = new SubrangeEndContext(Context, State);
		EnterRule(_localctx, 56, RULE_subrangeEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumNamedSpecificationInitContext enumNamedSpecificationInit() {
			return GetRuleContext<EnumNamedSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecificationInitContext enumSpecificationInit() {
			return GetRuleContext<EnumSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		public EnumTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeDeclarationContext enumTypeDeclaration() {
		EnumTypeDeclarationContext _localctx = new EnumTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_enumTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			enumTypeName();
			State = 634;
			Match(COLON);
			State = 640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33528662130688L) != 0)) {
					{
					State = 635;
					elementaryTypeName();
					}
				}

				State = 638;
				enumNamedSpecificationInit();
				}
				break;
			case 2:
				{
				State = 639;
				enumSpecificationInit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public EnumTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeNameContext enumTypeName() {
		EnumTypeNameContext _localctx = new EnumTypeNameContext(Context, State);
		EnterRule(_localctx, 60, RULE_enumTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNamedSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueSpecificationContext[] enumValueSpecification() {
			return GetRuleContexts<EnumValueSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueSpecificationContext enumValueSpecification(int i) {
			return GetRuleContext<EnumValueSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public EnumNamedSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumNamedSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumNamedSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNamedSpecificationInitContext enumNamedSpecificationInit() {
		EnumNamedSpecificationInitContext _localctx = new EnumNamedSpecificationInitContext(Context, State);
		EnterRule(_localctx, 62, RULE_enumNamedSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			Match(LEFT_PAREN);
			State = 645;
			enumValueSpecification();
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 646;
				Match(COMMA);
				State = 647;
				enumValueSpecification();
				}
				}
				State = 652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 653;
			Match(RIGHT_PAREN);
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 654;
				Match(ASSIGN);
				State = 655;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementValueContext enumElementValue() {
			return GetRuleContext<EnumElementValueContext>(0);
		}
		public EnumValueSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueSpecificationContext enumValueSpecification() {
		EnumValueSpecificationContext _localctx = new EnumValueSpecificationContext(Context, State);
		EnterRule(_localctx, 64, RULE_enumValueSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			enumElementName();
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 659;
				Match(ASSIGN);
				State = 660;
				enumElementValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public EnumElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementNameContext enumElementName() {
		EnumElementNameContext _localctx = new EnumElementNameContext(Context, State);
		EnterRule(_localctx, 66, RULE_enumElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementValueContext enumElementValue() {
		EnumElementValueContext _localctx = new EnumElementValueContext(Context, State);
		EnterRule(_localctx, 68, RULE_enumElementValue);
		try {
			State = 667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 665;
				intLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 666;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 70, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 669;
				enumTypeName();
				State = 670;
				Match(HASH);
				}
				break;
			}
			State = 674;
			enumElementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext[] enumElementName() {
			return GetRuleContexts<EnumElementNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName(int i) {
			return GetRuleContext<EnumElementNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeAccessContext enumTypeAccess() {
			return GetRuleContext<EnumTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public EnumSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecificationInitContext enumSpecificationInit() {
		EnumSpecificationInitContext _localctx = new EnumSpecificationInitContext(Context, State);
		EnterRule(_localctx, 72, RULE_enumSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				State = 676;
				Match(LEFT_PAREN);
				State = 677;
				enumElementName();
				State = 682;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 678;
					Match(COMMA);
					State = 679;
					enumElementName();
					}
					}
					State = 684;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 685;
				Match(RIGHT_PAREN);
				}
				break;
			case IDENTIFIER:
				{
				State = 687;
				enumTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 690;
				Match(ASSIGN);
				State = 691;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public EnumTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeAccessContext enumTypeAccess() {
		EnumTypeAccessContext _localctx = new EnumTypeAccessContext(Context, State);
		EnterRule(_localctx, 74, RULE_enumTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 694;
					namespaceName();
					State = 695;
					Match(DOT);
					}
					} 
				}
				State = 701;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 702;
			enumTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeNameContext arrayTypeName() {
			return GetRuleContext<ArrayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		public ArrayTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeDeclarationContext arrayTypeDeclaration() {
		ArrayTypeDeclarationContext _localctx = new ArrayTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_arrayTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			arrayTypeName();
			State = 705;
			Match(COLON);
			State = 706;
			arraySpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ArrayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeNameContext arrayTypeName() {
		ArrayTypeNameContext _localctx = new ArrayTypeNameContext(Context, State);
		EnterRule(_localctx, 78, RULE_arrayTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArraySpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySpecificationInitContext arraySpecificationInit() {
		ArraySpecificationInitContext _localctx = new ArraySpecificationInitContext(Context, State);
		EnterRule(_localctx, 80, RULE_arraySpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			arraySpecification();
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 711;
				Match(ASSIGN);
				State = 712;
				arrayInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeAccessContext arrayTypeAccess() {
			return GetRuleContext<ArrayTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(stParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext[] subrange() {
			return GetRuleContexts<SubrangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange(int i) {
			return GetRuleContext<SubrangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArraySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySpecificationContext arraySpecification() {
		ArraySpecificationContext _localctx = new ArraySpecificationContext(Context, State);
		EnterRule(_localctx, 82, RULE_arraySpecification);
		int _la;
		try {
			State = 730;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 715;
				arrayTypeAccess();
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 716;
				Match(ARRAY);
				State = 717;
				Match(LEFT_BRACKET);
				State = 718;
				subrange();
				State = 723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 719;
					Match(COMMA);
					State = 720;
					subrange();
					}
					}
					State = 725;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 726;
				Match(RIGHT_BRACKET);
				State = 727;
				Match(OF);
				State = 728;
				dataTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeNameContext arrayTypeName() {
			return GetRuleContext<ArrayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ArrayTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeAccessContext arrayTypeAccess() {
		ArrayTypeAccessContext _localctx = new ArrayTypeAccessContext(Context, State);
		EnterRule(_localctx, 84, RULE_arrayTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 732;
					namespaceName();
					State = 733;
					Match(DOT);
					}
					} 
				}
				State = 739;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 740;
			arrayTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitContext[] arrayElementInit() {
			return GetRuleContexts<ArrayElementInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitContext arrayElementInit(int i) {
			return GetRuleContext<ArrayElementInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArrayInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitContext arrayInit() {
		ArrayInitContext _localctx = new ArrayInitContext(Context, State);
		EnterRule(_localctx, 86, RULE_arrayInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			Match(LEFT_BRACKET);
			State = 743;
			arrayElementInit();
			State = 748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 744;
				Match(COMMA);
				State = 745;
				arrayElementInit();
				}
				}
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 751;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitValueContext arrayElementInitValue() {
			return GetRuleContext<ArrayElementInitValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementMultiplierContext arrayElementMultiplier() {
			return GetRuleContext<ArrayElementMultiplierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		public ArrayElementInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementInitContext arrayElementInit() {
		ArrayElementInitContext _localctx = new ArrayElementInitContext(Context, State);
		EnterRule(_localctx, 88, RULE_arrayElementInit);
		int _la;
		try {
			State = 761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 753;
				arrayElementInitValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 754;
				arrayElementMultiplier();
				State = 755;
				Match(LEFT_PAREN);
				State = 757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 126135967496011292L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 8595193859L) != 0)) {
					{
					State = 756;
					arrayElementInitValue();
					}
				}

				State = 759;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementMultiplierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public ArrayElementMultiplierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementMultiplier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementMultiplier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementMultiplierContext arrayElementMultiplier() {
		ArrayElementMultiplierContext _localctx = new ArrayElementMultiplierContext(Context, State);
		EnterRule(_localctx, 90, RULE_arrayElementMultiplier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			Match(UNSIGNED_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementInitValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArrayElementInitValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementInitValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementInitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementInitValueContext arrayElementInitValue() {
		ArrayElementInitValueContext _localctx = new ArrayElementInitValueContext(Context, State);
		EnterRule(_localctx, 92, RULE_arrayElementInitValue);
		try {
			State = 769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 765;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 766;
				enumValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 767;
				structInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 768;
				arrayInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationContext structSpecification() {
			return GetRuleContext<StructSpecificationContext>(0);
		}
		public StructTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeDeclarationContext structTypeDeclaration() {
		StructTypeDeclarationContext _localctx = new StructTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 94, RULE_structTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			structTypeName();
			State = 772;
			Match(COLON);
			State = 773;
			structSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StructTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeNameContext structTypeName() {
		StructTypeNameContext _localctx = new StructTypeNameContext(Context, State);
		EnterRule(_localctx, 96, RULE_structTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		public StructSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecificationContext structSpecification() {
		StructSpecificationContext _localctx = new StructSpecificationContext(Context, State);
		EnterRule(_localctx, 98, RULE_structSpecification);
		try {
			State = 779;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRUCT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 777;
				structDeclaration();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 778;
				structSpecificationInit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(stParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_STRUCT() { return GetToken(stParser.END_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAP() { return GetToken(stParser.OVERLAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementDeclarationContext[] structElementDeclaration() {
			return GetRuleContexts<StructElementDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementDeclarationContext structElementDeclaration(int i) {
			return GetRuleContext<StructElementDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 100, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			Match(STRUCT);
			State = 783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERLAP) {
				{
				State = 782;
				Match(OVERLAP);
				}
			}

			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 785;
				structElementDeclaration();
				State = 786;
				Match(SEMICOLON);
				}
				}
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 792;
			Match(END_STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructElementNameContext structElementName() {
			return GetRuleContext<StructElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationInitContext subrangeSpecificationInit() {
			return GetRuleContext<SubrangeSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecificationInitContext enumSpecificationInit() {
			return GetRuleContext<EnumSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitPartAccessContext multibitPartAccess() {
			return GetRuleContext<MultibitPartAccessContext>(0);
		}
		public StructElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementDeclarationContext structElementDeclaration() {
		StructElementDeclarationContext _localctx = new StructElementDeclarationContext(Context, State);
		EnterRule(_localctx, 102, RULE_structElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			structElementName();
			State = 799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 795;
				locatedAt();
				State = 797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 796;
					multibitPartAccess();
					}
				}

				}
			}

			State = 801;
			Match(COLON);
			State = 807;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 802;
				simpleSpecificationInit();
				}
				break;
			case 2:
				{
				State = 803;
				subrangeSpecificationInit();
				}
				break;
			case 3:
				{
				State = 804;
				enumSpecificationInit();
				}
				break;
			case 4:
				{
				State = 805;
				arraySpecificationInit();
				}
				break;
			case 5:
				{
				State = 806;
				structSpecificationInit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StructElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementNameContext structElementName() {
		StructElementNameContext _localctx = new StructElementNameContext(Context, State);
		EnterRule(_localctx, 104, RULE_structElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedAtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(stParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelativeAddressContext relativeAddress() {
			return GetRuleContext<RelativeAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartlySpecifiedAddressContext partlySpecifiedAddress() {
			return GetRuleContext<PartlySpecifiedAddressContext>(0);
		}
		public LocatedAtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedAt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedAt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedAtContext locatedAt() {
		LocatedAtContext _localctx = new LocatedAtContext(Context, State);
		EnterRule(_localctx, 106, RULE_locatedAt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			Match(AT);
			State = 814;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RELATIVE_ADDRESS:
				{
				State = 812;
				relativeAddress();
				}
				break;
			case DIRECT_VARIABLE:
				{
				State = 813;
				partlySpecifiedAddress();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelativeAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		public RelativeAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relativeAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelativeAddressContext relativeAddress() {
		RelativeAddressContext _localctx = new RelativeAddressContext(Context, State);
		EnterRule(_localctx, 108, RULE_relativeAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			Match(RELATIVE_ADDRESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartlySpecifiedAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_VARIABLE() { return GetToken(stParser.DIRECT_VARIABLE, 0); }
		public PartlySpecifiedAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partlySpecifiedAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartlySpecifiedAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartlySpecifiedAddressContext partlySpecifiedAddress() {
		PartlySpecifiedAddressContext _localctx = new PartlySpecifiedAddressContext(Context, State);
		EnterRule(_localctx, 110, RULE_partlySpecifiedAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			Match(DIRECT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitPartAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(stParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		public MultibitPartAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitPartAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitPartAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitPartAccessContext multibitPartAccess() {
		MultibitPartAccessContext _localctx = new MultibitPartAccessContext(Context, State);
		EnterRule(_localctx, 112, RULE_multibitPartAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(DOT);
			State = 821;
			_la = TokenStream.LA(1);
			if ( !(_la==RELATIVE_ADDRESS || _la==UNSIGNED_INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		public StructSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecificationInitContext structSpecificationInit() {
		StructSpecificationInitContext _localctx = new StructSpecificationInitContext(Context, State);
		EnterRule(_localctx, 114, RULE_structSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			structTypeAccess();
			State = 826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 824;
				Match(ASSIGN);
				State = 825;
				structInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public StructTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeAccessContext structTypeAccess() {
		StructTypeAccessContext _localctx = new StructTypeAccessContext(Context, State);
		EnterRule(_localctx, 116, RULE_structTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 828;
					namespaceName();
					State = 829;
					Match(DOT);
					}
					} 
				}
				State = 835;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 836;
			structTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementInitContext[] structElementInit() {
			return GetRuleContexts<StructElementInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementInitContext structElementInit(int i) {
			return GetRuleContext<StructElementInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public StructInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructInitContext structInit() {
		StructInitContext _localctx = new StructInitContext(Context, State);
		EnterRule(_localctx, 118, RULE_structInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838;
			Match(LEFT_PAREN);
			State = 839;
			structElementInit();
			State = 844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 840;
				Match(COMMA);
				State = 841;
				structElementInit();
				}
				}
				State = 846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 847;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructElementNameContext structElementName() {
			return GetRuleContext<StructElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public StructElementInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementInitContext structElementInit() {
		StructElementInitContext _localctx = new StructElementInitContext(Context, State);
		EnterRule(_localctx, 120, RULE_structElementInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			structElementName();
			State = 850;
			Match(ASSIGN);
			State = 856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 851;
				expression(0);
				}
				break;
			case 2:
				{
				State = 852;
				enumValue();
				}
				break;
			case 3:
				{
				State = 853;
				arrayInit();
				}
				break;
			case 4:
				{
				State = 854;
				structInit();
				}
				break;
			case 5:
				{
				State = 855;
				referenceValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringDerivedTypeNameContext stringDerivedTypeName() {
			return GetRuleContext<StringDerivedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext stringTypeName() {
			return GetRuleContext<StringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharStringContext charString() {
			return GetRuleContext<CharStringContext>(0);
		}
		public StringTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeDeclarationContext stringTypeDeclaration() {
		StringTypeDeclarationContext _localctx = new StringTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 122, RULE_stringTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			stringDerivedTypeName();
			State = 859;
			Match(COLON);
			State = 860;
			stringTypeName();
			State = 863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 861;
				Match(ASSIGN);
				State = 862;
				charString();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringDerivedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StringDerivedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringDerivedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDerivedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringDerivedTypeNameContext stringDerivedTypeName() {
		StringDerivedTypeNameContext _localctx = new StringDerivedTypeNameContext(Context, State);
		EnterRule(_localctx, 124, RULE_stringDerivedTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringDerivedTypeNameContext stringDerivedTypeName() {
			return GetRuleContext<StringDerivedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public StringTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeAccessContext stringTypeAccess() {
		StringTypeAccessContext _localctx = new StringTypeAccessContext(Context, State);
		EnterRule(_localctx, 126, RULE_stringTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 867;
					namespaceName();
					State = 868;
					Match(DOT);
					}
					} 
				}
				State = 874;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			State = 875;
			stringDerivedTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeNameContext referenceTypeName() {
			return GetRuleContext<ReferenceTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationInitContext referenceSpecificationInit() {
			return GetRuleContext<ReferenceSpecificationInitContext>(0);
		}
		public ReferenceTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeDeclarationContext referenceTypeDeclaration() {
		ReferenceTypeDeclarationContext _localctx = new ReferenceTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_referenceTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			referenceTypeName();
			State = 878;
			Match(COLON);
			State = 879;
			referenceSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ReferenceTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeNameContext referenceTypeName() {
		ReferenceTypeNameContext _localctx = new ReferenceTypeNameContext(Context, State);
		EnterRule(_localctx, 130, RULE_referenceTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationContext referenceSpecification() {
			return GetRuleContext<ReferenceSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public ReferenceSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceSpecificationInitContext referenceSpecificationInit() {
		ReferenceSpecificationInitContext _localctx = new ReferenceSpecificationInitContext(Context, State);
		EnterRule(_localctx, 132, RULE_referenceSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			referenceSpecification();
			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 884;
				Match(ASSIGN);
				State = 885;
				referenceValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REF_TO() { return GetTokens(stParser.REF_TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF_TO(int i) {
			return GetToken(stParser.REF_TO, i);
		}
		public ReferenceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceSpecificationContext referenceSpecification() {
		ReferenceSpecificationContext _localctx = new ReferenceSpecificationContext(Context, State);
		EnterRule(_localctx, 134, RULE_referenceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 888;
				Match(REF_TO);
				}
				}
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==REF_TO );
			State = 893;
			dataTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceAddressContext referenceAddress() {
			return GetRuleContext<ReferenceAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(stParser.NULL, 0); }
		public ReferenceValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceValueContext referenceValue() {
		ReferenceValueContext _localctx = new ReferenceValueContext(Context, State);
		EnterRule(_localctx, 136, RULE_referenceValue);
		try {
			State = 897;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 895;
				referenceAddress();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 896;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(stParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext fbInstanceName() {
			return GetRuleContext<FbInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName() {
			return GetRuleContext<ClassInstanceNameContext>(0);
		}
		public ReferenceAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceAddressContext referenceAddress() {
		ReferenceAddressContext _localctx = new ReferenceAddressContext(Context, State);
		EnterRule(_localctx, 138, RULE_referenceAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			Match(REF);
			State = 900;
			Match(LEFT_PAREN);
			State = 904;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 901;
				symbolicVariable();
				}
				break;
			case 2:
				{
				State = 902;
				fbInstanceName();
				}
				break;
			case 3:
				{
				State = 903;
				classInstanceName();
				}
				break;
			}
			State = 906;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeNameContext referenceTypeName() {
			return GetRuleContext<ReferenceTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ReferenceTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeAccessContext referenceTypeAccess() {
		ReferenceTypeAccessContext _localctx = new ReferenceTypeAccessContext(Context, State);
		EnterRule(_localctx, 140, RULE_referenceTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 908;
					namespaceName();
					State = 909;
					Match(DOT);
					}
					} 
				}
				State = 915;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			State = 916;
			referenceTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext[] referenceName() {
			return GetRuleContexts<ReferenceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext referenceName(int i) {
			return GetRuleContext<ReferenceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public ReferenceAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceAssignContext referenceAssign() {
		ReferenceAssignContext _localctx = new ReferenceAssignContext(Context, State);
		EnterRule(_localctx, 142, RULE_referenceAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			referenceName();
			State = 919;
			Match(ASSIGN);
			State = 923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 920;
				referenceName();
				}
				break;
			case 2:
				{
				State = 921;
				dereference();
				}
				break;
			case 3:
				{
				State = 922;
				referenceValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ReferenceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceNameContext referenceName() {
		ReferenceNameContext _localctx = new ReferenceNameContext(Context, State);
		EnterRule(_localctx, 144, RULE_referenceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext referenceName() {
			return GetRuleContext<ReferenceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public DereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DereferenceContext dereference() {
		DereferenceContext _localctx = new DereferenceContext(Context, State);
		EnterRule(_localctx, 146, RULE_dereference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 927;
			referenceName();
			State = 929;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 928;
					Match(CARET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 931;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FbTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbTypeNameContext fbTypeName() {
		FbTypeNameContext _localctx = new FbTypeNameContext(Context, State);
		EnterRule(_localctx, 148, RULE_fbTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbTypeNameContext fbTypeName() {
			return GetRuleContext<FbTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public FbTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbTypeAccessContext fbTypeAccess() {
		FbTypeAccessContext _localctx = new FbTypeAccessContext(Context, State);
		EnterRule(_localctx, 150, RULE_fbTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 940;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 935;
					namespaceName();
					State = 936;
					Match(DOT);
					}
					} 
				}
				State = 942;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			State = 943;
			fbTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_BLOCK() { return GetToken(stParser.FUNCTION_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FbNameContext fbName() {
			return GetRuleContext<FbNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbBodyContext fbBody() {
			return GetRuleContext<FbBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FUNCTION_BLOCK() { return GetToken(stParser.END_FUNCTION_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(stParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbIOVarDeclarationsContext[] fbIOVarDeclarations() {
			return GetRuleContexts<FbIOVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbIOVarDeclarationsContext fbIOVarDeclarations(int i) {
			return GetRuleContext<FbIOVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext[] functionVarDeclarations() {
			return GetRuleContexts<FunctionVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext functionVarDeclarations(int i) {
			return GetRuleContext<FunctionVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FbTypeAccessContext fbTypeAccess() {
			return GetRuleContext<FbTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		public FbDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbDeclarationContext fbDeclaration() {
		FbDeclarationContext _localctx = new FbDeclarationContext(Context, State);
		EnterRule(_localctx, 152, RULE_fbDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945;
			Match(FUNCTION_BLOCK);
			State = 947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 946;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 949;
			fbName();
			State = 953;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 950;
				usingDirective();
				}
				}
				State = 955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 956;
				Match(EXTENDS);
				State = 959;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 957;
					fbTypeAccess();
					}
					break;
				case 2:
					{
					State = 958;
					classTypeAccess();
					}
					break;
				}
				}
			}

			State = 965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 963;
				Match(IMPLEMENTS);
				State = 964;
				interfaceTypeList();
				}
			}

			State = 973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 839L) != 0)) {
				{
				State = 971;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 967;
					fbIOVarDeclarations();
					}
					break;
				case 2:
					{
					State = 968;
					functionVarDeclarations();
					}
					break;
				case 3:
					{
					State = 969;
					tempVarDeclarations();
					}
					break;
				case 4:
					{
					State = 970;
					otherVarDeclarations();
					}
					break;
				}
				}
				State = 975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 976;
				methodDeclaration();
				}
				}
				State = 981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 982;
			fbBody();
			State = 983;
			Match(END_FUNCTION_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbIOVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbInputDeclarationsContext fbInputDeclarations() {
			return GetRuleContext<FbInputDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbOutputDeclarationsContext fbOutputDeclarations() {
			return GetRuleContext<FbOutputDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutDeclarationsContext inOutDeclarations() {
			return GetRuleContext<InOutDeclarationsContext>(0);
		}
		public FbIOVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbIOVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbIOVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbIOVarDeclarationsContext fbIOVarDeclarations() {
		FbIOVarDeclarationsContext _localctx = new FbIOVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 154, RULE_fbIOVarDeclarations);
		try {
			State = 988;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_INPUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 985;
				fbInputDeclarations();
				}
				break;
			case VAR_OUTPUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 986;
				fbOutputDeclarations();
				}
				break;
			case VAR_IN_OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 987;
				inOutDeclarations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbInputDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_INPUT() { return GetToken(stParser.VAR_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FbInputDeclarationContext[] fbInputDeclaration() {
			return GetRuleContexts<FbInputDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInputDeclarationContext fbInputDeclaration(int i) {
			return GetRuleContext<FbInputDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public FbInputDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbInputDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbInputDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbInputDeclarationsContext fbInputDeclarations() {
		FbInputDeclarationsContext _localctx = new FbInputDeclarationsContext(Context, State);
		EnterRule(_localctx, 156, RULE_fbInputDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			Match(VAR_INPUT);
			State = 992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 991;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 994;
				fbInputDeclaration();
				State = 995;
				Match(SEMICOLON);
				}
				}
				State = 1001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1002;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbInputDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public FbInputDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbInputDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbInputDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbInputDeclarationContext fbInputDeclaration() {
		FbInputDeclarationContext _localctx = new FbInputDeclarationContext(Context, State);
		EnterRule(_localctx, 158, RULE_fbInputDeclaration);
		try {
			State = 1006;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1004;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1005;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbOutputDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_OUTPUT() { return GetToken(stParser.VAR_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FbOutputDeclarationContext[] fbOutputDeclaration() {
			return GetRuleContexts<FbOutputDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbOutputDeclarationContext fbOutputDeclaration(int i) {
			return GetRuleContext<FbOutputDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public FbOutputDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbOutputDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbOutputDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbOutputDeclarationsContext fbOutputDeclarations() {
		FbOutputDeclarationsContext _localctx = new FbOutputDeclarationsContext(Context, State);
		EnterRule(_localctx, 160, RULE_fbOutputDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			Match(VAR_OUTPUT);
			State = 1010;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1009;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1012;
				fbOutputDeclaration();
				State = 1013;
				Match(SEMICOLON);
				}
				}
				State = 1019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1020;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbOutputDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public FbOutputDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbOutputDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbOutputDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbOutputDeclarationContext fbOutputDeclaration() {
		FbOutputDeclarationContext _localctx = new FbOutputDeclarationContext(Context, State);
		EnterRule(_localctx, 162, RULE_fbOutputDeclaration);
		try {
			State = 1024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1022;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1023;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RetainVarDeclarationsContext retainVarDeclarations() {
			return GetRuleContext<RetainVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonRetainVarDeclarationsContext nonRetainVarDeclarations() {
			return GetRuleContext<NonRetainVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocPartlyVarDeclarationContext locPartlyVarDeclaration() {
			return GetRuleContext<LocPartlyVarDeclarationContext>(0);
		}
		public OtherVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherVarDeclarationsContext otherVarDeclarations() {
		OtherVarDeclarationsContext _localctx = new OtherVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 164, RULE_otherVarDeclarations);
		try {
			State = 1029;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1026;
				retainVarDeclarations();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1027;
				nonRetainVarDeclarations();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1028;
				locPartlyVarDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonRetainVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public NonRetainVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonRetainVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonRetainVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonRetainVarDeclarationsContext nonRetainVarDeclarations() {
		NonRetainVarDeclarationsContext _localctx = new NonRetainVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 166, RULE_nonRetainVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031;
			Match(VAR);
			State = 1032;
			Match(NON_RETAIN);
			State = 1034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 15L) != 0)) {
				{
				State = 1033;
				accessSpecification();
				}
			}

			State = 1041;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1036;
				varDeclarationInit();
				State = 1037;
				Match(SEMICOLON);
				}
				}
				State = 1043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1044;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FbBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbBodyContext fbBody() {
		FbBodyContext _localctx = new FbBodyContext(Context, State);
		EnterRule(_localctx, 168, RULE_fbBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(stParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_METHOD() { return GetToken(stParser.END_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(stParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext[] functionVarDeclarations() {
			return GetRuleContexts<FunctionVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext functionVarDeclarations(int i) {
			return GetRuleContext<FunctionVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 170, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			Match(METHOD);
			State = 1049;
			accessSpecification();
			State = 1051;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 1050;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERRIDE) {
				{
				State = 1053;
				Match(OVERRIDE);
				}
			}

			State = 1056;
			methodName();
			State = 1059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1057;
				Match(COLON);
				State = 1058;
				dataTypeAccess();
				}
			}

			State = 1066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 839L) != 0)) {
				{
				State = 1064;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR_INPUT:
				case VAR_OUTPUT:
				case VAR_IN_OUT:
					{
					State = 1061;
					ioVarDeclarations();
					}
					break;
				case VAR:
				case VAR_EXTERNAL:
					{
					State = 1062;
					functionVarDeclarations();
					}
					break;
				case VAR_TEMP:
					{
					State = 1063;
					tempVarDeclarations();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1069;
			functionBody();
			State = 1070;
			Match(END_METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 172, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		public DataTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeAccessContext dataTypeAccess() {
		DataTypeAccessContext _localctx = new DataTypeAccessContext(Context, State);
		EnterRule(_localctx, 174, RULE_dataTypeAccess);
		try {
			State = 1076;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
			case REAL:
			case LREAL:
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
			case BOOL:
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
			case TIME:
			case LTIME:
			case DATE:
			case LDATE:
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1074;
				elementaryTypeName();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1075;
				derivedTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeAccessContext simpleTypeAccess() {
			return GetRuleContext<SimpleTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeAccessContext subrangeTypeAccess() {
			return GetRuleContext<SubrangeTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeAccessContext enumTypeAccess() {
			return GetRuleContext<EnumTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeAccessContext arrayTypeAccess() {
			return GetRuleContext<ArrayTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeAccessContext stringTypeAccess() {
			return GetRuleContext<StringTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeAccessContext referenceTypeAccess() {
			return GetRuleContext<ReferenceTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext interfaceTypeAccess() {
			return GetRuleContext<InterfaceTypeAccessContext>(0);
		}
		public DerivedTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTypeAccessContext derivedTypeAccess() {
		DerivedTypeAccessContext _localctx = new DerivedTypeAccessContext(Context, State);
		EnterRule(_localctx, 176, RULE_derivedTypeAccess);
		try {
			State = 1087;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1078;
				simpleTypeAccess();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1079;
				subrangeTypeAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1080;
				enumTypeAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1081;
				arrayTypeAccess();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1082;
				structTypeAccess();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1083;
				stringTypeAccess();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1084;
				classTypeAccess();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1085;
				referenceTypeAccess();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1086;
				interfaceTypeAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectVariableContext directVariable() {
			return GetRuleContext<DirectVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 178, RULE_variable);
		try {
			State = 1091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIRECT_VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1089;
				directVariable();
				}
				break;
			case THIS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1090;
				symbolicVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolicVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarAccessContext varAccess() {
			return GetRuleContext<VarAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiElementVarContext multiElementVar() {
			return GetRuleContext<MultiElementVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(stParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		public SymbolicVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolicVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolicVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolicVariableContext symbolicVariable() {
		SymbolicVariableContext _localctx = new SymbolicVariableContext(Context, State);
		EnterRule(_localctx, 180, RULE_symbolicVariable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				{
				State = 1093;
				Match(THIS);
				State = 1094;
				Match(DOT);
				}
				}
				break;
			case 2:
				{
				State = 1098;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1095;
						namespaceName();
						State = 1096;
						Match(DOT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1100;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 1106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 1104;
				varAccess();
				}
				break;
			case 2:
				{
				State = 1105;
				multiElementVar();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		public VarAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAccessContext varAccess() {
		VarAccessContext _localctx = new VarAccessContext(Context, State);
		EnterRule(_localctx, 182, RULE_varAccess);
		try {
			State = 1110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1108;
				varName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1109;
				dereference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarNameContext varName() {
		VarNameContext _localctx = new VarNameContext(Context, State);
		EnterRule(_localctx, 184, RULE_varName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiElementVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarAccessContext varAccess() {
			return GetRuleContext<VarAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptListContext[] subscriptList() {
			return GetRuleContexts<SubscriptListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptListContext subscriptList(int i) {
			return GetRuleContext<SubscriptListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructVariableContext[] structVariable() {
			return GetRuleContexts<StructVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructVariableContext structVariable(int i) {
			return GetRuleContext<StructVariableContext>(i);
		}
		public MultiElementVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiElementVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiElementVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiElementVarContext multiElementVar() {
		MultiElementVarContext _localctx = new MultiElementVarContext(Context, State);
		EnterRule(_localctx, 186, RULE_multiElementVar);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			varAccess();
			State = 1117;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 1117;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LEFT_BRACKET:
						{
						State = 1115;
						subscriptList();
						}
						break;
					case DOT:
						{
						State = 1116;
						structVariable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public SubscriptListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptListContext subscriptList() {
		SubscriptListContext _localctx = new SubscriptListContext(Context, State);
		EnterRule(_localctx, 188, RULE_subscriptList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			Match(LEFT_BRACKET);
			State = 1122;
			subscript();
			State = 1127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1123;
				Match(COMMA);
				State = 1124;
				subscript();
				}
				}
				State = 1129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1130;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 190, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1132;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(stParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementSelectContext structElementSelect() {
			return GetRuleContext<StructElementSelectContext>(0);
		}
		public StructVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructVariableContext structVariable() {
		StructVariableContext _localctx = new StructVariableContext(Context, State);
		EnterRule(_localctx, 192, RULE_structVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134;
			Match(DOT);
			State = 1135;
			structElementSelect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementSelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarAccessContext varAccess() {
			return GetRuleContext<VarAccessContext>(0);
		}
		public StructElementSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementSelect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementSelectContext structElementSelect() {
		StructElementSelectContext _localctx = new StructElementSelectContext(Context, State);
		EnterRule(_localctx, 194, RULE_structElementSelect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137;
			varAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_INPUT() { return GetToken(stParser.VAR_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputDeclarationContext[] inputDeclaration() {
			return GetRuleContexts<InputDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputDeclarationContext inputDeclaration(int i) {
			return GetRuleContext<InputDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public InputDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputDeclarationsContext inputDeclarations() {
		InputDeclarationsContext _localctx = new InputDeclarationsContext(Context, State);
		EnterRule(_localctx, 196, RULE_inputDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			Match(VAR_INPUT);
			State = 1141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1140;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1143;
				inputDeclaration();
				State = 1144;
				Match(SEMICOLON);
				}
				}
				State = 1150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1151;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public InputDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputDeclarationContext inputDeclaration() {
		InputDeclarationContext _localctx = new InputDeclarationContext(Context, State);
		EnterRule(_localctx, 198, RULE_inputDeclaration);
		try {
			State = 1155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1153;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1154;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrVarDeclarationContext strVarDeclaration() {
			return GetRuleContext<StrVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationInitContext referenceSpecificationInit() {
			return GetRuleContext<ReferenceSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayVarDeclarationInitContext arrayVarDeclarationInit() {
			return GetRuleContext<ArrayVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructVarDeclarationInitContext structVarDeclarationInit() {
			return GetRuleContext<StructVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationInitContext fbDeclarationInit() {
			return GetRuleContext<FbDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceSpecificationInitContext interfaceSpecificationInit() {
			return GetRuleContext<InterfaceSpecificationInitContext>(0);
		}
		public VarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationInitContext varDeclarationInit() {
		VarDeclarationInitContext _localctx = new VarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 200, RULE_varDeclarationInit);
		try {
			State = 1168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1157;
				variableList();
				State = 1158;
				Match(COLON);
				State = 1162;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 1159;
					simpleSpecificationInit();
					}
					break;
				case 2:
					{
					State = 1160;
					strVarDeclaration();
					}
					break;
				case 3:
					{
					State = 1161;
					referenceSpecificationInit();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1164;
				arrayVarDeclarationInit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1165;
				structVarDeclarationInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1166;
				fbDeclarationInit();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1167;
				interfaceSpecificationInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationContext referenceSpecification() {
			return GetRuleContext<ReferenceSpecificationContext>(0);
		}
		public ReferenceVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceVarDeclarationContext referenceVarDeclaration() {
		ReferenceVarDeclarationContext _localctx = new ReferenceVarDeclarationContext(Context, State);
		EnterRule(_localctx, 202, RULE_referenceVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1170;
			variableList();
			State = 1171;
			Match(COLON);
			State = 1172;
			referenceSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext interfaceTypeAccess() {
			return GetRuleContext<InterfaceTypeAccessContext>(0);
		}
		public InterfaceVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceVarDeclarationContext interfaceVarDeclaration() {
		InterfaceVarDeclarationContext _localctx = new InterfaceVarDeclarationContext(Context, State);
		EnterRule(_localctx, 204, RULE_interfaceVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1174;
			variableList();
			State = 1175;
			Match(COLON);
			State = 1176;
			interfaceTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext[] variableName() {
			return GetRuleContexts<VariableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName(int i) {
			return GetRuleContext<VariableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public VariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListContext variableList() {
		VariableListContext _localctx = new VariableListContext(Context, State);
		EnterRule(_localctx, 206, RULE_variableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1178;
			variableName();
			State = 1183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1179;
				Match(COMMA);
				State = 1180;
				variableName();
				}
				}
				State = 1185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 208, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1186;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		public ArrayVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayVarDeclarationInitContext arrayVarDeclarationInit() {
		ArrayVarDeclarationInitContext _localctx = new ArrayVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 210, RULE_arrayVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			variableList();
			State = 1189;
			Match(COLON);
			State = 1190;
			arraySpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConformandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(stParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASTERISK() { return GetTokens(stParser.ASTERISK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK(int i) {
			return GetToken(stParser.ASTERISK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArrayConformandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayConformand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConformand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConformandContext arrayConformand() {
		ArrayConformandContext _localctx = new ArrayConformandContext(Context, State);
		EnterRule(_localctx, 212, RULE_arrayConformand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1192;
			Match(ARRAY);
			State = 1193;
			Match(LEFT_BRACKET);
			State = 1194;
			Match(ASTERISK);
			State = 1199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1195;
				Match(COMMA);
				State = 1196;
				Match(ASTERISK);
				}
				}
				State = 1201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1202;
			Match(RIGHT_BRACKET);
			State = 1203;
			Match(OF);
			State = 1204;
			dataTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConformDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformandContext arrayConformand() {
			return GetRuleContext<ArrayConformandContext>(0);
		}
		public ArrayConformDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayConformDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConformDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConformDeclarationContext arrayConformDeclaration() {
		ArrayConformDeclarationContext _localctx = new ArrayConformDeclarationContext(Context, State);
		EnterRule(_localctx, 214, RULE_arrayConformDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206;
			variableList();
			State = 1207;
			Match(COLON);
			State = 1208;
			arrayConformand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		public StructVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructVarDeclarationInitContext structVarDeclarationInit() {
		StructVarDeclarationInitContext _localctx = new StructVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 216, RULE_structVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210;
			variableList();
			State = 1211;
			Match(COLON);
			State = 1212;
			structSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbDeclarationNoInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbNameContext[] fbName() {
			return GetRuleContexts<FbNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbNameContext fbName(int i) {
			return GetRuleContext<FbNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FbTypeAccessContext fbTypeAccess() {
			return GetRuleContext<FbTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public FbDeclarationNoInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbDeclarationNoInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbDeclarationNoInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbDeclarationNoInitContext fbDeclarationNoInit() {
		FbDeclarationNoInitContext _localctx = new FbDeclarationNoInitContext(Context, State);
		EnterRule(_localctx, 218, RULE_fbDeclarationNoInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1214;
			fbName();
			State = 1219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1215;
				Match(COMMA);
				State = 1216;
				fbName();
				}
				}
				State = 1221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1222;
			Match(COLON);
			State = 1223;
			fbTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationNoInitContext fbDeclarationNoInit() {
			return GetRuleContext<FbDeclarationNoInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		public FbDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbDeclarationInitContext fbDeclarationInit() {
		FbDeclarationInitContext _localctx = new FbDeclarationInitContext(Context, State);
		EnterRule(_localctx, 220, RULE_fbDeclarationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1225;
			fbDeclarationNoInit();
			State = 1228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1226;
				Match(ASSIGN);
				State = 1227;
				structInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FbNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbNameContext fbName() {
		FbNameContext _localctx = new FbNameContext(Context, State);
		EnterRule(_localctx, 222, RULE_fbName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1230;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbInstanceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbNameContext fbName() {
			return GetRuleContext<FbNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public FbInstanceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbInstanceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbInstanceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbInstanceNameContext fbInstanceName() {
		FbInstanceNameContext _localctx = new FbInstanceNameContext(Context, State);
		EnterRule(_localctx, 224, RULE_fbInstanceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1232;
					namespaceName();
					State = 1233;
					Match(DOT);
					}
					} 
				}
				State = 1239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			}
			State = 1240;
			fbName();
			State = 1244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 1241;
				Match(CARET);
				}
				}
				State = 1246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_OUTPUT() { return GetToken(stParser.VAR_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputDeclarationContext[] outputDeclaration() {
			return GetRuleContexts<OutputDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputDeclarationContext outputDeclaration(int i) {
			return GetRuleContext<OutputDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public OutputDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputDeclarationsContext outputDeclarations() {
		OutputDeclarationsContext _localctx = new OutputDeclarationsContext(Context, State);
		EnterRule(_localctx, 226, RULE_outputDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1247;
			Match(VAR_OUTPUT);
			State = 1249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1248;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1251;
				outputDeclaration();
				State = 1252;
				Match(SEMICOLON);
				}
				}
				State = 1258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1259;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public OutputDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputDeclarationContext outputDeclaration() {
		OutputDeclarationContext _localctx = new OutputDeclarationContext(Context, State);
		EnterRule(_localctx, 228, RULE_outputDeclaration);
		try {
			State = 1263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1261;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1262;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOutDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_IN_OUT() { return GetToken(stParser.VAR_IN_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationContext[] inOutVarDeclaration() {
			return GetRuleContexts<InOutVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationContext inOutVarDeclaration(int i) {
			return GetRuleContext<InOutVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public InOutDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOutDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOutDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOutDeclarationsContext inOutDeclarations() {
		InOutDeclarationsContext _localctx = new InOutDeclarationsContext(Context, State);
		EnterRule(_localctx, 230, RULE_inOutDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1265;
			Match(VAR_IN_OUT);
			State = 1271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1266;
				inOutVarDeclaration();
				State = 1267;
				Match(SEMICOLON);
				}
				}
				State = 1273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1274;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOutVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationNoInitContext fbDeclarationNoInit() {
			return GetRuleContext<FbDeclarationNoInitContext>(0);
		}
		public InOutVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOutVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOutVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOutVarDeclarationContext inOutVarDeclaration() {
		InOutVarDeclarationContext _localctx = new InOutVarDeclarationContext(Context, State);
		EnterRule(_localctx, 232, RULE_inOutVarDeclaration);
		try {
			State = 1279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1276;
				varDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1277;
				arrayConformDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1278;
				fbDeclarationNoInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrVarDeclarationContext strVarDeclaration() {
			return GetRuleContext<StrVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayVarDeclarationContext arrayVarDeclaration() {
			return GetRuleContext<ArrayVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructVarDeclarationContext structVarDeclaration() {
			return GetRuleContext<StructVarDeclarationContext>(0);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 234, RULE_varDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281;
			variableList();
			State = 1282;
			Match(COLON);
			State = 1287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 1283;
				simpleSpecification();
				}
				break;
			case 2:
				{
				State = 1284;
				strVarDeclaration();
				}
				break;
			case 3:
				{
				State = 1285;
				arrayVarDeclaration();
				}
				break;
			case 4:
				{
				State = 1286;
				structVarDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		public ArrayVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayVarDeclarationContext arrayVarDeclaration() {
		ArrayVarDeclarationContext _localctx = new ArrayVarDeclarationContext(Context, State);
		EnterRule(_localctx, 236, RULE_arrayVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1289;
			variableList();
			State = 1290;
			Match(COLON);
			State = 1291;
			arraySpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		public StructVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructVarDeclarationContext structVarDeclaration() {
		StructVarDeclarationContext _localctx = new StructVarDeclarationContext(Context, State);
		EnterRule(_localctx, 238, RULE_structVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293;
			variableList();
			State = 1294;
			Match(COLON);
			State = 1295;
			structTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public VarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationsContext varDeclarations() {
		VarDeclarationsContext _localctx = new VarDeclarationsContext(Context, State);
		EnterRule(_localctx, 240, RULE_varDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1297;
			Match(VAR);
			State = 1299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1298;
				Match(CONSTANT);
				}
			}

			State = 1302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 15L) != 0)) {
				{
				State = 1301;
				accessSpecification();
				}
			}

			State = 1309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1304;
				varDeclarationInit();
				State = 1305;
				Match(SEMICOLON);
				}
				}
				State = 1311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1312;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetainVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public RetainVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retainVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetainVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetainVarDeclarationsContext retainVarDeclarations() {
		RetainVarDeclarationsContext _localctx = new RetainVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 242, RULE_retainVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1314;
			Match(VAR);
			State = 1315;
			Match(RETAIN);
			State = 1317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 15L) != 0)) {
				{
				State = 1316;
				accessSpecification();
				}
			}

			State = 1324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1319;
				varDeclarationInit();
				State = 1320;
				Match(SEMICOLON);
				}
				}
				State = 1326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1327;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationContext[] locVarDeclaration() {
			return GetRuleContexts<LocVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationContext locVarDeclaration(int i) {
			return GetRuleContext<LocVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public LocVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocVarDeclarationsContext locVarDeclarations() {
		LocVarDeclarationsContext _localctx = new LocVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 244, RULE_locVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1329;
			Match(VAR);
			State = 1331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 19L) != 0)) {
				{
				State = 1330;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 19L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==IDENTIFIER) {
				{
				{
				State = 1333;
				locVarDeclaration();
				State = 1334;
				Match(SEMICOLON);
				}
				}
				State = 1340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1341;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocVarSpecificationInitContext locVarSpecificationInit() {
			return GetRuleContext<LocVarSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public LocVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocVarDeclarationContext locVarDeclaration() {
		LocVarDeclarationContext _localctx = new LocVarDeclarationContext(Context, State);
		EnterRule(_localctx, 246, RULE_locVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 1343;
				variableName();
				}
			}

			State = 1346;
			locatedAt();
			State = 1347;
			Match(COLON);
			State = 1348;
			locVarSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_TEMP() { return GetToken(stParser.VAR_TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext[] varDeclaration() {
			return GetRuleContexts<VarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration(int i) {
			return GetRuleContext<VarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceVarDeclarationContext[] referenceVarDeclaration() {
			return GetRuleContexts<ReferenceVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceVarDeclarationContext referenceVarDeclaration(int i) {
			return GetRuleContext<ReferenceVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceVarDeclarationContext[] interfaceVarDeclaration() {
			return GetRuleContexts<InterfaceVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceVarDeclarationContext interfaceVarDeclaration(int i) {
			return GetRuleContext<InterfaceVarDeclarationContext>(i);
		}
		public TempVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempVarDeclarationsContext tempVarDeclarations() {
		TempVarDeclarationsContext _localctx = new TempVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 248, RULE_tempVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350;
			Match(VAR_TEMP);
			State = 1360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1354;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
				case 1:
					{
					State = 1351;
					varDeclaration();
					}
					break;
				case 2:
					{
					State = 1352;
					referenceVarDeclaration();
					}
					break;
				case 3:
					{
					State = 1353;
					interfaceVarDeclaration();
					}
					break;
				}
				State = 1356;
				Match(SEMICOLON);
				}
				}
				State = 1362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1363;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_EXTERNAL() { return GetToken(stParser.VAR_EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext[] externalDeclaration() {
			return GetRuleContexts<ExternalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext externalDeclaration(int i) {
			return GetRuleContext<ExternalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public ExternalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalVarDeclarationsContext externalVarDeclarations() {
		ExternalVarDeclarationsContext _localctx = new ExternalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 250, RULE_externalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365;
			Match(VAR_EXTERNAL);
			State = 1367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1366;
				Match(CONSTANT);
				}
			}

			State = 1374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1369;
				externalDeclaration();
				State = 1370;
				Match(SEMICOLON);
				}
				}
				State = 1376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1377;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext globalVarName() {
			return GetRuleContext<GlobalVarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbTypeAccessContext fbTypeAccess() {
			return GetRuleContext<FbTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeAccessContext referenceTypeAccess() {
			return GetRuleContext<ReferenceTypeAccessContext>(0);
		}
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 252, RULE_externalDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379;
			globalVarName();
			State = 1380;
			Match(COLON);
			State = 1386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 1381;
				simpleSpecification();
				}
				break;
			case 2:
				{
				State = 1382;
				arraySpecification();
				}
				break;
			case 3:
				{
				State = 1383;
				structTypeAccess();
				}
				break;
			case 4:
				{
				State = 1384;
				fbTypeAccess();
				}
				break;
			case 5:
				{
				State = 1385;
				referenceTypeAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public GlobalVarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarNameContext globalVarName() {
		GlobalVarNameContext _localctx = new GlobalVarNameContext(Context, State);
		EnterRule(_localctx, 254, RULE_globalVarName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1388;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_GLOBAL() { return GetToken(stParser.VAR_GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationContext[] globalVarDeclaration() {
			return GetRuleContexts<GlobalVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationContext globalVarDeclaration(int i) {
			return GetRuleContext<GlobalVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		public GlobalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclarationsContext globalVarDeclarations() {
		GlobalVarDeclarationsContext _localctx = new GlobalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 256, RULE_globalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1390;
			Match(VAR_GLOBAL);
			State = 1392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==CONSTANT) {
				{
				State = 1391;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==CONSTANT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1394;
				globalVarDeclaration();
				State = 1395;
				Match(SEMICOLON);
				}
				}
				State = 1401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1402;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarSpecificationContext globalVarSpecification() {
			return GetRuleContext<GlobalVarSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocVarSpecificationInitContext locVarSpecificationInit() {
			return GetRuleContext<LocVarSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbTypeAccessContext fbTypeAccess() {
			return GetRuleContext<FbTypeAccessContext>(0);
		}
		public GlobalVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclarationContext globalVarDeclaration() {
		GlobalVarDeclarationContext _localctx = new GlobalVarDeclarationContext(Context, State);
		EnterRule(_localctx, 258, RULE_globalVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404;
			globalVarSpecification();
			State = 1405;
			Match(COLON);
			State = 1408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				{
				State = 1406;
				locVarSpecificationInit();
				}
				break;
			case 2:
				{
				State = 1407;
				fbTypeAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext[] globalVarName() {
			return GetRuleContexts<GlobalVarNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext globalVarName(int i) {
			return GetRuleContext<GlobalVarNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		public GlobalVarSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarSpecificationContext globalVarSpecification() {
		GlobalVarSpecificationContext _localctx = new GlobalVarSpecificationContext(Context, State);
		EnterRule(_localctx, 260, RULE_globalVarSpecification);
		int _la;
		try {
			State = 1421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1410;
				globalVarName();
				State = 1415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1411;
					Match(COMMA);
					State = 1412;
					globalVarName();
					}
					}
					State = 1417;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1418;
				globalVarName();
				State = 1419;
				locatedAt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocVarSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SByteStrSpecificationContext sByteStrSpecification() {
			return GetRuleContext<SByteStrSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DByteStrSpecificationContext dByteStrSpecification() {
			return GetRuleContext<DByteStrSpecificationContext>(0);
		}
		public LocVarSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locVarSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocVarSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocVarSpecificationInitContext locVarSpecificationInit() {
		LocVarSpecificationInitContext _localctx = new LocVarSpecificationInitContext(Context, State);
		EnterRule(_localctx, 262, RULE_locVarSpecificationInit);
		try {
			State = 1428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1423;
				simpleSpecificationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1424;
				arraySpecificationInit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1425;
				structSpecificationInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1426;
				sByteStrSpecification();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1427;
				dByteStrSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SByteStrVarDeclContext sByteStrVarDecl() {
			return GetRuleContext<SByteStrVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DByteStrVarDeclarationContext dByteStrVarDeclaration() {
			return GetRuleContext<DByteStrVarDeclarationContext>(0);
		}
		public StrVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrVarDeclarationContext strVarDeclaration() {
		StrVarDeclarationContext _localctx = new StrVarDeclarationContext(Context, State);
		EnterRule(_localctx, 264, RULE_strVarDeclaration);
		try {
			State = 1432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1430;
				sByteStrVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1431;
				dByteStrVarDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SByteStrVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SByteStrSpecificationContext sByteStrSpecification() {
			return GetRuleContext<SByteStrSpecificationContext>(0);
		}
		public SByteStrVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sByteStrVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSByteStrVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SByteStrVarDeclContext sByteStrVarDecl() {
		SByteStrVarDeclContext _localctx = new SByteStrVarDeclContext(Context, State);
		EnterRule(_localctx, 266, RULE_sByteStrVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1434;
			variableList();
			State = 1435;
			Match(COLON);
			State = 1436;
			sByteStrSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SByteStrSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BYTE_STRING() { return GetToken(stParser.SINGLE_BYTE_STRING, 0); }
		public SByteStrSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sByteStrSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSByteStrSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SByteStrSpecificationContext sByteStrSpecification() {
		SByteStrSpecificationContext _localctx = new SByteStrSpecificationContext(Context, State);
		EnterRule(_localctx, 268, RULE_sByteStrSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1438;
			Match(STRING);
			State = 1442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 1439;
				Match(LEFT_BRACKET);
				State = 1440;
				Match(UNSIGNED_INT);
				State = 1441;
				Match(RIGHT_BRACKET);
				}
			}

			State = 1446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1444;
				Match(ASSIGN);
				State = 1445;
				Match(SINGLE_BYTE_STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DByteStrVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DByteStrSpecificationContext dByteStrSpecification() {
			return GetRuleContext<DByteStrSpecificationContext>(0);
		}
		public DByteStrVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dByteStrVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDByteStrVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DByteStrVarDeclarationContext dByteStrVarDeclaration() {
		DByteStrVarDeclarationContext _localctx = new DByteStrVarDeclarationContext(Context, State);
		EnterRule(_localctx, 270, RULE_dByteStrVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1448;
			variableList();
			State = 1449;
			Match(COLON);
			State = 1450;
			dByteStrSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DByteStrSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BYTE_STRING() { return GetToken(stParser.DOUBLE_BYTE_STRING, 0); }
		public DByteStrSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dByteStrSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDByteStrSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DByteStrSpecificationContext dByteStrSpecification() {
		DByteStrSpecificationContext _localctx = new DByteStrSpecificationContext(Context, State);
		EnterRule(_localctx, 272, RULE_dByteStrSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452;
			Match(WSTRING);
			State = 1456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 1453;
				Match(LEFT_BRACKET);
				State = 1454;
				Match(UNSIGNED_INT);
				State = 1455;
				Match(RIGHT_BRACKET);
				}
			}

			State = 1460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1458;
				Match(ASSIGN);
				State = 1459;
				Match(DOUBLE_BYTE_STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocPartlyVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocPartlyVarContext[] locPartlyVar() {
			return GetRuleContexts<LocPartlyVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocPartlyVarContext locPartlyVar(int i) {
			return GetRuleContext<LocPartlyVarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public LocPartlyVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locPartlyVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocPartlyVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocPartlyVarDeclarationContext locPartlyVarDeclaration() {
		LocPartlyVarDeclarationContext _localctx = new LocPartlyVarDeclarationContext(Context, State);
		EnterRule(_localctx, 274, RULE_locPartlyVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462;
			Match(VAR);
			State = 1464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1463;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1466;
				locPartlyVar();
				}
				}
				State = 1471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1472;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocPartlyVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(stParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecificationContext varSpecification() {
			return GetRuleContext<VarSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(stParser.SEMICOLON, 0); }
		public LocPartlyVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locPartlyVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocPartlyVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocPartlyVarContext locPartlyVar() {
		LocPartlyVarContext _localctx = new LocPartlyVarContext(Context, State);
		EnterRule(_localctx, 276, RULE_locPartlyVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1474;
			variableName();
			State = 1475;
			Match(AT);
			State = 1476;
			Match(RELATIVE_ADDRESS);
			State = 1477;
			Match(COLON);
			State = 1478;
			varSpecification();
			State = 1479;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		public VarSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSpecificationContext varSpecification() {
		VarSpecificationContext _localctx = new VarSpecificationContext(Context, State);
		EnterRule(_localctx, 278, RULE_varSpecification);
		int _la;
		try {
			State = 1490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1481;
				simpleSpecification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1482;
				arraySpecification();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1483;
				structTypeAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1484;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==WSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 1485;
					Match(LEFT_BRACKET);
					State = 1486;
					Match(UNSIGNED_INT);
					State = 1487;
					Match(RIGHT_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(stParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FUNCTION() { return GetToken(stParser.END_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext[] functionVarDeclarations() {
			return GetRuleContexts<FunctionVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext functionVarDeclarations(int i) {
			return GetRuleContext<FunctionVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 280, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492;
			Match(FUNCTION);
			State = 1493;
			functionName();
			State = 1496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1494;
				Match(COLON);
				State = 1495;
				dataTypeAccess();
				}
			}

			State = 1501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1498;
				usingDirective();
				}
				}
				State = 1503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 839L) != 0)) {
				{
				State = 1507;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR_INPUT:
				case VAR_OUTPUT:
				case VAR_IN_OUT:
					{
					State = 1504;
					ioVarDeclarations();
					}
					break;
				case VAR:
				case VAR_EXTERNAL:
					{
					State = 1505;
					functionVarDeclarations();
					}
					break;
				case VAR_TEMP:
					{
					State = 1506;
					tempVarDeclarations();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1512;
			functionBody();
			State = 1513;
			Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IoVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputDeclarationsContext inputDeclarations() {
			return GetRuleContext<InputDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputDeclarationsContext outputDeclarations() {
			return GetRuleContext<OutputDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutDeclarationsContext inOutDeclarations() {
			return GetRuleContext<InOutDeclarationsContext>(0);
		}
		public IoVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ioVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIoVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IoVarDeclarationsContext ioVarDeclarations() {
		IoVarDeclarationsContext _localctx = new IoVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 282, RULE_ioVarDeclarations);
		try {
			State = 1518;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_INPUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1515;
				inputDeclarations();
				}
				break;
			case VAR_OUTPUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1516;
				outputDeclarations();
				}
				break;
			case VAR_IN_OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1517;
				inOutDeclarations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations() {
			return GetRuleContext<ExternalVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationsContext varDeclarations() {
			return GetRuleContext<VarDeclarationsContext>(0);
		}
		public FunctionVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionVarDeclarationsContext functionVarDeclarations() {
		FunctionVarDeclarationsContext _localctx = new FunctionVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 284, RULE_functionVarDeclarations);
		try {
			State = 1522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_EXTERNAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1520;
				externalVarDeclarations();
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1521;
				varDeclarations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 286, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1524;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(stParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CLASS() { return GetToken(stParser.END_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(stParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext[] functionVarDeclarations() {
			return GetRuleContexts<FunctionVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext functionVarDeclarations(int i) {
			return GetRuleContext<FunctionVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 288, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1526;
			Match(CLASS);
			State = 1528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 1527;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1530;
			classTypeName();
			State = 1534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1531;
				usingDirective();
				}
				}
				State = 1536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1537;
				Match(EXTENDS);
				State = 1538;
				classTypeAccess();
				}
			}

			State = 1543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1541;
				Match(IMPLEMENTS);
				State = 1542;
				interfaceTypeList();
				}
			}

			State = 1549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VAR || _la==VAR_EXTERNAL) {
				{
				State = 1547;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
				case 1:
					{
					State = 1545;
					functionVarDeclarations();
					}
					break;
				case 2:
					{
					State = 1546;
					otherVarDeclarations();
					}
					break;
				}
				}
				State = 1551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 1552;
				methodDeclaration();
				}
				}
				State = 1557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1558;
			Match(END_CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ClassTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeNameContext classTypeName() {
		ClassTypeNameContext _localctx = new ClassTypeNameContext(Context, State);
		EnterRule(_localctx, 290, RULE_classTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1560;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ClassTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeAccessContext classTypeAccess() {
		ClassTypeAccessContext _localctx = new ClassTypeAccessContext(Context, State);
		EnterRule(_localctx, 292, RULE_classTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1567;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1562;
					namespaceName();
					State = 1563;
					Match(DOT);
					}
					} 
				}
				State = 1569;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			}
			State = 1570;
			classTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 294, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1572;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public ClassInstanceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceNameContext classInstanceName() {
		ClassInstanceNameContext _localctx = new ClassInstanceNameContext(Context, State);
		EnterRule(_localctx, 296, RULE_classInstanceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1579;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1574;
					namespaceName();
					State = 1575;
					Match(DOT);
					}
					} 
				}
				State = 1581;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			}
			State = 1582;
			className();
			State = 1586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 1583;
				Match(CARET);
				}
				}
				State = 1588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(stParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(stParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(stParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(stParser.INTERNAL, 0); }
		public AccessSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecificationContext accessSpecification() {
		AccessSpecificationContext _localctx = new AccessSpecificationContext(Context, State);
		EnterRule(_localctx, 298, RULE_accessSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1589;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(stParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceNameContext interfaceName() {
			return GetRuleContext<InterfaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_INTERFACE() { return GetToken(stParser.END_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodPrototypeContext[] methodPrototype() {
			return GetRuleContexts<MethodPrototypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodPrototypeContext methodPrototype(int i) {
			return GetRuleContext<MethodPrototypeContext>(i);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 300, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1591;
			Match(INTERFACE);
			State = 1592;
			interfaceName();
			State = 1596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1593;
				usingDirective();
				}
				}
				State = 1598;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1599;
				Match(EXTENDS);
				State = 1600;
				interfaceTypeList();
				}
			}

			State = 1606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 1603;
				methodPrototype();
				}
				}
				State = 1608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1609;
			Match(END_INTERFACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public InterfaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceNameContext interfaceName() {
		InterfaceNameContext _localctx = new InterfaceNameContext(Context, State);
		EnterRule(_localctx, 302, RULE_interfaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1611;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext[] interfaceTypeAccess() {
			return GetRuleContexts<InterfaceTypeAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext interfaceTypeAccess(int i) {
			return GetRuleContext<InterfaceTypeAccessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(stParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(stParser.COLON, i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext interfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 304, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1613;
			interfaceTypeAccess();
			State = 1618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 1614;
				Match(COLON);
				State = 1615;
				interfaceTypeAccess();
				}
				}
				State = 1620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceNameContext interfaceName() {
			return GetRuleContext<InterfaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public InterfaceTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeAccessContext interfaceTypeAccess() {
		InterfaceTypeAccessContext _localctx = new InterfaceTypeAccessContext(Context, State);
		EnterRule(_localctx, 306, RULE_interfaceTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1621;
					namespaceName();
					State = 1622;
					Match(DOT);
					}
					} 
				}
				State = 1628;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
			}
			State = 1629;
			interfaceName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodPrototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(stParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_METHOD() { return GetToken(stParser.END_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		public MethodPrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodPrototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodPrototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodPrototypeContext methodPrototype() {
		MethodPrototypeContext _localctx = new MethodPrototypeContext(Context, State);
		EnterRule(_localctx, 308, RULE_methodPrototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631;
			Match(METHOD);
			State = 1632;
			methodName();
			State = 1635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1633;
				Match(COLON);
				State = 1634;
				dataTypeAccess();
				}
			}

			State = 1640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1008806316530991104L) != 0)) {
				{
				{
				State = 1637;
				ioVarDeclarations();
				}
				}
				State = 1642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1643;
			Match(END_METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceValueContext interfaceValue() {
			return GetRuleContext<InterfaceValueContext>(0);
		}
		public InterfaceSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceSpecificationInitContext interfaceSpecificationInit() {
		InterfaceSpecificationInitContext _localctx = new InterfaceSpecificationInitContext(Context, State);
		EnterRule(_localctx, 310, RULE_interfaceSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1645;
			variableList();
			State = 1648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1646;
				Match(ASSIGN);
				State = 1647;
				interfaceValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext fbInstanceName() {
			return GetRuleContext<FbInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName() {
			return GetRuleContext<ClassInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(stParser.NULL, 0); }
		public InterfaceValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceValueContext interfaceValue() {
		InterfaceValueContext _localctx = new InterfaceValueContext(Context, State);
		EnterRule(_localctx, 312, RULE_interfaceValue);
		try {
			State = 1654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1650;
				symbolicVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1651;
				fbInstanceName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1652;
				classInstanceName();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1653;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 314, RULE_statementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1657;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DIRECT_VARIABLE || _la==THIS || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 173746946051L) != 0) || _la==IDENTIFIER) {
						{
						State = 1656;
						statement();
						}
					}

					State = 1659;
					Match(SEMICOLON);
					}
					} 
				}
				State = 1664;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogControlStatementContext subprogControlStatement() {
			return GetRuleContext<SubprogControlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 316, RULE_statement);
		try {
			State = 1669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1665;
				assignStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1666;
				subprogControlStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1667;
				selectionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1668;
				loopStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceAssignContext referenceAssign() {
			return GetRuleContext<ReferenceAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentAttemptContext assignmentAttempt() {
			return GetRuleContext<AssignmentAttemptContext>(0);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 318, RULE_assignStatement);
		try {
			State = 1677;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1671;
				variable();
				State = 1672;
				Match(ASSIGN);
				State = 1673;
				expression(0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1675;
				referenceAssign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1676;
				assignmentAttempt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentAttemptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTEMPT_ASSIGN() { return GetToken(stParser.ATTEMPT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext[] referenceName() {
			return GetRuleContexts<ReferenceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext referenceName(int i) {
			return GetRuleContext<ReferenceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext[] dereference() {
			return GetRuleContexts<DereferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference(int i) {
			return GetRuleContext<DereferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public AssignmentAttemptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentAttempt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentAttempt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentAttemptContext assignmentAttempt() {
		AssignmentAttemptContext _localctx = new AssignmentAttemptContext(Context, State);
		EnterRule(_localctx, 320, RULE_assignmentAttempt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				{
				State = 1679;
				referenceName();
				}
				break;
			case 2:
				{
				State = 1680;
				dereference();
				}
				break;
			}
			State = 1683;
			Match(ATTEMPT_ASSIGN);
			State = 1687;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				{
				State = 1684;
				referenceName();
				}
				break;
			case 2:
				{
				State = 1685;
				dereference();
				}
				break;
			case 3:
				{
				State = 1686;
				referenceValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogControlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(stParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(stParser.RETURN, 0); }
		public SubprogControlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogControlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogControlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogControlStatementContext subprogControlStatement() {
		SubprogControlStatementContext _localctx = new SubprogControlStatementContext(Context, State);
		EnterRule(_localctx, 322, RULE_subprogControlStatement);
		try {
			State = 1695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1689;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1690;
				invocation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1691;
				Match(SUPER);
				State = 1692;
				Match(LEFT_PAREN);
				State = 1693;
				Match(RIGHT_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1694;
				Match(RETURN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionAccessContext functionAccess() {
			return GetRuleContext<FunctionAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext[] parameterAssign() {
			return GetRuleContexts<ParameterAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext parameterAssign(int i) {
			return GetRuleContext<ParameterAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 324, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1697;
			functionAccess();
			State = 1698;
			Match(LEFT_BRACKET);
			State = 1707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 126135967496011292L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 8590999555L) != 0)) {
				{
				State = 1699;
				parameterAssign();
				State = 1704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1700;
					Match(COMMA);
					State = 1701;
					parameterAssign();
					}
					}
					State = 1706;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1709;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public FunctionAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionAccessContext functionAccess() {
		FunctionAccessContext _localctx = new FunctionAccessContext(Context, State);
		EnterRule(_localctx, 326, RULE_functionAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1716;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1711;
					namespaceName();
					State = 1712;
					Match(DOT);
					}
					} 
				}
				State = 1718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			}
			State = 1719;
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 328, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1721;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext[] fbInstanceName() {
			return GetRuleContexts<FbInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext fbInstanceName(int i) {
			return GetRuleContext<FbInstanceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext[] parameterAssign() {
			return GetRuleContexts<ParameterAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext parameterAssign(int i) {
			return GetRuleContext<ParameterAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(stParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext[] classInstanceName() {
			return GetRuleContexts<ClassInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName(int i) {
			return GetRuleContext<ClassInstanceNameContext>(i);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 330, RULE_invocation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1723;
				fbInstanceName();
				}
				break;
			case 2:
				{
				State = 1726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THIS) {
					{
					State = 1724;
					Match(THIS);
					State = 1725;
					Match(DOT);
					}
				}

				{
				State = 1734;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1730;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
						case 1:
							{
							State = 1728;
							fbInstanceName();
							}
							break;
						case 2:
							{
							State = 1729;
							classInstanceName();
							}
							break;
						}
						State = 1732;
						Match(DOT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1736;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				State = 1738;
				methodName();
				}
				break;
			}
			State = 1742;
			Match(LEFT_PAREN);
			State = 1751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 126135967496011292L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 8590999555L) != 0)) {
				{
				State = 1743;
				parameterAssign();
				State = 1748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1744;
					Match(COMMA);
					State = 1745;
					parameterAssign();
					}
					}
					State = 1750;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1753;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceAssignContext referenceAssign() {
			return GetRuleContext<ReferenceAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OUT() { return GetToken(stParser.ASSIGN_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(stParser.NOT, 0); }
		public ParameterAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterAssignContext parameterAssign() {
		ParameterAssignContext _localctx = new ParameterAssignContext(Context, State);
		EnterRule(_localctx, 332, RULE_parameterAssign);
		int _la;
		try {
			State = 1769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1758;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1755;
					variableName();
					State = 1756;
					Match(ASSIGN);
					}
					break;
				}
				State = 1760;
				expression(0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1761;
				referenceAssign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1762;
					Match(NOT);
					}
				}

				State = 1765;
				variableName();
				State = 1766;
				Match(ASSIGN_OUT);
				State = 1767;
				variable();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 334, RULE_selectionStatement);
		try {
			State = 1773;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1771;
				ifStatement();
				}
				break;
			case CASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1772;
				caseStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(stParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(stParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(stParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_IF() { return GetToken(stParser.END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSIF() { return GetTokens(stParser.ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF(int i) {
			return GetToken(stParser.ELSIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(stParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 336, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1775;
			Match(IF);
			State = 1776;
			expression(0);
			State = 1777;
			Match(THEN);
			State = 1778;
			statementList();
			State = 1786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 1779;
				Match(ELSIF);
				State = 1780;
				expression(0);
				State = 1781;
				Match(THEN);
				State = 1782;
				statementList();
				}
				}
				State = 1788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1789;
				Match(ELSE);
				State = 1790;
				statementList();
				}
			}

			State = 1793;
			Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(stParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CASE() { return GetToken(stParser.END_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseSelectionContext[] caseSelection() {
			return GetRuleContexts<CaseSelectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseSelectionContext caseSelection(int i) {
			return GetRuleContext<CaseSelectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(stParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 338, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1795;
			Match(CASE);
			State = 1796;
			expression(0);
			State = 1797;
			Match(OF);
			State = 1799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1798;
				caseSelection();
				}
				}
				State = 1801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 126135967496011292L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 8590999555L) != 0) );
			State = 1805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1803;
				Match(ELSE);
				State = 1804;
				statementList();
				}
			}

			State = 1807;
			Match(END_CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseSelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseListContext caseList() {
			return GetRuleContext<CaseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseSelection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseSelectionContext caseSelection() {
		CaseSelectionContext _localctx = new CaseSelectionContext(Context, State);
		EnterRule(_localctx, 340, RULE_caseSelection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1809;
			caseList();
			State = 1810;
			Match(COLON);
			State = 1811;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext[] caseListElement() {
			return GetRuleContexts<CaseListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext caseListElement(int i) {
			return GetRuleContext<CaseListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public CaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListContext caseList() {
		CaseListContext _localctx = new CaseListContext(Context, State);
		EnterRule(_localctx, 342, RULE_caseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813;
			caseListElement();
			State = 1818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1814;
				Match(COMMA);
				State = 1815;
				caseListElement();
				}
				}
				State = 1820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListElementContext caseListElement() {
		CaseListElementContext _localctx = new CaseListElementContext(Context, State);
		EnterRule(_localctx, 344, RULE_caseListElement);
		try {
			State = 1823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1821;
				subrange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1822;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStatementContext exitStatement() {
			return GetRuleContext<ExitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 346, RULE_loopStatement);
		try {
			State = 1830;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1825;
				forStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1826;
				whileStatement();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1827;
				repeatStatement();
				}
				break;
			case EXIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1828;
				exitStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1829;
				continueStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(stParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ControlVariableContext controlVariable() {
			return GetRuleContext<ControlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForRangeContext forRange() {
			return GetRuleContext<ForRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(stParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FOR() { return GetToken(stParser.END_FOR, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 348, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1832;
			Match(FOR);
			State = 1833;
			controlVariable();
			State = 1834;
			Match(ASSIGN);
			State = 1835;
			forRange();
			State = 1836;
			Match(DO);
			State = 1837;
			statementList();
			State = 1838;
			Match(END_FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ControlVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlVariableContext controlVariable() {
		ControlVariableContext _localctx = new ControlVariableContext(Context, State);
		EnterRule(_localctx, 350, RULE_controlVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(stParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(stParser.BY, 0); }
		public ForRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeContext forRange() {
		ForRangeContext _localctx = new ForRangeContext(Context, State);
		EnterRule(_localctx, 352, RULE_forRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842;
			expression(0);
			State = 1843;
			Match(TO);
			State = 1844;
			expression(0);
			State = 1847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 1845;
				Match(BY);
				State = 1846;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(stParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(stParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_WHILE() { return GetToken(stParser.END_WHILE, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 354, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1849;
			Match(WHILE);
			State = 1850;
			expression(0);
			State = 1851;
			Match(DO);
			State = 1852;
			statementList();
			State = 1853;
			Match(END_WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(stParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(stParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_REPEAT() { return GetToken(stParser.END_REPEAT, 0); }
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 356, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1855;
			Match(REPEAT);
			State = 1856;
			statementList();
			State = 1857;
			Match(UNTIL);
			State = 1858;
			expression(0);
			State = 1859;
			Match(END_REPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(stParser.OR, 0); }
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(stParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(stParser.AND, 0); }
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(stParser.POWER, 0); }
		public ExponentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(stParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(stParser.MINUS, 0); }
		public AddSubExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(stParser.XOR, 0); }
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(stParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(stParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(stParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(stParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(stParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(stParser.NOT_EQUAL, 0); }
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		public BracketedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DerefExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		public DerefExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(stParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(stParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(stParser.NOT, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FuncCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultDivModExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(stParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(stParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(stParser.MOD, 0); }
		public MultDivModExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultDivModExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 358;
		EnterRecursionRule(_localctx, 358, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1866;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
				case 1:
					{
					State = 1862;
					literalValue();
					}
					break;
				case 2:
					{
					State = 1863;
					variableAccess();
					}
					break;
				case 3:
					{
					State = 1864;
					enumValue();
					}
					break;
				case 4:
					{
					State = 1865;
					referenceValue();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new BracketedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1868;
				Match(LEFT_PAREN);
				State = 1869;
				expression(0);
				State = 1870;
				Match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new FuncCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1872;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new DerefExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1873;
				dereference();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1874;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 16387L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1875;
				expression(8);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1901;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1899;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
					case 1:
						{
						_localctx = new ExponentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1878;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1879;
						Match(POWER);
						State = 1880;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new MultDivModExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1881;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1882;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 13L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1883;
						expression(7);
						}
						break;
					case 3:
						{
						_localctx = new AddSubExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1884;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1885;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1886;
						expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1887;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1888;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 63L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1889;
						expression(5);
						}
						break;
					case 5:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1890;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1891;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==AMPERSAND) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1892;
						expression(4);
						}
						break;
					case 6:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1893;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1894;
						Match(XOR);
						State = 1895;
						expression(3);
						}
						break;
					case 7:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1896;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1897;
						Match(OR);
						State = 1898;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 1903;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(stParser.EXIT, 0); }
		public ExitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStatementContext exitStatement() {
		ExitStatementContext _localctx = new ExitStatementContext(Context, State);
		EnterRule(_localctx, 360, RULE_exitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1904;
			Match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(stParser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 362, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1906;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitPartAccessContext multibitPartAccess() {
			return GetRuleContext<MultibitPartAccessContext>(0);
		}
		public VariableAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAccessContext variableAccess() {
		VariableAccessContext _localctx = new VariableAccessContext(Context, State);
		EnterRule(_localctx, 364, RULE_variableAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908;
			variable();
			State = 1910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				{
				State = 1909;
				multibitPartAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralContext realLiteral() {
			return GetRuleContext<RealLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeLiteralContext timeLiteral() {
			return GetRuleContext<TimeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsLiteralContext multibitsLiteral() {
			return GetRuleContext<MultibitsLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 366, RULE_literalValue);
		try {
			State = 1918;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1912;
				intLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1913;
				realLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1914;
				charLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1915;
				timeLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1916;
				multibitsLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1917;
				boolLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralValueContext intLiteralValue() {
			return GetRuleContext<IntLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public IntLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralContext intLiteral() {
		IntLiteralContext _localctx = new IntLiteralContext(Context, State);
		EnterRule(_localctx, 368, RULE_intLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16711680L) != 0)) {
				{
				State = 1920;
				intTypeName();
				State = 1921;
				Match(HASH);
				}
			}

			State = 1925;
			intLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_INT() { return GetToken(stParser.SIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_INT() { return GetToken(stParser.BINARY_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_INT() { return GetToken(stParser.OCTAL_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INT() { return GetToken(stParser.HEX_INT, 0); }
		public IntLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralValueContext intLiteralValue() {
		IntLiteralValueContext _localctx = new IntLiteralValueContext(Context, State);
		EnterRule(_localctx, 370, RULE_intLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1927;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 31744L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USINT() { return GetToken(stParser.USINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(stParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDINT() { return GetToken(stParser.UDINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULINT() { return GetToken(stParser.ULINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT() { return GetToken(stParser.SINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(stParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DINT() { return GetToken(stParser.DINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINT() { return GetToken(stParser.LINT, 0); }
		public IntTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntTypeNameContext intTypeName() {
		IntTypeNameContext _localctx = new IntTypeNameContext(Context, State);
		EnterRule(_localctx, 372, RULE_intTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1929;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16711680L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsLiteralValueContext multibitsLiteralValue() {
			return GetRuleContext<MultibitsLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsTypeNameContext multibitsTypeName() {
			return GetRuleContext<MultibitsTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public MultibitsLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsLiteralContext multibitsLiteral() {
		MultibitsLiteralContext _localctx = new MultibitsLiteralContext(Context, State);
		EnterRule(_localctx, 374, RULE_multibitsLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) {
				{
				State = 1931;
				multibitsTypeName();
				State = 1932;
				Match(HASH);
				}
			}

			State = 1936;
			multibitsLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_INT() { return GetToken(stParser.BINARY_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_INT() { return GetToken(stParser.OCTAL_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INT() { return GetToken(stParser.HEX_INT, 0); }
		public MultibitsLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsLiteralValueContext multibitsLiteralValue() {
		MultibitsLiteralValueContext _localctx = new MultibitsLiteralValueContext(Context, State);
		EnterRule(_localctx, 376, RULE_multibitsLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1938;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(stParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(stParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DWORD() { return GetToken(stParser.DWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LWORD() { return GetToken(stParser.LWORD, 0); }
		public MultibitsTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsTypeNameContext multibitsTypeName() {
		MultibitsTypeNameContext _localctx = new MultibitsTypeNameContext(Context, State);
		EnterRule(_localctx, 378, RULE_multibitsTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1940;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralValueContext realLiteralValue() {
			return GetRuleContext<RealLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeNameContext realTypeName() {
			return GetRuleContext<RealTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public RealLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralContext realLiteral() {
		RealLiteralContext _localctx = new RealLiteralContext(Context, State);
		EnterRule(_localctx, 380, RULE_realLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REAL || _la==LREAL) {
				{
				State = 1942;
				realTypeName();
				State = 1943;
				Match(HASH);
				}
			}

			State = 1947;
			realLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_VALUE() { return GetToken(stParser.REAL_VALUE, 0); }
		public RealLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralValueContext realLiteralValue() {
		RealLiteralValueContext _localctx = new RealLiteralValueContext(Context, State);
		EnterRule(_localctx, 382, RULE_realLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1949;
			Match(REAL_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(stParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LREAL() { return GetToken(stParser.LREAL, 0); }
		public RealTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealTypeNameContext realTypeName() {
		RealTypeNameContext _localctx = new RealTypeNameContext(Context, State);
		EnterRule(_localctx, 384, RULE_realTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1951;
			_la = TokenStream.LA(1);
			if ( !(_la==REAL || _la==LREAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralValueContext boolLiteralValue() {
			return GetRuleContext<BoolLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTypeNameContext boolTypeName() {
			return GetRuleContext<BoolTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 386, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BOOL) {
				{
				State = 1953;
				boolTypeName();
				State = 1954;
				Match(HASH);
				}
			}

			State = 1958;
			boolLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(stParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public BoolLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralValueContext boolLiteralValue() {
		BoolLiteralValueContext _localctx = new BoolLiteralValueContext(Context, State);
		EnterRule(_localctx, 388, RULE_boolLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1960;
			_la = TokenStream.LA(1);
			if ( !(_la==UNSIGNED_INT || _la==BOOLEAN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(stParser.BOOL, 0); }
		public BoolTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolTypeNameContext boolTypeName() {
		BoolTypeNameContext _localctx = new BoolTypeNameContext(Context, State);
		EnterRule(_localctx, 390, RULE_boolTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1962;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharStringContext charString() {
			return GetRuleContext<CharStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharStringTypeNameContext charStringTypeName() {
			return GetRuleContext<CharStringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 392, RULE_charLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 128849018880L) != 0)) {
				{
				State = 1964;
				charStringTypeName();
				State = 1965;
				Match(HASH);
				}
			}

			State = 1969;
			charString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BYTE_STRING() { return GetToken(stParser.SINGLE_BYTE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BYTE_STRING() { return GetToken(stParser.DOUBLE_BYTE_STRING, 0); }
		public CharStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharStringContext charString() {
		CharStringContext _localctx = new CharStringContext(Context, State);
		EnterRule(_localctx, 394, RULE_charString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1971;
			_la = TokenStream.LA(1);
			if ( !(_la==SINGLE_BYTE_STRING || _la==DOUBLE_BYTE_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharStringTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(stParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WCHAR() { return GetToken(stParser.WCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		public CharStringTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charStringTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharStringTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharStringTypeNameContext charStringTypeName() {
		CharStringTypeNameContext _localctx = new CharStringTypeNameContext(Context, State);
		EnterRule(_localctx, 396, RULE_charStringTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1973;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 128849018880L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationLiteralContext durationLiteral() {
			return GetRuleContext<DurationLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayLiteralContext timeOfDayLiteral() {
			return GetRuleContext<TimeOfDayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeLiteralContext dateAndTimeLiteral() {
			return GetRuleContext<DateAndTimeLiteralContext>(0);
		}
		public TimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeLiteralContext timeLiteral() {
		TimeLiteralContext _localctx = new TimeLiteralContext(Context, State);
		EnterRule(_localctx, 398, RULE_timeLiteral);
		try {
			State = 1979;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TIME:
			case LTIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1975;
				durationLiteral();
				}
				break;
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1976;
				timeOfDayLiteral();
				}
				break;
			case DATE:
			case LDATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1977;
				dateLiteral();
				}
				break;
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1978;
				dateAndTimeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DurationLiteralValueContext durationLiteralValue() {
			return GetRuleContext<DurationLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationTypeNameContext durationTypeName() {
			return GetRuleContext<DurationTypeNameContext>(0);
		}
		public DurationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationLiteralContext durationLiteral() {
		DurationLiteralContext _localctx = new DurationLiteralContext(Context, State);
		EnterRule(_localctx, 400, RULE_durationLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1981;
			durationTypeName();
			}
			State = 1982;
			Match(HASH);
			State = 1983;
			durationLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DURATION() { return GetToken(stParser.DURATION, 0); }
		public DurationLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationLiteralValueContext durationLiteralValue() {
		DurationLiteralValueContext _localctx = new DurationLiteralValueContext(Context, State);
		EnterRule(_localctx, 402, RULE_durationLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1985;
			Match(DURATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(stParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTIME() { return GetToken(stParser.LTIME, 0); }
		public DurationTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationTypeNameContext durationTypeName() {
		DurationTypeNameContext _localctx = new DurationTypeNameContext(Context, State);
		EnterRule(_localctx, 404, RULE_durationTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1987;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME || _la==LTIME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayTypeNameContext timeOfDayTypeName() {
			return GetRuleContext<TimeOfDayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayLiteralValueContext timeOfDayLiteralValue() {
			return GetRuleContext<TimeOfDayLiteralValueContext>(0);
		}
		public TimeOfDayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayLiteralContext timeOfDayLiteral() {
		TimeOfDayLiteralContext _localctx = new TimeOfDayLiteralContext(Context, State);
		EnterRule(_localctx, 406, RULE_timeOfDayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1989;
			timeOfDayTypeName();
			State = 1990;
			Match(HASH);
			State = 1991;
			timeOfDayLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCK_TIME() { return GetToken(stParser.CLOCK_TIME, 0); }
		public TimeOfDayLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayLiteralValueContext timeOfDayLiteralValue() {
		TimeOfDayLiteralValueContext _localctx = new TimeOfDayLiteralValueContext(Context, State);
		EnterRule(_localctx, 408, RULE_timeOfDayLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1993;
			Match(CLOCK_TIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_OF_DAY() { return GetToken(stParser.TIME_OF_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTIME_OF_DAY() { return GetToken(stParser.LTIME_OF_DAY, 0); }
		public TimeOfDayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayTypeNameContext timeOfDayTypeName() {
		TimeOfDayTypeNameContext _localctx = new TimeOfDayTypeNameContext(Context, State);
		EnterRule(_localctx, 410, RULE_timeOfDayTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1995;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME_OF_DAY || _la==LTIME_OF_DAY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralValueContext dateLiteralValue() {
			return GetRuleContext<DateLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTypeNameContext dateTypeName() {
			return GetRuleContext<DateTypeNameContext>(0);
		}
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(Context, State);
		EnterRule(_localctx, 412, RULE_dateLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1997;
			dateTypeName();
			}
			State = 1998;
			Match(HASH);
			State = 1999;
			dateLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_VALUE() { return GetToken(stParser.DATE_VALUE, 0); }
		public DateLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralValueContext dateLiteralValue() {
		DateLiteralValueContext _localctx = new DateLiteralValueContext(Context, State);
		EnterRule(_localctx, 414, RULE_dateLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001;
			Match(DATE_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(stParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDATE() { return GetToken(stParser.LDATE, 0); }
		public DateTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTypeNameContext dateTypeName() {
		DateTypeNameContext _localctx = new DateTypeNameContext(Context, State);
		EnterRule(_localctx, 416, RULE_dateTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2003;
			_la = TokenStream.LA(1);
			if ( !(_la==DATE || _la==LDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeLiteralValueContext dateAndTimeLiteralValue() {
			return GetRuleContext<DateAndTimeLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeTypeNameContext dateAndTimeTypeName() {
			return GetRuleContext<DateAndTimeTypeNameContext>(0);
		}
		public DateAndTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeLiteralContext dateAndTimeLiteral() {
		DateAndTimeLiteralContext _localctx = new DateAndTimeLiteralContext(Context, State);
		EnterRule(_localctx, 418, RULE_dateAndTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2005;
			dateAndTimeTypeName();
			}
			State = 2006;
			Match(HASH);
			State = 2007;
			dateAndTimeLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_TIME_VALUE() { return GetToken(stParser.DATE_TIME_VALUE, 0); }
		public DateAndTimeLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeLiteralValueContext dateAndTimeLiteralValue() {
		DateAndTimeLiteralValueContext _localctx = new DateAndTimeLiteralValueContext(Context, State);
		EnterRule(_localctx, 420, RULE_dateAndTimeLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2009;
			Match(DATE_TIME_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_AND_TIME() { return GetToken(stParser.DATE_AND_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDATE_AND_TIME() { return GetToken(stParser.LDATE_AND_TIME, 0); }
		public DateAndTimeTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeTypeNameContext dateAndTimeTypeName() {
		DateAndTimeTypeNameContext _localctx = new DateAndTimeTypeNameContext(Context, State);
		EnterRule(_localctx, 422, RULE_dateAndTimeTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2011;
			_la = TokenStream.LA(1);
			if ( !(_la==DATE_AND_TIME || _la==LDATE_AND_TIME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_VARIABLE() { return GetToken(stParser.DIRECT_VARIABLE, 0); }
		public DirectVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectVariableContext directVariable() {
		DirectVariableContext _localctx = new DirectVariableContext(Context, State);
		EnterRule(_localctx, 424, RULE_directVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2013;
			Match(DIRECT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 179: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,165,2016,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		1,0,1,0,5,0,429,8,0,10,0,12,0,432,9,0,1,0,1,0,1,0,1,0,1,0,3,0,439,8,0,
		4,0,441,8,0,11,0,12,0,442,1,1,5,1,446,8,1,10,1,12,1,449,9,1,1,1,1,1,1,
		1,3,1,454,8,1,1,2,1,2,3,2,458,8,2,1,2,1,2,5,2,462,8,2,10,2,12,2,465,9,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,4,3,476,8,3,11,3,12,3,477,1,4,1,
		4,1,4,5,4,483,8,4,10,4,12,4,486,9,4,1,5,1,5,1,6,1,6,1,6,1,6,5,6,494,8,
		6,10,6,12,6,497,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,508,8,7,10,
		7,12,7,511,9,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,5,9,521,8,9,10,9,12,9,524,
		9,9,1,9,1,9,1,10,1,10,1,10,1,10,4,10,532,8,10,11,10,12,10,533,1,10,1,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,545,8,11,1,12,1,12,1,12,1,12,1,
		13,1,13,1,14,1,14,1,14,3,14,556,8,14,1,15,1,15,3,15,560,8,15,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,3,16,570,8,16,1,17,1,17,1,17,5,17,575,8,
		17,10,17,12,17,578,9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,587,8,
		18,1,18,1,18,3,18,591,8,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,22,
		1,22,1,22,3,22,604,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,614,
		8,24,1,25,1,25,1,25,5,25,619,8,25,10,25,12,25,622,9,25,1,25,1,25,1,26,
		1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,3,29,637,8,29,1,29,1,
		29,3,29,641,8,29,1,30,1,30,1,31,1,31,1,31,1,31,5,31,649,8,31,10,31,12,
		31,652,9,31,1,31,1,31,1,31,3,31,657,8,31,1,32,1,32,1,32,3,32,662,8,32,
		1,33,1,33,1,34,1,34,3,34,668,8,34,1,35,1,35,1,35,3,35,673,8,35,1,35,1,
		35,1,36,1,36,1,36,1,36,5,36,681,8,36,10,36,12,36,684,9,36,1,36,1,36,1,
		36,3,36,689,8,36,1,36,1,36,3,36,693,8,36,1,37,1,37,1,37,5,37,698,8,37,
		10,37,12,37,701,9,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,40,
		1,40,3,40,714,8,40,1,41,1,41,1,41,1,41,1,41,1,41,5,41,722,8,41,10,41,12,
		41,725,9,41,1,41,1,41,1,41,1,41,3,41,731,8,41,1,42,1,42,1,42,5,42,736,
		8,42,10,42,12,42,739,9,42,1,42,1,42,1,43,1,43,1,43,1,43,5,43,747,8,43,
		10,43,12,43,750,9,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,758,8,44,1,44,
		1,44,3,44,762,8,44,1,45,1,45,1,46,1,46,1,46,1,46,3,46,770,8,46,1,47,1,
		47,1,47,1,47,1,48,1,48,1,49,1,49,3,49,780,8,49,1,50,1,50,3,50,784,8,50,
		1,50,1,50,1,50,4,50,789,8,50,11,50,12,50,790,1,50,1,50,1,51,1,51,1,51,
		3,51,798,8,51,3,51,800,8,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,808,8,51,
		1,52,1,52,1,53,1,53,1,53,3,53,815,8,53,1,54,1,54,1,55,1,55,1,56,1,56,1,
		56,1,57,1,57,1,57,3,57,827,8,57,1,58,1,58,1,58,5,58,832,8,58,10,58,12,
		58,835,9,58,1,58,1,58,1,59,1,59,1,59,1,59,5,59,843,8,59,10,59,12,59,846,
		9,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,857,8,60,1,61,1,
		61,1,61,1,61,1,61,3,61,864,8,61,1,62,1,62,1,63,1,63,1,63,5,63,871,8,63,
		10,63,12,63,874,9,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,1,66,1,66,
		1,66,3,66,887,8,66,1,67,4,67,890,8,67,11,67,12,67,891,1,67,1,67,1,68,1,
		68,3,68,898,8,68,1,69,1,69,1,69,1,69,1,69,3,69,905,8,69,1,69,1,69,1,70,
		1,70,1,70,5,70,912,8,70,10,70,12,70,915,9,70,1,70,1,70,1,71,1,71,1,71,
		1,71,1,71,3,71,924,8,71,1,72,1,72,1,73,1,73,4,73,930,8,73,11,73,12,73,
		931,1,74,1,74,1,75,1,75,1,75,5,75,939,8,75,10,75,12,75,942,9,75,1,75,1,
		75,1,76,1,76,3,76,948,8,76,1,76,1,76,5,76,952,8,76,10,76,12,76,955,9,76,
		1,76,1,76,1,76,3,76,960,8,76,3,76,962,8,76,1,76,1,76,3,76,966,8,76,1,76,
		1,76,1,76,1,76,5,76,972,8,76,10,76,12,76,975,9,76,1,76,5,76,978,8,76,10,
		76,12,76,981,9,76,1,76,1,76,1,76,1,77,1,77,1,77,3,77,989,8,77,1,78,1,78,
		3,78,993,8,78,1,78,1,78,1,78,5,78,998,8,78,10,78,12,78,1001,9,78,1,78,
		1,78,1,79,1,79,3,79,1007,8,79,1,80,1,80,3,80,1011,8,80,1,80,1,80,1,80,
		5,80,1016,8,80,10,80,12,80,1019,9,80,1,80,1,80,1,81,1,81,3,81,1025,8,81,
		1,82,1,82,1,82,3,82,1030,8,82,1,83,1,83,1,83,3,83,1035,8,83,1,83,1,83,
		1,83,5,83,1040,8,83,10,83,12,83,1043,9,83,1,83,1,83,1,84,1,84,1,85,1,85,
		1,85,3,85,1052,8,85,1,85,3,85,1055,8,85,1,85,1,85,1,85,3,85,1060,8,85,
		1,85,1,85,1,85,5,85,1065,8,85,10,85,12,85,1068,9,85,1,85,1,85,1,85,1,86,
		1,86,1,87,1,87,3,87,1077,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
		1,88,3,88,1088,8,88,1,89,1,89,3,89,1092,8,89,1,90,1,90,1,90,1,90,1,90,
		4,90,1099,8,90,11,90,12,90,1100,3,90,1103,8,90,1,90,1,90,3,90,1107,8,90,
		1,91,1,91,3,91,1111,8,91,1,92,1,92,1,93,1,93,1,93,4,93,1118,8,93,11,93,
		12,93,1119,1,94,1,94,1,94,1,94,5,94,1126,8,94,10,94,12,94,1129,9,94,1,
		94,1,94,1,95,1,95,1,96,1,96,1,96,1,97,1,97,1,98,1,98,3,98,1142,8,98,1,
		98,1,98,1,98,5,98,1147,8,98,10,98,12,98,1150,9,98,1,98,1,98,1,99,1,99,
		3,99,1156,8,99,1,100,1,100,1,100,1,100,1,100,3,100,1163,8,100,1,100,1,
		100,1,100,1,100,3,100,1169,8,100,1,101,1,101,1,101,1,101,1,102,1,102,1,
		102,1,102,1,103,1,103,1,103,5,103,1182,8,103,10,103,12,103,1185,9,103,
		1,104,1,104,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,5,106,
		1198,8,106,10,106,12,106,1201,9,106,1,106,1,106,1,106,1,106,1,107,1,107,
		1,107,1,107,1,108,1,108,1,108,1,108,1,109,1,109,1,109,5,109,1218,8,109,
		10,109,12,109,1221,9,109,1,109,1,109,1,109,1,110,1,110,1,110,3,110,1229,
		8,110,1,111,1,111,1,112,1,112,1,112,5,112,1236,8,112,10,112,12,112,1239,
		9,112,1,112,1,112,5,112,1243,8,112,10,112,12,112,1246,9,112,1,113,1,113,
		3,113,1250,8,113,1,113,1,113,1,113,5,113,1255,8,113,10,113,12,113,1258,
		9,113,1,113,1,113,1,114,1,114,3,114,1264,8,114,1,115,1,115,1,115,1,115,
		5,115,1270,8,115,10,115,12,115,1273,9,115,1,115,1,115,1,116,1,116,1,116,
		3,116,1280,8,116,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1288,8,117,
		1,118,1,118,1,118,1,118,1,119,1,119,1,119,1,119,1,120,1,120,3,120,1300,
		8,120,1,120,3,120,1303,8,120,1,120,1,120,1,120,5,120,1308,8,120,10,120,
		12,120,1311,9,120,1,120,1,120,1,121,1,121,1,121,3,121,1318,8,121,1,121,
		1,121,1,121,5,121,1323,8,121,10,121,12,121,1326,9,121,1,121,1,121,1,122,
		1,122,3,122,1332,8,122,1,122,1,122,1,122,5,122,1337,8,122,10,122,12,122,
		1340,9,122,1,122,1,122,1,123,3,123,1345,8,123,1,123,1,123,1,123,1,123,
		1,124,1,124,1,124,1,124,3,124,1355,8,124,1,124,1,124,5,124,1359,8,124,
		10,124,12,124,1362,9,124,1,124,1,124,1,125,1,125,3,125,1368,8,125,1,125,
		1,125,1,125,5,125,1373,8,125,10,125,12,125,1376,9,125,1,125,1,125,1,126,
		1,126,1,126,1,126,1,126,1,126,1,126,3,126,1387,8,126,1,127,1,127,1,128,
		1,128,3,128,1393,8,128,1,128,1,128,1,128,5,128,1398,8,128,10,128,12,128,
		1401,9,128,1,128,1,128,1,129,1,129,1,129,1,129,3,129,1409,8,129,1,130,
		1,130,1,130,5,130,1414,8,130,10,130,12,130,1417,9,130,1,130,1,130,1,130,
		3,130,1422,8,130,1,131,1,131,1,131,1,131,1,131,3,131,1429,8,131,1,132,
		1,132,3,132,1433,8,132,1,133,1,133,1,133,1,133,1,134,1,134,1,134,1,134,
		3,134,1443,8,134,1,134,1,134,3,134,1447,8,134,1,135,1,135,1,135,1,135,
		1,136,1,136,1,136,1,136,3,136,1457,8,136,1,136,1,136,3,136,1461,8,136,
		1,137,1,137,3,137,1465,8,137,1,137,5,137,1468,8,137,10,137,12,137,1471,
		9,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,139,1,139,
		1,139,1,139,1,139,1,139,1,139,3,139,1489,8,139,3,139,1491,8,139,1,140,
		1,140,1,140,1,140,3,140,1497,8,140,1,140,5,140,1500,8,140,10,140,12,140,
		1503,9,140,1,140,1,140,1,140,5,140,1508,8,140,10,140,12,140,1511,9,140,
		1,140,1,140,1,140,1,141,1,141,1,141,3,141,1519,8,141,1,142,1,142,3,142,
		1523,8,142,1,143,1,143,1,144,1,144,3,144,1529,8,144,1,144,1,144,5,144,
		1533,8,144,10,144,12,144,1536,9,144,1,144,1,144,3,144,1540,8,144,1,144,
		1,144,3,144,1544,8,144,1,144,1,144,5,144,1548,8,144,10,144,12,144,1551,
		9,144,1,144,5,144,1554,8,144,10,144,12,144,1557,9,144,1,144,1,144,1,145,
		1,145,1,146,1,146,1,146,5,146,1566,8,146,10,146,12,146,1569,9,146,1,146,
		1,146,1,147,1,147,1,148,1,148,1,148,5,148,1578,8,148,10,148,12,148,1581,
		9,148,1,148,1,148,5,148,1585,8,148,10,148,12,148,1588,9,148,1,149,1,149,
		1,150,1,150,1,150,5,150,1595,8,150,10,150,12,150,1598,9,150,1,150,1,150,
		3,150,1602,8,150,1,150,5,150,1605,8,150,10,150,12,150,1608,9,150,1,150,
		1,150,1,151,1,151,1,152,1,152,1,152,5,152,1617,8,152,10,152,12,152,1620,
		9,152,1,153,1,153,1,153,5,153,1625,8,153,10,153,12,153,1628,9,153,1,153,
		1,153,1,154,1,154,1,154,1,154,3,154,1636,8,154,1,154,5,154,1639,8,154,
		10,154,12,154,1642,9,154,1,154,1,154,1,155,1,155,1,155,3,155,1649,8,155,
		1,156,1,156,1,156,1,156,3,156,1655,8,156,1,157,3,157,1658,8,157,1,157,
		5,157,1661,8,157,10,157,12,157,1664,9,157,1,158,1,158,1,158,1,158,3,158,
		1670,8,158,1,159,1,159,1,159,1,159,1,159,1,159,3,159,1678,8,159,1,160,
		1,160,3,160,1682,8,160,1,160,1,160,1,160,1,160,3,160,1688,8,160,1,161,
		1,161,1,161,1,161,1,161,1,161,3,161,1696,8,161,1,162,1,162,1,162,1,162,
		1,162,5,162,1703,8,162,10,162,12,162,1706,9,162,3,162,1708,8,162,1,162,
		1,162,1,163,1,163,1,163,5,163,1715,8,163,10,163,12,163,1718,9,163,1,163,
		1,163,1,164,1,164,1,165,1,165,1,165,3,165,1727,8,165,1,165,1,165,3,165,
		1731,8,165,1,165,1,165,4,165,1735,8,165,11,165,12,165,1736,1,165,1,165,
		3,165,1741,8,165,1,165,1,165,1,165,1,165,5,165,1747,8,165,10,165,12,165,
		1750,9,165,3,165,1752,8,165,1,165,1,165,1,166,1,166,1,166,3,166,1759,8,
		166,1,166,1,166,1,166,3,166,1764,8,166,1,166,1,166,1,166,1,166,3,166,1770,
		8,166,1,167,1,167,3,167,1774,8,167,1,168,1,168,1,168,1,168,1,168,1,168,
		1,168,1,168,1,168,5,168,1785,8,168,10,168,12,168,1788,9,168,1,168,1,168,
		3,168,1792,8,168,1,168,1,168,1,169,1,169,1,169,1,169,4,169,1800,8,169,
		11,169,12,169,1801,1,169,1,169,3,169,1806,8,169,1,169,1,169,1,170,1,170,
		1,170,1,170,1,171,1,171,1,171,5,171,1817,8,171,10,171,12,171,1820,9,171,
		1,172,1,172,3,172,1824,8,172,1,173,1,173,1,173,1,173,1,173,3,173,1831,
		8,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,175,1,175,1,176,
		1,176,1,176,1,176,1,176,3,176,1848,8,176,1,177,1,177,1,177,1,177,1,177,
		1,177,1,178,1,178,1,178,1,178,1,178,1,178,1,179,1,179,1,179,1,179,1,179,
		3,179,1867,8,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,3,179,
		1877,8,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
		1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,5,179,
		1900,8,179,10,179,12,179,1903,9,179,1,180,1,180,1,181,1,181,1,182,1,182,
		3,182,1911,8,182,1,183,1,183,1,183,1,183,1,183,1,183,3,183,1919,8,183,
		1,184,1,184,1,184,3,184,1924,8,184,1,184,1,184,1,185,1,185,1,186,1,186,
		1,187,1,187,1,187,3,187,1935,8,187,1,187,1,187,1,188,1,188,1,189,1,189,
		1,190,1,190,1,190,3,190,1946,8,190,1,190,1,190,1,191,1,191,1,192,1,192,
		1,193,1,193,1,193,3,193,1957,8,193,1,193,1,193,1,194,1,194,1,195,1,195,
		1,196,1,196,1,196,3,196,1968,8,196,1,196,1,196,1,197,1,197,1,198,1,198,
		1,199,1,199,1,199,1,199,3,199,1980,8,199,1,200,1,200,1,200,1,200,1,201,
		1,201,1,202,1,202,1,203,1,203,1,203,1,203,1,204,1,204,1,205,1,205,1,206,
		1,206,1,206,1,206,1,207,1,207,1,208,1,208,1,209,1,209,1,209,1,209,1,210,
		1,210,1,211,1,211,1,212,1,212,1,212,0,1,358,213,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
		110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
		146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
		182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
		218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
		254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
		290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
		326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,
		362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,
		398,400,402,404,406,408,410,412,414,416,418,420,422,424,0,25,1,0,33,34,
		1,0,10,11,2,0,1,1,11,11,1,0,71,72,1,0,60,61,2,0,60,61,64,64,2,0,60,60,
		64,64,1,0,83,86,2,0,127,128,141,141,2,0,129,129,131,132,1,0,127,128,1,
		0,133,138,2,0,139,139,143,143,1,0,10,14,1,0,16,23,1,0,11,14,1,0,26,29,
		1,0,24,25,2,0,11,11,15,15,1,0,3,4,1,0,33,36,1,0,37,38,1,0,39,40,1,0,41,
		42,1,0,43,44,2103,0,440,1,0,0,0,2,447,1,0,0,0,4,455,1,0,0,0,6,475,1,0,
		0,0,8,479,1,0,0,0,10,487,1,0,0,0,12,489,1,0,0,0,14,500,1,0,0,0,16,515,
		1,0,0,0,18,522,1,0,0,0,20,527,1,0,0,0,22,544,1,0,0,0,24,546,1,0,0,0,26,
		550,1,0,0,0,28,552,1,0,0,0,30,559,1,0,0,0,32,569,1,0,0,0,34,576,1,0,0,
		0,36,590,1,0,0,0,38,592,1,0,0,0,40,594,1,0,0,0,42,598,1,0,0,0,44,600,1,
		0,0,0,46,605,1,0,0,0,48,613,1,0,0,0,50,620,1,0,0,0,52,625,1,0,0,0,54,629,
		1,0,0,0,56,631,1,0,0,0,58,633,1,0,0,0,60,642,1,0,0,0,62,644,1,0,0,0,64,
		658,1,0,0,0,66,663,1,0,0,0,68,667,1,0,0,0,70,672,1,0,0,0,72,688,1,0,0,
		0,74,699,1,0,0,0,76,704,1,0,0,0,78,708,1,0,0,0,80,710,1,0,0,0,82,730,1,
		0,0,0,84,737,1,0,0,0,86,742,1,0,0,0,88,761,1,0,0,0,90,763,1,0,0,0,92,769,
		1,0,0,0,94,771,1,0,0,0,96,775,1,0,0,0,98,779,1,0,0,0,100,781,1,0,0,0,102,
		794,1,0,0,0,104,809,1,0,0,0,106,811,1,0,0,0,108,816,1,0,0,0,110,818,1,
		0,0,0,112,820,1,0,0,0,114,823,1,0,0,0,116,833,1,0,0,0,118,838,1,0,0,0,
		120,849,1,0,0,0,122,858,1,0,0,0,124,865,1,0,0,0,126,872,1,0,0,0,128,877,
		1,0,0,0,130,881,1,0,0,0,132,883,1,0,0,0,134,889,1,0,0,0,136,897,1,0,0,
		0,138,899,1,0,0,0,140,913,1,0,0,0,142,918,1,0,0,0,144,925,1,0,0,0,146,
		927,1,0,0,0,148,933,1,0,0,0,150,940,1,0,0,0,152,945,1,0,0,0,154,988,1,
		0,0,0,156,990,1,0,0,0,158,1006,1,0,0,0,160,1008,1,0,0,0,162,1024,1,0,0,
		0,164,1029,1,0,0,0,166,1031,1,0,0,0,168,1046,1,0,0,0,170,1048,1,0,0,0,
		172,1072,1,0,0,0,174,1076,1,0,0,0,176,1087,1,0,0,0,178,1091,1,0,0,0,180,
		1102,1,0,0,0,182,1110,1,0,0,0,184,1112,1,0,0,0,186,1114,1,0,0,0,188,1121,
		1,0,0,0,190,1132,1,0,0,0,192,1134,1,0,0,0,194,1137,1,0,0,0,196,1139,1,
		0,0,0,198,1155,1,0,0,0,200,1168,1,0,0,0,202,1170,1,0,0,0,204,1174,1,0,
		0,0,206,1178,1,0,0,0,208,1186,1,0,0,0,210,1188,1,0,0,0,212,1192,1,0,0,
		0,214,1206,1,0,0,0,216,1210,1,0,0,0,218,1214,1,0,0,0,220,1225,1,0,0,0,
		222,1230,1,0,0,0,224,1237,1,0,0,0,226,1247,1,0,0,0,228,1263,1,0,0,0,230,
		1265,1,0,0,0,232,1279,1,0,0,0,234,1281,1,0,0,0,236,1289,1,0,0,0,238,1293,
		1,0,0,0,240,1297,1,0,0,0,242,1314,1,0,0,0,244,1329,1,0,0,0,246,1344,1,
		0,0,0,248,1350,1,0,0,0,250,1365,1,0,0,0,252,1379,1,0,0,0,254,1388,1,0,
		0,0,256,1390,1,0,0,0,258,1404,1,0,0,0,260,1421,1,0,0,0,262,1428,1,0,0,
		0,264,1432,1,0,0,0,266,1434,1,0,0,0,268,1438,1,0,0,0,270,1448,1,0,0,0,
		272,1452,1,0,0,0,274,1462,1,0,0,0,276,1474,1,0,0,0,278,1490,1,0,0,0,280,
		1492,1,0,0,0,282,1518,1,0,0,0,284,1522,1,0,0,0,286,1524,1,0,0,0,288,1526,
		1,0,0,0,290,1560,1,0,0,0,292,1567,1,0,0,0,294,1572,1,0,0,0,296,1579,1,
		0,0,0,298,1589,1,0,0,0,300,1591,1,0,0,0,302,1611,1,0,0,0,304,1613,1,0,
		0,0,306,1626,1,0,0,0,308,1631,1,0,0,0,310,1645,1,0,0,0,312,1654,1,0,0,
		0,314,1662,1,0,0,0,316,1669,1,0,0,0,318,1677,1,0,0,0,320,1681,1,0,0,0,
		322,1695,1,0,0,0,324,1697,1,0,0,0,326,1716,1,0,0,0,328,1721,1,0,0,0,330,
		1740,1,0,0,0,332,1769,1,0,0,0,334,1773,1,0,0,0,336,1775,1,0,0,0,338,1795,
		1,0,0,0,340,1809,1,0,0,0,342,1813,1,0,0,0,344,1823,1,0,0,0,346,1830,1,
		0,0,0,348,1832,1,0,0,0,350,1840,1,0,0,0,352,1842,1,0,0,0,354,1849,1,0,
		0,0,356,1855,1,0,0,0,358,1876,1,0,0,0,360,1904,1,0,0,0,362,1906,1,0,0,
		0,364,1908,1,0,0,0,366,1918,1,0,0,0,368,1923,1,0,0,0,370,1927,1,0,0,0,
		372,1929,1,0,0,0,374,1934,1,0,0,0,376,1938,1,0,0,0,378,1940,1,0,0,0,380,
		1945,1,0,0,0,382,1949,1,0,0,0,384,1951,1,0,0,0,386,1956,1,0,0,0,388,1960,
		1,0,0,0,390,1962,1,0,0,0,392,1967,1,0,0,0,394,1971,1,0,0,0,396,1973,1,
		0,0,0,398,1979,1,0,0,0,400,1981,1,0,0,0,402,1985,1,0,0,0,404,1987,1,0,
		0,0,406,1989,1,0,0,0,408,1993,1,0,0,0,410,1995,1,0,0,0,412,1997,1,0,0,
		0,414,2001,1,0,0,0,416,2003,1,0,0,0,418,2005,1,0,0,0,420,2009,1,0,0,0,
		422,2011,1,0,0,0,424,2013,1,0,0,0,426,441,3,2,1,0,427,429,3,12,6,0,428,
		427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,438,1,
		0,0,0,432,430,1,0,0,0,433,439,3,4,2,0,434,439,3,256,128,0,435,439,3,20,
		10,0,436,439,3,288,144,0,437,439,3,300,150,0,438,433,1,0,0,0,438,434,1,
		0,0,0,438,435,1,0,0,0,438,436,1,0,0,0,438,437,1,0,0,0,439,441,1,0,0,0,
		440,426,1,0,0,0,440,430,1,0,0,0,441,442,1,0,0,0,442,440,1,0,0,0,442,443,
		1,0,0,0,443,1,1,0,0,0,444,446,3,12,6,0,445,444,1,0,0,0,446,449,1,0,0,0,
		447,445,1,0,0,0,447,448,1,0,0,0,448,453,1,0,0,0,449,447,1,0,0,0,450,454,
		3,280,140,0,451,454,3,152,76,0,452,454,3,14,7,0,453,450,1,0,0,0,453,451,
		1,0,0,0,453,452,1,0,0,0,454,3,1,0,0,0,455,457,5,105,0,0,456,458,5,86,0,
		0,457,456,1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,459,463,3,8,4,0,460,
		462,3,12,6,0,461,460,1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,
		0,0,0,464,466,1,0,0,0,465,463,1,0,0,0,466,467,3,6,3,0,467,468,5,106,0,
		0,468,5,1,0,0,0,469,476,3,20,10,0,470,476,3,280,140,0,471,476,3,152,76,
		0,472,476,3,288,144,0,473,476,3,300,150,0,474,476,3,4,2,0,475,469,1,0,
		0,0,475,470,1,0,0,0,475,471,1,0,0,0,475,472,1,0,0,0,475,473,1,0,0,0,475,
		474,1,0,0,0,476,477,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,7,1,0,
		0,0,479,484,3,10,5,0,480,481,5,154,0,0,481,483,3,10,5,0,482,480,1,0,0,
		0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,9,1,0,0,0,486,484,
		1,0,0,0,487,488,5,160,0,0,488,11,1,0,0,0,489,490,5,107,0,0,490,495,3,8,
		4,0,491,492,5,151,0,0,492,494,3,8,4,0,493,491,1,0,0,0,494,497,1,0,0,0,
		495,493,1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,495,1,0,0,0,498,499,
		5,153,0,0,499,13,1,0,0,0,500,501,5,89,0,0,501,509,3,16,8,0,502,508,3,282,
		141,0,503,508,3,284,142,0,504,508,3,248,124,0,505,508,3,164,82,0,506,508,
		3,244,122,0,507,502,1,0,0,0,507,503,1,0,0,0,507,504,1,0,0,0,507,505,1,
		0,0,0,507,506,1,0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,
		510,512,1,0,0,0,511,509,1,0,0,0,512,513,3,314,157,0,513,514,5,90,0,0,514,
		15,1,0,0,0,515,516,5,160,0,0,516,17,1,0,0,0,517,518,3,10,5,0,518,519,5,
		154,0,0,519,521,1,0,0,0,520,517,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,
		0,522,523,1,0,0,0,523,525,1,0,0,0,524,522,1,0,0,0,525,526,3,16,8,0,526,
		19,1,0,0,0,527,531,5,45,0,0,528,529,3,22,11,0,529,530,5,153,0,0,530,532,
		1,0,0,0,531,528,1,0,0,0,532,533,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,
		0,534,535,1,0,0,0,535,536,5,46,0,0,536,21,1,0,0,0,537,545,3,24,12,0,538,
		545,3,40,20,0,539,545,3,58,29,0,540,545,3,76,38,0,541,545,3,94,47,0,542,
		545,3,122,61,0,543,545,3,128,64,0,544,537,1,0,0,0,544,538,1,0,0,0,544,
		539,1,0,0,0,544,540,1,0,0,0,544,541,1,0,0,0,544,542,1,0,0,0,544,543,1,
		0,0,0,545,23,1,0,0,0,546,547,3,26,13,0,547,548,5,152,0,0,548,549,3,28,
		14,0,549,25,1,0,0,0,550,551,5,160,0,0,551,27,1,0,0,0,552,555,3,30,15,0,
		553,554,5,144,0,0,554,556,3,358,179,0,555,553,1,0,0,0,555,556,1,0,0,0,
		556,29,1,0,0,0,557,560,3,32,16,0,558,560,3,34,17,0,559,557,1,0,0,0,559,
		558,1,0,0,0,560,31,1,0,0,0,561,570,3,372,186,0,562,570,3,384,192,0,563,
		570,3,390,195,0,564,570,3,378,189,0,565,570,3,36,18,0,566,570,3,416,208,
		0,567,570,3,422,211,0,568,570,3,404,202,0,569,561,1,0,0,0,569,562,1,0,
		0,0,569,563,1,0,0,0,569,564,1,0,0,0,569,565,1,0,0,0,569,566,1,0,0,0,569,
		567,1,0,0,0,569,568,1,0,0,0,570,33,1,0,0,0,571,572,3,10,5,0,572,573,5,
		154,0,0,573,575,1,0,0,0,574,571,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,
		0,576,577,1,0,0,0,577,579,1,0,0,0,578,576,1,0,0,0,579,580,3,26,13,0,580,
		35,1,0,0,0,581,586,7,0,0,0,582,583,5,149,0,0,583,584,3,38,19,0,584,585,
		5,150,0,0,585,587,1,0,0,0,586,582,1,0,0,0,586,587,1,0,0,0,587,591,1,0,
		0,0,588,591,5,35,0,0,589,591,5,36,0,0,590,581,1,0,0,0,590,588,1,0,0,0,
		590,589,1,0,0,0,591,37,1,0,0,0,592,593,5,11,0,0,593,39,1,0,0,0,594,595,
		3,42,21,0,595,596,5,152,0,0,596,597,3,44,22,0,597,41,1,0,0,0,598,599,5,
		160,0,0,599,43,1,0,0,0,600,603,3,48,24,0,601,602,5,144,0,0,602,604,3,46,
		23,0,603,601,1,0,0,0,603,604,1,0,0,0,604,45,1,0,0,0,605,606,7,1,0,0,606,
		47,1,0,0,0,607,608,3,372,186,0,608,609,5,147,0,0,609,610,3,52,26,0,610,
		611,5,148,0,0,611,614,1,0,0,0,612,614,3,50,25,0,613,607,1,0,0,0,613,612,
		1,0,0,0,614,49,1,0,0,0,615,616,3,10,5,0,616,617,5,154,0,0,617,619,1,0,
		0,0,618,615,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,
		623,1,0,0,0,622,620,1,0,0,0,623,624,3,42,21,0,624,51,1,0,0,0,625,626,3,
		54,27,0,626,627,5,155,0,0,627,628,3,56,28,0,628,53,1,0,0,0,629,630,3,358,
		179,0,630,55,1,0,0,0,631,632,3,358,179,0,632,57,1,0,0,0,633,634,3,60,30,
		0,634,640,5,152,0,0,635,637,3,32,16,0,636,635,1,0,0,0,636,637,1,0,0,0,
		637,638,1,0,0,0,638,641,3,62,31,0,639,641,3,72,36,0,640,636,1,0,0,0,640,
		639,1,0,0,0,641,59,1,0,0,0,642,643,5,160,0,0,643,61,1,0,0,0,644,645,5,
		147,0,0,645,650,3,64,32,0,646,647,5,151,0,0,647,649,3,64,32,0,648,646,
		1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,
		0,652,650,1,0,0,0,653,656,5,148,0,0,654,655,5,144,0,0,655,657,3,70,35,
		0,656,654,1,0,0,0,656,657,1,0,0,0,657,63,1,0,0,0,658,661,3,66,33,0,659,
		660,5,144,0,0,660,662,3,68,34,0,661,659,1,0,0,0,661,662,1,0,0,0,662,65,
		1,0,0,0,663,664,5,160,0,0,664,67,1,0,0,0,665,668,3,368,184,0,666,668,3,
		358,179,0,667,665,1,0,0,0,667,666,1,0,0,0,668,69,1,0,0,0,669,670,3,60,
		30,0,670,671,5,156,0,0,671,673,1,0,0,0,672,669,1,0,0,0,672,673,1,0,0,0,
		673,674,1,0,0,0,674,675,3,66,33,0,675,71,1,0,0,0,676,677,5,147,0,0,677,
		682,3,66,33,0,678,679,5,151,0,0,679,681,3,66,33,0,680,678,1,0,0,0,681,
		684,1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,685,1,0,0,0,684,682,1,
		0,0,0,685,686,5,148,0,0,686,689,1,0,0,0,687,689,3,74,37,0,688,676,1,0,
		0,0,688,687,1,0,0,0,689,692,1,0,0,0,690,691,5,144,0,0,691,693,3,70,35,
		0,692,690,1,0,0,0,692,693,1,0,0,0,693,73,1,0,0,0,694,695,3,10,5,0,695,
		696,5,154,0,0,696,698,1,0,0,0,697,694,1,0,0,0,698,701,1,0,0,0,699,697,
		1,0,0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,699,1,0,0,0,702,703,3,60,30,
		0,703,75,1,0,0,0,704,705,3,78,39,0,705,706,5,152,0,0,706,707,3,80,40,0,
		707,77,1,0,0,0,708,709,5,160,0,0,709,79,1,0,0,0,710,713,3,82,41,0,711,
		712,5,144,0,0,712,714,3,86,43,0,713,711,1,0,0,0,713,714,1,0,0,0,714,81,
		1,0,0,0,715,731,3,84,42,0,716,717,5,47,0,0,717,718,5,149,0,0,718,723,3,
		52,26,0,719,720,5,151,0,0,720,722,3,52,26,0,721,719,1,0,0,0,722,725,1,
		0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,726,1,0,0,0,725,723,1,0,0,0,
		726,727,5,150,0,0,727,728,5,48,0,0,728,729,3,174,87,0,729,731,1,0,0,0,
		730,715,1,0,0,0,730,716,1,0,0,0,731,83,1,0,0,0,732,733,3,10,5,0,733,734,
		5,154,0,0,734,736,1,0,0,0,735,732,1,0,0,0,736,739,1,0,0,0,737,735,1,0,
		0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,737,1,0,0,0,740,741,3,78,39,0,
		741,85,1,0,0,0,742,743,5,149,0,0,743,748,3,88,44,0,744,745,5,151,0,0,745,
		747,3,88,44,0,746,744,1,0,0,0,747,750,1,0,0,0,748,746,1,0,0,0,748,749,
		1,0,0,0,749,751,1,0,0,0,750,748,1,0,0,0,751,752,5,150,0,0,752,87,1,0,0,
		0,753,762,3,92,46,0,754,755,3,90,45,0,755,757,5,147,0,0,756,758,3,92,46,
		0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,760,5,148,0,0,760,
		762,1,0,0,0,761,753,1,0,0,0,761,754,1,0,0,0,762,89,1,0,0,0,763,764,5,11,
		0,0,764,91,1,0,0,0,765,770,3,358,179,0,766,770,3,70,35,0,767,770,3,118,
		59,0,768,770,3,86,43,0,769,765,1,0,0,0,769,766,1,0,0,0,769,767,1,0,0,0,
		769,768,1,0,0,0,770,93,1,0,0,0,771,772,3,96,48,0,772,773,5,152,0,0,773,
		774,3,98,49,0,774,95,1,0,0,0,775,776,5,160,0,0,776,97,1,0,0,0,777,780,
		3,100,50,0,778,780,3,114,57,0,779,777,1,0,0,0,779,778,1,0,0,0,780,99,1,
		0,0,0,781,783,5,49,0,0,782,784,5,50,0,0,783,782,1,0,0,0,783,784,1,0,0,
		0,784,788,1,0,0,0,785,786,3,102,51,0,786,787,5,153,0,0,787,789,1,0,0,0,
		788,785,1,0,0,0,789,790,1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,792,
		1,0,0,0,792,793,5,51,0,0,793,101,1,0,0,0,794,799,3,104,52,0,795,797,3,
		106,53,0,796,798,3,112,56,0,797,796,1,0,0,0,797,798,1,0,0,0,798,800,1,
		0,0,0,799,795,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,807,5,152,0,
		0,802,808,3,28,14,0,803,808,3,44,22,0,804,808,3,72,36,0,805,808,3,80,40,
		0,806,808,3,114,57,0,807,802,1,0,0,0,807,803,1,0,0,0,807,804,1,0,0,0,807,
		805,1,0,0,0,807,806,1,0,0,0,808,103,1,0,0,0,809,810,5,160,0,0,810,105,
		1,0,0,0,811,814,5,52,0,0,812,815,3,108,54,0,813,815,3,110,55,0,814,812,
		1,0,0,0,814,813,1,0,0,0,815,107,1,0,0,0,816,817,5,1,0,0,817,109,1,0,0,
		0,818,819,5,2,0,0,819,111,1,0,0,0,820,821,5,154,0,0,821,822,7,2,0,0,822,
		113,1,0,0,0,823,826,3,116,58,0,824,825,5,144,0,0,825,827,3,118,59,0,826,
		824,1,0,0,0,826,827,1,0,0,0,827,115,1,0,0,0,828,829,3,10,5,0,829,830,5,
		154,0,0,830,832,1,0,0,0,831,828,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,
		0,833,834,1,0,0,0,834,836,1,0,0,0,835,833,1,0,0,0,836,837,3,96,48,0,837,
		117,1,0,0,0,838,839,5,147,0,0,839,844,3,120,60,0,840,841,5,151,0,0,841,
		843,3,120,60,0,842,840,1,0,0,0,843,846,1,0,0,0,844,842,1,0,0,0,844,845,
		1,0,0,0,845,847,1,0,0,0,846,844,1,0,0,0,847,848,5,148,0,0,848,119,1,0,
		0,0,849,850,3,104,52,0,850,856,5,144,0,0,851,857,3,358,179,0,852,857,3,
		70,35,0,853,857,3,86,43,0,854,857,3,118,59,0,855,857,3,136,68,0,856,851,
		1,0,0,0,856,852,1,0,0,0,856,853,1,0,0,0,856,854,1,0,0,0,856,855,1,0,0,
		0,857,121,1,0,0,0,858,859,3,124,62,0,859,860,5,152,0,0,860,863,3,36,18,
		0,861,862,5,144,0,0,862,864,3,394,197,0,863,861,1,0,0,0,863,864,1,0,0,
		0,864,123,1,0,0,0,865,866,5,160,0,0,866,125,1,0,0,0,867,868,3,10,5,0,868,
		869,5,154,0,0,869,871,1,0,0,0,870,867,1,0,0,0,871,874,1,0,0,0,872,870,
		1,0,0,0,872,873,1,0,0,0,873,875,1,0,0,0,874,872,1,0,0,0,875,876,3,124,
		62,0,876,127,1,0,0,0,877,878,3,130,65,0,878,879,5,152,0,0,879,880,3,132,
		66,0,880,129,1,0,0,0,881,882,5,160,0,0,882,131,1,0,0,0,883,886,3,134,67,
		0,884,885,5,144,0,0,885,887,3,136,68,0,886,884,1,0,0,0,886,887,1,0,0,0,
		887,133,1,0,0,0,888,890,5,53,0,0,889,888,1,0,0,0,890,891,1,0,0,0,891,889,
		1,0,0,0,891,892,1,0,0,0,892,893,1,0,0,0,893,894,3,174,87,0,894,135,1,0,
		0,0,895,898,3,138,69,0,896,898,5,55,0,0,897,895,1,0,0,0,897,896,1,0,0,
		0,898,137,1,0,0,0,899,900,5,54,0,0,900,904,5,147,0,0,901,905,3,180,90,
		0,902,905,3,224,112,0,903,905,3,296,148,0,904,901,1,0,0,0,904,902,1,0,
		0,0,904,903,1,0,0,0,905,906,1,0,0,0,906,907,5,148,0,0,907,139,1,0,0,0,
		908,909,3,10,5,0,909,910,5,154,0,0,910,912,1,0,0,0,911,908,1,0,0,0,912,
		915,1,0,0,0,913,911,1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,913,1,
		0,0,0,916,917,3,130,65,0,917,141,1,0,0,0,918,919,3,144,72,0,919,923,5,
		144,0,0,920,924,3,144,72,0,921,924,3,146,73,0,922,924,3,136,68,0,923,920,
		1,0,0,0,923,921,1,0,0,0,923,922,1,0,0,0,924,143,1,0,0,0,925,926,5,160,
		0,0,926,145,1,0,0,0,927,929,3,144,72,0,928,930,5,157,0,0,929,928,1,0,0,
		0,930,931,1,0,0,0,931,929,1,0,0,0,931,932,1,0,0,0,932,147,1,0,0,0,933,
		934,5,160,0,0,934,149,1,0,0,0,935,936,3,10,5,0,936,937,5,154,0,0,937,939,
		1,0,0,0,938,935,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,
		0,941,943,1,0,0,0,942,940,1,0,0,0,943,944,3,148,74,0,944,151,1,0,0,0,945,
		947,5,70,0,0,946,948,7,3,0,0,947,946,1,0,0,0,947,948,1,0,0,0,948,949,1,
		0,0,0,949,953,3,222,111,0,950,952,3,12,6,0,951,950,1,0,0,0,952,955,1,0,
		0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,961,1,0,0,0,955,953,1,0,0,0,956,
		959,5,73,0,0,957,960,3,150,75,0,958,960,3,292,146,0,959,957,1,0,0,0,959,
		958,1,0,0,0,960,962,1,0,0,0,961,956,1,0,0,0,961,962,1,0,0,0,962,965,1,
		0,0,0,963,964,5,74,0,0,964,966,3,304,152,0,965,963,1,0,0,0,965,966,1,0,
		0,0,966,973,1,0,0,0,967,972,3,154,77,0,968,972,3,284,142,0,969,972,3,248,
		124,0,970,972,3,164,82,0,971,967,1,0,0,0,971,968,1,0,0,0,971,969,1,0,0,
		0,971,970,1,0,0,0,972,975,1,0,0,0,973,971,1,0,0,0,973,974,1,0,0,0,974,
		979,1,0,0,0,975,973,1,0,0,0,976,978,3,170,85,0,977,976,1,0,0,0,978,981,
		1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,982,1,0,0,0,981,979,1,0,0,
		0,982,983,3,168,84,0,983,984,5,75,0,0,984,153,1,0,0,0,985,989,3,156,78,
		0,986,989,3,160,80,0,987,989,3,230,115,0,988,985,1,0,0,0,988,986,1,0,0,
		0,988,987,1,0,0,0,989,155,1,0,0,0,990,992,5,57,0,0,991,993,7,4,0,0,992,
		991,1,0,0,0,992,993,1,0,0,0,993,999,1,0,0,0,994,995,3,158,79,0,995,996,
		5,153,0,0,996,998,1,0,0,0,997,994,1,0,0,0,998,1001,1,0,0,0,999,997,1,0,
		0,0,999,1000,1,0,0,0,1000,1002,1,0,0,0,1001,999,1,0,0,0,1002,1003,5,62,
		0,0,1003,157,1,0,0,0,1004,1007,3,200,100,0,1005,1007,3,214,107,0,1006,
		1004,1,0,0,0,1006,1005,1,0,0,0,1007,159,1,0,0,0,1008,1010,5,58,0,0,1009,
		1011,7,4,0,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1017,1,0,0,0,1012,
		1013,3,162,81,0,1013,1014,5,153,0,0,1014,1016,1,0,0,0,1015,1012,1,0,0,
		0,1016,1019,1,0,0,0,1017,1015,1,0,0,0,1017,1018,1,0,0,0,1018,1020,1,0,
		0,0,1019,1017,1,0,0,0,1020,1021,5,62,0,0,1021,161,1,0,0,0,1022,1025,3,
		200,100,0,1023,1025,3,214,107,0,1024,1022,1,0,0,0,1024,1023,1,0,0,0,1025,
		163,1,0,0,0,1026,1030,3,242,121,0,1027,1030,3,166,83,0,1028,1030,3,274,
		137,0,1029,1026,1,0,0,0,1029,1027,1,0,0,0,1029,1028,1,0,0,0,1030,165,1,
		0,0,0,1031,1032,5,63,0,0,1032,1034,5,61,0,0,1033,1035,3,298,149,0,1034,
		1033,1,0,0,0,1034,1035,1,0,0,0,1035,1041,1,0,0,0,1036,1037,3,200,100,0,
		1037,1038,5,153,0,0,1038,1040,1,0,0,0,1039,1036,1,0,0,0,1040,1043,1,0,
		0,0,1041,1039,1,0,0,0,1041,1042,1,0,0,0,1042,1044,1,0,0,0,1043,1041,1,
		0,0,0,1044,1045,5,62,0,0,1045,167,1,0,0,0,1046,1047,3,314,157,0,1047,169,
		1,0,0,0,1048,1049,5,76,0,0,1049,1051,3,298,149,0,1050,1052,7,3,0,0,1051,
		1050,1,0,0,0,1051,1052,1,0,0,0,1052,1054,1,0,0,0,1053,1055,5,77,0,0,1054,
		1053,1,0,0,0,1054,1055,1,0,0,0,1055,1056,1,0,0,0,1056,1059,3,172,86,0,
		1057,1058,5,152,0,0,1058,1060,3,174,87,0,1059,1057,1,0,0,0,1059,1060,1,
		0,0,0,1060,1066,1,0,0,0,1061,1065,3,282,141,0,1062,1065,3,284,142,0,1063,
		1065,3,248,124,0,1064,1061,1,0,0,0,1064,1062,1,0,0,0,1064,1063,1,0,0,0,
		1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,1069,1,0,0,
		0,1068,1066,1,0,0,0,1069,1070,3,286,143,0,1070,1071,5,78,0,0,1071,171,
		1,0,0,0,1072,1073,5,160,0,0,1073,173,1,0,0,0,1074,1077,3,32,16,0,1075,
		1077,3,176,88,0,1076,1074,1,0,0,0,1076,1075,1,0,0,0,1077,175,1,0,0,0,1078,
		1088,3,34,17,0,1079,1088,3,50,25,0,1080,1088,3,74,37,0,1081,1088,3,84,
		42,0,1082,1088,3,116,58,0,1083,1088,3,126,63,0,1084,1088,3,292,146,0,1085,
		1088,3,140,70,0,1086,1088,3,306,153,0,1087,1078,1,0,0,0,1087,1079,1,0,
		0,0,1087,1080,1,0,0,0,1087,1081,1,0,0,0,1087,1082,1,0,0,0,1087,1083,1,
		0,0,0,1087,1084,1,0,0,0,1087,1085,1,0,0,0,1087,1086,1,0,0,0,1088,177,1,
		0,0,0,1089,1092,3,424,212,0,1090,1092,3,180,90,0,1091,1089,1,0,0,0,1091,
		1090,1,0,0,0,1092,179,1,0,0,0,1093,1094,5,56,0,0,1094,1103,5,154,0,0,1095,
		1096,3,10,5,0,1096,1097,5,154,0,0,1097,1099,1,0,0,0,1098,1095,1,0,0,0,
		1099,1100,1,0,0,0,1100,1098,1,0,0,0,1100,1101,1,0,0,0,1101,1103,1,0,0,
		0,1102,1093,1,0,0,0,1102,1098,1,0,0,0,1102,1103,1,0,0,0,1103,1106,1,0,
		0,0,1104,1107,3,182,91,0,1105,1107,3,186,93,0,1106,1104,1,0,0,0,1106,1105,
		1,0,0,0,1107,181,1,0,0,0,1108,1111,3,184,92,0,1109,1111,3,146,73,0,1110,
		1108,1,0,0,0,1110,1109,1,0,0,0,1111,183,1,0,0,0,1112,1113,5,160,0,0,1113,
		185,1,0,0,0,1114,1117,3,182,91,0,1115,1118,3,188,94,0,1116,1118,3,192,
		96,0,1117,1115,1,0,0,0,1117,1116,1,0,0,0,1118,1119,1,0,0,0,1119,1117,1,
		0,0,0,1119,1120,1,0,0,0,1120,187,1,0,0,0,1121,1122,5,149,0,0,1122,1127,
		3,190,95,0,1123,1124,5,151,0,0,1124,1126,3,190,95,0,1125,1123,1,0,0,0,
		1126,1129,1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,1130,1,0,0,
		0,1129,1127,1,0,0,0,1130,1131,5,150,0,0,1131,189,1,0,0,0,1132,1133,3,358,
		179,0,1133,191,1,0,0,0,1134,1135,5,154,0,0,1135,1136,3,194,97,0,1136,193,
		1,0,0,0,1137,1138,3,182,91,0,1138,195,1,0,0,0,1139,1141,5,57,0,0,1140,
		1142,7,4,0,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1148,1,0,0,0,1143,
		1144,3,198,99,0,1144,1145,5,153,0,0,1145,1147,1,0,0,0,1146,1143,1,0,0,
		0,1147,1150,1,0,0,0,1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,1151,1,0,
		0,0,1150,1148,1,0,0,0,1151,1152,5,62,0,0,1152,197,1,0,0,0,1153,1156,3,
		200,100,0,1154,1156,3,214,107,0,1155,1153,1,0,0,0,1155,1154,1,0,0,0,1156,
		199,1,0,0,0,1157,1158,3,206,103,0,1158,1162,5,152,0,0,1159,1163,3,28,14,
		0,1160,1163,3,264,132,0,1161,1163,3,132,66,0,1162,1159,1,0,0,0,1162,1160,
		1,0,0,0,1162,1161,1,0,0,0,1163,1169,1,0,0,0,1164,1169,3,210,105,0,1165,
		1169,3,216,108,0,1166,1169,3,220,110,0,1167,1169,3,310,155,0,1168,1157,
		1,0,0,0,1168,1164,1,0,0,0,1168,1165,1,0,0,0,1168,1166,1,0,0,0,1168,1167,
		1,0,0,0,1169,201,1,0,0,0,1170,1171,3,206,103,0,1171,1172,5,152,0,0,1172,
		1173,3,134,67,0,1173,203,1,0,0,0,1174,1175,3,206,103,0,1175,1176,5,152,
		0,0,1176,1177,3,306,153,0,1177,205,1,0,0,0,1178,1183,3,208,104,0,1179,
		1180,5,151,0,0,1180,1182,3,208,104,0,1181,1179,1,0,0,0,1182,1185,1,0,0,
		0,1183,1181,1,0,0,0,1183,1184,1,0,0,0,1184,207,1,0,0,0,1185,1183,1,0,0,
		0,1186,1187,5,160,0,0,1187,209,1,0,0,0,1188,1189,3,206,103,0,1189,1190,
		5,152,0,0,1190,1191,3,80,40,0,1191,211,1,0,0,0,1192,1193,5,47,0,0,1193,
		1194,5,149,0,0,1194,1199,5,129,0,0,1195,1196,5,151,0,0,1196,1198,5,129,
		0,0,1197,1195,1,0,0,0,1198,1201,1,0,0,0,1199,1197,1,0,0,0,1199,1200,1,
		0,0,0,1200,1202,1,0,0,0,1201,1199,1,0,0,0,1202,1203,5,150,0,0,1203,1204,
		5,48,0,0,1204,1205,3,174,87,0,1205,213,1,0,0,0,1206,1207,3,206,103,0,1207,
		1208,5,152,0,0,1208,1209,3,212,106,0,1209,215,1,0,0,0,1210,1211,3,206,
		103,0,1211,1212,5,152,0,0,1212,1213,3,114,57,0,1213,217,1,0,0,0,1214,1219,
		3,222,111,0,1215,1216,5,151,0,0,1216,1218,3,222,111,0,1217,1215,1,0,0,
		0,1218,1221,1,0,0,0,1219,1217,1,0,0,0,1219,1220,1,0,0,0,1220,1222,1,0,
		0,0,1221,1219,1,0,0,0,1222,1223,5,152,0,0,1223,1224,3,150,75,0,1224,219,
		1,0,0,0,1225,1228,3,218,109,0,1226,1227,5,144,0,0,1227,1229,3,118,59,0,
		1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,221,1,0,0,0,1230,1231,5,160,0,
		0,1231,223,1,0,0,0,1232,1233,3,10,5,0,1233,1234,5,154,0,0,1234,1236,1,
		0,0,0,1235,1232,1,0,0,0,1236,1239,1,0,0,0,1237,1235,1,0,0,0,1237,1238,
		1,0,0,0,1238,1240,1,0,0,0,1239,1237,1,0,0,0,1240,1244,3,222,111,0,1241,
		1243,5,157,0,0,1242,1241,1,0,0,0,1243,1246,1,0,0,0,1244,1242,1,0,0,0,1244,
		1245,1,0,0,0,1245,225,1,0,0,0,1246,1244,1,0,0,0,1247,1249,5,58,0,0,1248,
		1250,7,4,0,0,1249,1248,1,0,0,0,1249,1250,1,0,0,0,1250,1256,1,0,0,0,1251,
		1252,3,228,114,0,1252,1253,5,153,0,0,1253,1255,1,0,0,0,1254,1251,1,0,0,
		0,1255,1258,1,0,0,0,1256,1254,1,0,0,0,1256,1257,1,0,0,0,1257,1259,1,0,
		0,0,1258,1256,1,0,0,0,1259,1260,5,62,0,0,1260,227,1,0,0,0,1261,1264,3,
		200,100,0,1262,1264,3,214,107,0,1263,1261,1,0,0,0,1263,1262,1,0,0,0,1264,
		229,1,0,0,0,1265,1271,5,59,0,0,1266,1267,3,232,116,0,1267,1268,5,153,0,
		0,1268,1270,1,0,0,0,1269,1266,1,0,0,0,1270,1273,1,0,0,0,1271,1269,1,0,
		0,0,1271,1272,1,0,0,0,1272,1274,1,0,0,0,1273,1271,1,0,0,0,1274,1275,5,
		62,0,0,1275,231,1,0,0,0,1276,1280,3,234,117,0,1277,1280,3,214,107,0,1278,
		1280,3,218,109,0,1279,1276,1,0,0,0,1279,1277,1,0,0,0,1279,1278,1,0,0,0,
		1280,233,1,0,0,0,1281,1282,3,206,103,0,1282,1287,5,152,0,0,1283,1288,3,
		30,15,0,1284,1288,3,264,132,0,1285,1288,3,236,118,0,1286,1288,3,238,119,
		0,1287,1283,1,0,0,0,1287,1284,1,0,0,0,1287,1285,1,0,0,0,1287,1286,1,0,
		0,0,1288,235,1,0,0,0,1289,1290,3,206,103,0,1290,1291,5,152,0,0,1291,1292,
		3,82,41,0,1292,237,1,0,0,0,1293,1294,3,206,103,0,1294,1295,5,152,0,0,1295,
		1296,3,116,58,0,1296,239,1,0,0,0,1297,1299,5,63,0,0,1298,1300,5,64,0,0,
		1299,1298,1,0,0,0,1299,1300,1,0,0,0,1300,1302,1,0,0,0,1301,1303,3,298,
		149,0,1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,1309,1,0,0,0,1304,1305,
		3,200,100,0,1305,1306,5,153,0,0,1306,1308,1,0,0,0,1307,1304,1,0,0,0,1308,
		1311,1,0,0,0,1309,1307,1,0,0,0,1309,1310,1,0,0,0,1310,1312,1,0,0,0,1311,
		1309,1,0,0,0,1312,1313,5,62,0,0,1313,241,1,0,0,0,1314,1315,5,63,0,0,1315,
		1317,5,60,0,0,1316,1318,3,298,149,0,1317,1316,1,0,0,0,1317,1318,1,0,0,
		0,1318,1324,1,0,0,0,1319,1320,3,200,100,0,1320,1321,5,153,0,0,1321,1323,
		1,0,0,0,1322,1319,1,0,0,0,1323,1326,1,0,0,0,1324,1322,1,0,0,0,1324,1325,
		1,0,0,0,1325,1327,1,0,0,0,1326,1324,1,0,0,0,1327,1328,5,62,0,0,1328,243,
		1,0,0,0,1329,1331,5,63,0,0,1330,1332,7,5,0,0,1331,1330,1,0,0,0,1331,1332,
		1,0,0,0,1332,1338,1,0,0,0,1333,1334,3,246,123,0,1334,1335,5,153,0,0,1335,
		1337,1,0,0,0,1336,1333,1,0,0,0,1337,1340,1,0,0,0,1338,1336,1,0,0,0,1338,
		1339,1,0,0,0,1339,1341,1,0,0,0,1340,1338,1,0,0,0,1341,1342,5,62,0,0,1342,
		245,1,0,0,0,1343,1345,3,208,104,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,
		1345,1346,1,0,0,0,1346,1347,3,106,53,0,1347,1348,5,152,0,0,1348,1349,3,
		262,131,0,1349,247,1,0,0,0,1350,1360,5,65,0,0,1351,1355,3,234,117,0,1352,
		1355,3,202,101,0,1353,1355,3,204,102,0,1354,1351,1,0,0,0,1354,1352,1,0,
		0,0,1354,1353,1,0,0,0,1355,1356,1,0,0,0,1356,1357,5,153,0,0,1357,1359,
		1,0,0,0,1358,1354,1,0,0,0,1359,1362,1,0,0,0,1360,1358,1,0,0,0,1360,1361,
		1,0,0,0,1361,1363,1,0,0,0,1362,1360,1,0,0,0,1363,1364,5,62,0,0,1364,249,
		1,0,0,0,1365,1367,5,66,0,0,1366,1368,5,64,0,0,1367,1366,1,0,0,0,1367,1368,
		1,0,0,0,1368,1374,1,0,0,0,1369,1370,3,252,126,0,1370,1371,5,153,0,0,1371,
		1373,1,0,0,0,1372,1369,1,0,0,0,1373,1376,1,0,0,0,1374,1372,1,0,0,0,1374,
		1375,1,0,0,0,1375,1377,1,0,0,0,1376,1374,1,0,0,0,1377,1378,5,62,0,0,1378,
		251,1,0,0,0,1379,1380,3,254,127,0,1380,1386,5,152,0,0,1381,1387,3,30,15,
		0,1382,1387,3,82,41,0,1383,1387,3,116,58,0,1384,1387,3,150,75,0,1385,1387,
		3,140,70,0,1386,1381,1,0,0,0,1386,1382,1,0,0,0,1386,1383,1,0,0,0,1386,
		1384,1,0,0,0,1386,1385,1,0,0,0,1387,253,1,0,0,0,1388,1389,5,160,0,0,1389,
		255,1,0,0,0,1390,1392,5,67,0,0,1391,1393,7,6,0,0,1392,1391,1,0,0,0,1392,
		1393,1,0,0,0,1393,1399,1,0,0,0,1394,1395,3,258,129,0,1395,1396,5,153,0,
		0,1396,1398,1,0,0,0,1397,1394,1,0,0,0,1398,1401,1,0,0,0,1399,1397,1,0,
		0,0,1399,1400,1,0,0,0,1400,1402,1,0,0,0,1401,1399,1,0,0,0,1402,1403,5,
		62,0,0,1403,257,1,0,0,0,1404,1405,3,260,130,0,1405,1408,5,152,0,0,1406,
		1409,3,262,131,0,1407,1409,3,150,75,0,1408,1406,1,0,0,0,1408,1407,1,0,
		0,0,1409,259,1,0,0,0,1410,1415,3,254,127,0,1411,1412,5,151,0,0,1412,1414,
		3,254,127,0,1413,1411,1,0,0,0,1414,1417,1,0,0,0,1415,1413,1,0,0,0,1415,
		1416,1,0,0,0,1416,1422,1,0,0,0,1417,1415,1,0,0,0,1418,1419,3,254,127,0,
		1419,1420,3,106,53,0,1420,1422,1,0,0,0,1421,1410,1,0,0,0,1421,1418,1,0,
		0,0,1422,261,1,0,0,0,1423,1429,3,28,14,0,1424,1429,3,80,40,0,1425,1429,
		3,114,57,0,1426,1429,3,268,134,0,1427,1429,3,272,136,0,1428,1423,1,0,0,
		0,1428,1424,1,0,0,0,1428,1425,1,0,0,0,1428,1426,1,0,0,0,1428,1427,1,0,
		0,0,1429,263,1,0,0,0,1430,1433,3,266,133,0,1431,1433,3,270,135,0,1432,
		1430,1,0,0,0,1432,1431,1,0,0,0,1433,265,1,0,0,0,1434,1435,3,206,103,0,
		1435,1436,5,152,0,0,1436,1437,3,268,134,0,1437,267,1,0,0,0,1438,1442,5,
		33,0,0,1439,1440,5,149,0,0,1440,1441,5,11,0,0,1441,1443,5,150,0,0,1442,
		1439,1,0,0,0,1442,1443,1,0,0,0,1443,1446,1,0,0,0,1444,1445,5,144,0,0,1445,
		1447,5,3,0,0,1446,1444,1,0,0,0,1446,1447,1,0,0,0,1447,269,1,0,0,0,1448,
		1449,3,206,103,0,1449,1450,5,152,0,0,1450,1451,3,272,136,0,1451,271,1,
		0,0,0,1452,1456,5,34,0,0,1453,1454,5,149,0,0,1454,1455,5,11,0,0,1455,1457,
		5,150,0,0,1456,1453,1,0,0,0,1456,1457,1,0,0,0,1457,1460,1,0,0,0,1458,1459,
		5,144,0,0,1459,1461,5,4,0,0,1460,1458,1,0,0,0,1460,1461,1,0,0,0,1461,273,
		1,0,0,0,1462,1464,5,63,0,0,1463,1465,7,4,0,0,1464,1463,1,0,0,0,1464,1465,
		1,0,0,0,1465,1469,1,0,0,0,1466,1468,3,276,138,0,1467,1466,1,0,0,0,1468,
		1471,1,0,0,0,1469,1467,1,0,0,0,1469,1470,1,0,0,0,1470,1472,1,0,0,0,1471,
		1469,1,0,0,0,1472,1473,5,62,0,0,1473,275,1,0,0,0,1474,1475,3,208,104,0,
		1475,1476,5,52,0,0,1476,1477,5,1,0,0,1477,1478,5,152,0,0,1478,1479,3,278,
		139,0,1479,1480,5,153,0,0,1480,277,1,0,0,0,1481,1491,3,30,15,0,1482,1491,
		3,82,41,0,1483,1491,3,116,58,0,1484,1488,7,0,0,0,1485,1486,5,149,0,0,1486,
		1487,5,11,0,0,1487,1489,5,150,0,0,1488,1485,1,0,0,0,1488,1489,1,0,0,0,
		1489,1491,1,0,0,0,1490,1481,1,0,0,0,1490,1482,1,0,0,0,1490,1483,1,0,0,
		0,1490,1484,1,0,0,0,1491,279,1,0,0,0,1492,1493,5,68,0,0,1493,1496,3,328,
		164,0,1494,1495,5,152,0,0,1495,1497,3,174,87,0,1496,1494,1,0,0,0,1496,
		1497,1,0,0,0,1497,1501,1,0,0,0,1498,1500,3,12,6,0,1499,1498,1,0,0,0,1500,
		1503,1,0,0,0,1501,1499,1,0,0,0,1501,1502,1,0,0,0,1502,1509,1,0,0,0,1503,
		1501,1,0,0,0,1504,1508,3,282,141,0,1505,1508,3,284,142,0,1506,1508,3,248,
		124,0,1507,1504,1,0,0,0,1507,1505,1,0,0,0,1507,1506,1,0,0,0,1508,1511,
		1,0,0,0,1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,1512,1,0,0,0,1511,1509,
		1,0,0,0,1512,1513,3,286,143,0,1513,1514,5,69,0,0,1514,281,1,0,0,0,1515,
		1519,3,196,98,0,1516,1519,3,226,113,0,1517,1519,3,230,115,0,1518,1515,
		1,0,0,0,1518,1516,1,0,0,0,1518,1517,1,0,0,0,1519,283,1,0,0,0,1520,1523,
		3,250,125,0,1521,1523,3,240,120,0,1522,1520,1,0,0,0,1522,1521,1,0,0,0,
		1523,285,1,0,0,0,1524,1525,3,314,157,0,1525,287,1,0,0,0,1526,1528,5,79,
		0,0,1527,1529,7,3,0,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,1529,1530,1,
		0,0,0,1530,1534,3,290,145,0,1531,1533,3,12,6,0,1532,1531,1,0,0,0,1533,
		1536,1,0,0,0,1534,1532,1,0,0,0,1534,1535,1,0,0,0,1535,1539,1,0,0,0,1536,
		1534,1,0,0,0,1537,1538,5,73,0,0,1538,1540,3,292,146,0,1539,1537,1,0,0,
		0,1539,1540,1,0,0,0,1540,1543,1,0,0,0,1541,1542,5,74,0,0,1542,1544,3,304,
		152,0,1543,1541,1,0,0,0,1543,1544,1,0,0,0,1544,1549,1,0,0,0,1545,1548,
		3,284,142,0,1546,1548,3,164,82,0,1547,1545,1,0,0,0,1547,1546,1,0,0,0,1548,
		1551,1,0,0,0,1549,1547,1,0,0,0,1549,1550,1,0,0,0,1550,1555,1,0,0,0,1551,
		1549,1,0,0,0,1552,1554,3,170,85,0,1553,1552,1,0,0,0,1554,1557,1,0,0,0,
		1555,1553,1,0,0,0,1555,1556,1,0,0,0,1556,1558,1,0,0,0,1557,1555,1,0,0,
		0,1558,1559,5,80,0,0,1559,289,1,0,0,0,1560,1561,5,160,0,0,1561,291,1,0,
		0,0,1562,1563,3,10,5,0,1563,1564,5,154,0,0,1564,1566,1,0,0,0,1565,1562,
		1,0,0,0,1566,1569,1,0,0,0,1567,1565,1,0,0,0,1567,1568,1,0,0,0,1568,1570,
		1,0,0,0,1569,1567,1,0,0,0,1570,1571,3,290,145,0,1571,293,1,0,0,0,1572,
		1573,5,160,0,0,1573,295,1,0,0,0,1574,1575,3,10,5,0,1575,1576,5,154,0,0,
		1576,1578,1,0,0,0,1577,1574,1,0,0,0,1578,1581,1,0,0,0,1579,1577,1,0,0,
		0,1579,1580,1,0,0,0,1580,1582,1,0,0,0,1581,1579,1,0,0,0,1582,1586,3,294,
		147,0,1583,1585,5,157,0,0,1584,1583,1,0,0,0,1585,1588,1,0,0,0,1586,1584,
		1,0,0,0,1586,1587,1,0,0,0,1587,297,1,0,0,0,1588,1586,1,0,0,0,1589,1590,
		7,7,0,0,1590,299,1,0,0,0,1591,1592,5,81,0,0,1592,1596,3,302,151,0,1593,
		1595,3,12,6,0,1594,1593,1,0,0,0,1595,1598,1,0,0,0,1596,1594,1,0,0,0,1596,
		1597,1,0,0,0,1597,1601,1,0,0,0,1598,1596,1,0,0,0,1599,1600,5,73,0,0,1600,
		1602,3,304,152,0,1601,1599,1,0,0,0,1601,1602,1,0,0,0,1602,1606,1,0,0,0,
		1603,1605,3,308,154,0,1604,1603,1,0,0,0,1605,1608,1,0,0,0,1606,1604,1,
		0,0,0,1606,1607,1,0,0,0,1607,1609,1,0,0,0,1608,1606,1,0,0,0,1609,1610,
		5,82,0,0,1610,301,1,0,0,0,1611,1612,5,160,0,0,1612,303,1,0,0,0,1613,1618,
		3,306,153,0,1614,1615,5,152,0,0,1615,1617,3,306,153,0,1616,1614,1,0,0,
		0,1617,1620,1,0,0,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,305,1,0,0,
		0,1620,1618,1,0,0,0,1621,1622,3,10,5,0,1622,1623,5,154,0,0,1623,1625,1,
		0,0,0,1624,1621,1,0,0,0,1625,1628,1,0,0,0,1626,1624,1,0,0,0,1626,1627,
		1,0,0,0,1627,1629,1,0,0,0,1628,1626,1,0,0,0,1629,1630,3,302,151,0,1630,
		307,1,0,0,0,1631,1632,5,76,0,0,1632,1635,3,172,86,0,1633,1634,5,152,0,
		0,1634,1636,3,174,87,0,1635,1633,1,0,0,0,1635,1636,1,0,0,0,1636,1640,1,
		0,0,0,1637,1639,3,282,141,0,1638,1637,1,0,0,0,1639,1642,1,0,0,0,1640,1638,
		1,0,0,0,1640,1641,1,0,0,0,1641,1643,1,0,0,0,1642,1640,1,0,0,0,1643,1644,
		5,78,0,0,1644,309,1,0,0,0,1645,1648,3,206,103,0,1646,1647,5,144,0,0,1647,
		1649,3,312,156,0,1648,1646,1,0,0,0,1648,1649,1,0,0,0,1649,311,1,0,0,0,
		1650,1655,3,180,90,0,1651,1655,3,224,112,0,1652,1655,3,296,148,0,1653,
		1655,5,55,0,0,1654,1650,1,0,0,0,1654,1651,1,0,0,0,1654,1652,1,0,0,0,1654,
		1653,1,0,0,0,1655,313,1,0,0,0,1656,1658,3,316,158,0,1657,1656,1,0,0,0,
		1657,1658,1,0,0,0,1658,1659,1,0,0,0,1659,1661,5,153,0,0,1660,1657,1,0,
		0,0,1661,1664,1,0,0,0,1662,1660,1,0,0,0,1662,1663,1,0,0,0,1663,315,1,0,
		0,0,1664,1662,1,0,0,0,1665,1670,3,318,159,0,1666,1670,3,322,161,0,1667,
		1670,3,334,167,0,1668,1670,3,346,173,0,1669,1665,1,0,0,0,1669,1666,1,0,
		0,0,1669,1667,1,0,0,0,1669,1668,1,0,0,0,1670,317,1,0,0,0,1671,1672,3,178,
		89,0,1672,1673,5,144,0,0,1673,1674,3,358,179,0,1674,1678,1,0,0,0,1675,
		1678,3,142,71,0,1676,1678,3,320,160,0,1677,1671,1,0,0,0,1677,1675,1,0,
		0,0,1677,1676,1,0,0,0,1678,319,1,0,0,0,1679,1682,3,144,72,0,1680,1682,
		3,146,73,0,1681,1679,1,0,0,0,1681,1680,1,0,0,0,1682,1683,1,0,0,0,1683,
		1687,5,146,0,0,1684,1688,3,144,72,0,1685,1688,3,146,73,0,1686,1688,3,136,
		68,0,1687,1684,1,0,0,0,1687,1685,1,0,0,0,1687,1686,1,0,0,0,1688,321,1,
		0,0,0,1689,1696,3,324,162,0,1690,1696,3,330,165,0,1691,1692,5,87,0,0,1692,
		1693,5,147,0,0,1693,1696,5,148,0,0,1694,1696,5,88,0,0,1695,1689,1,0,0,
		0,1695,1690,1,0,0,0,1695,1691,1,0,0,0,1695,1694,1,0,0,0,1696,323,1,0,0,
		0,1697,1698,3,326,163,0,1698,1707,5,149,0,0,1699,1704,3,332,166,0,1700,
		1701,5,151,0,0,1701,1703,3,332,166,0,1702,1700,1,0,0,0,1703,1706,1,0,0,
		0,1704,1702,1,0,0,0,1704,1705,1,0,0,0,1705,1708,1,0,0,0,1706,1704,1,0,
		0,0,1707,1699,1,0,0,0,1707,1708,1,0,0,0,1708,1709,1,0,0,0,1709,1710,5,
		148,0,0,1710,325,1,0,0,0,1711,1712,3,10,5,0,1712,1713,5,154,0,0,1713,1715,
		1,0,0,0,1714,1711,1,0,0,0,1715,1718,1,0,0,0,1716,1714,1,0,0,0,1716,1717,
		1,0,0,0,1717,1719,1,0,0,0,1718,1716,1,0,0,0,1719,1720,3,328,164,0,1720,
		327,1,0,0,0,1721,1722,5,160,0,0,1722,329,1,0,0,0,1723,1741,3,224,112,0,
		1724,1725,5,56,0,0,1725,1727,5,154,0,0,1726,1724,1,0,0,0,1726,1727,1,0,
		0,0,1727,1734,1,0,0,0,1728,1731,3,224,112,0,1729,1731,3,296,148,0,1730,
		1728,1,0,0,0,1730,1729,1,0,0,0,1731,1732,1,0,0,0,1732,1733,5,154,0,0,1733,
		1735,1,0,0,0,1734,1730,1,0,0,0,1735,1736,1,0,0,0,1736,1734,1,0,0,0,1736,
		1737,1,0,0,0,1737,1738,1,0,0,0,1738,1739,3,172,86,0,1739,1741,1,0,0,0,
		1740,1723,1,0,0,0,1740,1726,1,0,0,0,1741,1742,1,0,0,0,1742,1751,5,147,
		0,0,1743,1748,3,332,166,0,1744,1745,5,151,0,0,1745,1747,3,332,166,0,1746,
		1744,1,0,0,0,1747,1750,1,0,0,0,1748,1746,1,0,0,0,1748,1749,1,0,0,0,1749,
		1752,1,0,0,0,1750,1748,1,0,0,0,1751,1743,1,0,0,0,1751,1752,1,0,0,0,1752,
		1753,1,0,0,0,1753,1754,5,148,0,0,1754,331,1,0,0,0,1755,1756,3,208,104,
		0,1756,1757,5,144,0,0,1757,1759,1,0,0,0,1758,1755,1,0,0,0,1758,1759,1,
		0,0,0,1759,1760,1,0,0,0,1760,1770,3,358,179,0,1761,1770,3,142,71,0,1762,
		1764,5,141,0,0,1763,1762,1,0,0,0,1763,1764,1,0,0,0,1764,1765,1,0,0,0,1765,
		1766,3,208,104,0,1766,1767,5,145,0,0,1767,1768,3,178,89,0,1768,1770,1,
		0,0,0,1769,1758,1,0,0,0,1769,1761,1,0,0,0,1769,1763,1,0,0,0,1770,333,1,
		0,0,0,1771,1774,3,336,168,0,1772,1774,3,338,169,0,1773,1771,1,0,0,0,1773,
		1772,1,0,0,0,1774,335,1,0,0,0,1775,1776,5,108,0,0,1776,1777,3,358,179,
		0,1777,1778,5,109,0,0,1778,1786,3,314,157,0,1779,1780,5,110,0,0,1780,1781,
		3,358,179,0,1781,1782,5,109,0,0,1782,1783,3,314,157,0,1783,1785,1,0,0,
		0,1784,1779,1,0,0,0,1785,1788,1,0,0,0,1786,1784,1,0,0,0,1786,1787,1,0,
		0,0,1787,1791,1,0,0,0,1788,1786,1,0,0,0,1789,1790,5,111,0,0,1790,1792,
		3,314,157,0,1791,1789,1,0,0,0,1791,1792,1,0,0,0,1792,1793,1,0,0,0,1793,
		1794,5,112,0,0,1794,337,1,0,0,0,1795,1796,5,113,0,0,1796,1797,3,358,179,
		0,1797,1799,5,48,0,0,1798,1800,3,340,170,0,1799,1798,1,0,0,0,1800,1801,
		1,0,0,0,1801,1799,1,0,0,0,1801,1802,1,0,0,0,1802,1805,1,0,0,0,1803,1804,
		5,111,0,0,1804,1806,3,314,157,0,1805,1803,1,0,0,0,1805,1806,1,0,0,0,1806,
		1807,1,0,0,0,1807,1808,5,114,0,0,1808,339,1,0,0,0,1809,1810,3,342,171,
		0,1810,1811,5,152,0,0,1811,1812,3,314,157,0,1812,341,1,0,0,0,1813,1818,
		3,344,172,0,1814,1815,5,151,0,0,1815,1817,3,344,172,0,1816,1814,1,0,0,
		0,1817,1820,1,0,0,0,1818,1816,1,0,0,0,1818,1819,1,0,0,0,1819,343,1,0,0,
		0,1820,1818,1,0,0,0,1821,1824,3,52,26,0,1822,1824,3,358,179,0,1823,1821,
		1,0,0,0,1823,1822,1,0,0,0,1824,345,1,0,0,0,1825,1831,3,348,174,0,1826,
		1831,3,354,177,0,1827,1831,3,356,178,0,1828,1831,3,360,180,0,1829,1831,
		3,362,181,0,1830,1825,1,0,0,0,1830,1826,1,0,0,0,1830,1827,1,0,0,0,1830,
		1828,1,0,0,0,1830,1829,1,0,0,0,1831,347,1,0,0,0,1832,1833,5,117,0,0,1833,
		1834,3,350,175,0,1834,1835,5,144,0,0,1835,1836,3,352,176,0,1836,1837,5,
		120,0,0,1837,1838,3,314,157,0,1838,1839,5,121,0,0,1839,349,1,0,0,0,1840,
		1841,5,160,0,0,1841,351,1,0,0,0,1842,1843,3,358,179,0,1843,1844,5,118,
		0,0,1844,1847,3,358,179,0,1845,1846,5,119,0,0,1846,1848,3,358,179,0,1847,
		1845,1,0,0,0,1847,1848,1,0,0,0,1848,353,1,0,0,0,1849,1850,5,122,0,0,1850,
		1851,3,358,179,0,1851,1852,5,120,0,0,1852,1853,3,314,157,0,1853,1854,5,
		123,0,0,1854,355,1,0,0,0,1855,1856,5,124,0,0,1856,1857,3,314,157,0,1857,
		1858,5,125,0,0,1858,1859,3,358,179,0,1859,1860,5,126,0,0,1860,357,1,0,
		0,0,1861,1866,6,179,-1,0,1862,1867,3,366,183,0,1863,1867,3,364,182,0,1864,
		1867,3,70,35,0,1865,1867,3,136,68,0,1866,1862,1,0,0,0,1866,1863,1,0,0,
		0,1866,1864,1,0,0,0,1866,1865,1,0,0,0,1867,1877,1,0,0,0,1868,1869,5,147,
		0,0,1869,1870,3,358,179,0,1870,1871,5,148,0,0,1871,1877,1,0,0,0,1872,1877,
		3,324,162,0,1873,1877,3,146,73,0,1874,1875,7,8,0,0,1875,1877,3,358,179,
		8,1876,1861,1,0,0,0,1876,1868,1,0,0,0,1876,1872,1,0,0,0,1876,1873,1,0,
		0,0,1876,1874,1,0,0,0,1877,1901,1,0,0,0,1878,1879,10,7,0,0,1879,1880,5,
		130,0,0,1880,1900,3,358,179,7,1881,1882,10,6,0,0,1882,1883,7,9,0,0,1883,
		1900,3,358,179,7,1884,1885,10,5,0,0,1885,1886,7,10,0,0,1886,1900,3,358,
		179,6,1887,1888,10,4,0,0,1888,1889,7,11,0,0,1889,1900,3,358,179,5,1890,
		1891,10,3,0,0,1891,1892,7,12,0,0,1892,1900,3,358,179,4,1893,1894,10,2,
		0,0,1894,1895,5,142,0,0,1895,1900,3,358,179,3,1896,1897,10,1,0,0,1897,
		1898,5,140,0,0,1898,1900,3,358,179,2,1899,1878,1,0,0,0,1899,1881,1,0,0,
		0,1899,1884,1,0,0,0,1899,1887,1,0,0,0,1899,1890,1,0,0,0,1899,1893,1,0,
		0,0,1899,1896,1,0,0,0,1900,1903,1,0,0,0,1901,1899,1,0,0,0,1901,1902,1,
		0,0,0,1902,359,1,0,0,0,1903,1901,1,0,0,0,1904,1905,5,115,0,0,1905,361,
		1,0,0,0,1906,1907,5,116,0,0,1907,363,1,0,0,0,1908,1910,3,178,89,0,1909,
		1911,3,112,56,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,365,1,0,0,0,1912,
		1919,3,368,184,0,1913,1919,3,380,190,0,1914,1919,3,392,196,0,1915,1919,
		3,398,199,0,1916,1919,3,374,187,0,1917,1919,3,386,193,0,1918,1912,1,0,
		0,0,1918,1913,1,0,0,0,1918,1914,1,0,0,0,1918,1915,1,0,0,0,1918,1916,1,
		0,0,0,1918,1917,1,0,0,0,1919,367,1,0,0,0,1920,1921,3,372,186,0,1921,1922,
		5,156,0,0,1922,1924,1,0,0,0,1923,1920,1,0,0,0,1923,1924,1,0,0,0,1924,1925,
		1,0,0,0,1925,1926,3,370,185,0,1926,369,1,0,0,0,1927,1928,7,13,0,0,1928,
		371,1,0,0,0,1929,1930,7,14,0,0,1930,373,1,0,0,0,1931,1932,3,378,189,0,
		1932,1933,5,156,0,0,1933,1935,1,0,0,0,1934,1931,1,0,0,0,1934,1935,1,0,
		0,0,1935,1936,1,0,0,0,1936,1937,3,376,188,0,1937,375,1,0,0,0,1938,1939,
		7,15,0,0,1939,377,1,0,0,0,1940,1941,7,16,0,0,1941,379,1,0,0,0,1942,1943,
		3,384,192,0,1943,1944,5,156,0,0,1944,1946,1,0,0,0,1945,1942,1,0,0,0,1945,
		1946,1,0,0,0,1946,1947,1,0,0,0,1947,1948,3,382,191,0,1948,381,1,0,0,0,
		1949,1950,5,9,0,0,1950,383,1,0,0,0,1951,1952,7,17,0,0,1952,385,1,0,0,0,
		1953,1954,3,390,195,0,1954,1955,5,156,0,0,1955,1957,1,0,0,0,1956,1953,
		1,0,0,0,1956,1957,1,0,0,0,1957,1958,1,0,0,0,1958,1959,3,388,194,0,1959,
		387,1,0,0,0,1960,1961,7,18,0,0,1961,389,1,0,0,0,1962,1963,5,30,0,0,1963,
		391,1,0,0,0,1964,1965,3,396,198,0,1965,1966,5,156,0,0,1966,1968,1,0,0,
		0,1967,1964,1,0,0,0,1967,1968,1,0,0,0,1968,1969,1,0,0,0,1969,1970,3,394,
		197,0,1970,393,1,0,0,0,1971,1972,7,19,0,0,1972,395,1,0,0,0,1973,1974,7,
		20,0,0,1974,397,1,0,0,0,1975,1980,3,400,200,0,1976,1980,3,406,203,0,1977,
		1980,3,412,206,0,1978,1980,3,418,209,0,1979,1975,1,0,0,0,1979,1976,1,0,
		0,0,1979,1977,1,0,0,0,1979,1978,1,0,0,0,1980,399,1,0,0,0,1981,1982,3,404,
		202,0,1982,1983,5,156,0,0,1983,1984,3,402,201,0,1984,401,1,0,0,0,1985,
		1986,5,5,0,0,1986,403,1,0,0,0,1987,1988,7,21,0,0,1988,405,1,0,0,0,1989,
		1990,3,410,205,0,1990,1991,5,156,0,0,1991,1992,3,408,204,0,1992,407,1,
		0,0,0,1993,1994,5,8,0,0,1994,409,1,0,0,0,1995,1996,7,22,0,0,1996,411,1,
		0,0,0,1997,1998,3,416,208,0,1998,1999,5,156,0,0,1999,2000,3,414,207,0,
		2000,413,1,0,0,0,2001,2002,5,7,0,0,2002,415,1,0,0,0,2003,2004,7,23,0,0,
		2004,417,1,0,0,0,2005,2006,3,422,211,0,2006,2007,5,156,0,0,2007,2008,3,
		420,210,0,2008,419,1,0,0,0,2009,2010,5,6,0,0,2010,421,1,0,0,0,2011,2012,
		7,24,0,0,2012,423,1,0,0,0,2013,2014,5,2,0,0,2014,425,1,0,0,0,209,430,438,
		440,442,447,453,457,463,475,477,484,495,507,509,522,533,544,555,559,569,
		576,586,590,603,613,620,636,640,650,656,661,667,672,682,688,692,699,713,
		723,730,737,748,757,761,769,779,783,790,797,799,807,814,826,833,844,856,
		863,872,886,891,897,904,913,923,931,940,947,953,959,961,965,971,973,979,
		988,992,999,1006,1010,1017,1024,1029,1034,1041,1051,1054,1059,1064,1066,
		1076,1087,1091,1100,1102,1106,1110,1117,1119,1127,1141,1148,1155,1162,
		1168,1183,1199,1219,1228,1237,1244,1249,1256,1263,1271,1279,1287,1299,
		1302,1309,1317,1324,1331,1338,1344,1354,1360,1367,1374,1386,1392,1399,
		1408,1415,1421,1428,1432,1442,1446,1456,1460,1464,1469,1488,1490,1496,
		1501,1507,1509,1518,1522,1528,1534,1539,1543,1547,1549,1555,1567,1579,
		1586,1596,1601,1606,1618,1626,1635,1640,1648,1654,1657,1662,1669,1677,
		1681,1687,1695,1704,1707,1716,1726,1730,1736,1740,1748,1751,1758,1763,
		1769,1773,1786,1791,1801,1805,1818,1823,1830,1847,1866,1876,1899,1901,
		1910,1918,1923,1934,1945,1956,1967,1979
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
