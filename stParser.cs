//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/kryst/Desktop/Praca magisterska/st-grammar/st.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class stParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, PARTLY_DIRECT_VARIABLE=34, DIRECT_PART_ACCESS=35, 
		DIRECT_VARIABLE=36, SINGLE_BYTE_STRING=37, DOUBLE_BYTE_STRING=38, DURATION=39, 
		DATE_TIME_VALUE=40, DATE_VALUE=41, CLOCK_TIME=42, GENERAL_REAL=43, SIGNED_INT=44, 
		UNSIGNED_INT=45, BINARY_INT=46, OCTAL_INT=47, HEX_INT=48, BOOLEAN=49, 
		USINT=50, UINT=51, UDINT=52, ULINT=53, SINT=54, INT=55, DINT=56, LINT=57, 
		REAL=58, LREAL=59, BYTE=60, WORD=61, DWORD=62, LWORD=63, BOOL=64, FALSE=65, 
		TRUE=66, STRING=67, WSTRING=68, CHAR=69, WCHAR=70, TIME=71, LTIME=72, 
		TIME_OF_DAY=73, LTIME_OF_DAY=74, DATE=75, LDATE=76, DATE_AND_TIME=77, 
		LDATE_AND_TIME=78, TYPE=79, END_TYPE=80, ARRAY=81, OF=82, STRUCT=83, OVERLAP=84, 
		END_STRUCT=85, AT=86, REF_TO=87, REF=88, NULL=89, THIS=90, VAR_INPUT=91, 
		VAR_OUTPUT=92, VAR_IN_OUT=93, RETAIN=94, NON_RETAIN=95, END_VAR=96, VAR=97, 
		CONSTANT=98, VAR_TEMP=99, VAR_EXTERNAL=100, VAR_GLOBAL=101, FUNCTION=102, 
		END_FUNCTION=103, FUNCTION_BLOCK=104, FINAL=105, ABSTRACT=106, EXTENDS=107, 
		IMPLEMENTS=108, END_FUNCTION_BLOCK=109, METHOD=110, OVERRIDE=111, END_METHOD=112, 
		CLASS=113, END_CLASS=114, INTERFACE=115, END_INTERFACE=116, PUBLIC=117, 
		PROTECTED=118, PRIVATE=119, INTERNAL=120, PROGRAM=121, END_PROGRAM=122, 
		VAR_ACCESS=123, CONFIGURATION=124, END_CONFIGURATION=125, RESOURCE=126, 
		ON=127, END_RESOURCE=128, READ_WRITE=129, READ_ONLY=130, TASK=131, SINGLE=132, 
		INTERVAL=133, PRIORITY=134, WITH=135, VAR_CONFIG=136, NAMESPACE=137, END_NAMESPACE=138, 
		USING=139, AND=140, OR=141, XOR=142, NOT=143, MOD=144, SUPER=145, RETURN=146, 
		IF=147, THEN=148, ELSIF=149, ELSE=150, END_IF=151, CASE=152, END_CASE=153, 
		EXIT=154, CONTINUE=155, FOR=156, TO=157, BY=158, DO=159, END_FOR=160, 
		WHILE=161, END_WHILE=162, REPEAT=163, UNTIL=164, END_REPEAT=165, DOT=166, 
		PERCENT=167, IDENTIFIER=168, PRAGMA=169, LINE_COMMENT=170, SLASH_COMMENT=171, 
		BRACE_COMMENT=172, WHITESPACE=173;
	public const int
		RULE_file = 0, RULE_configurationName = 1, RULE_resourceTypeName = 2, 
		RULE_configDeclaration = 3, RULE_resourceDeclaration = 4, RULE_singleResourceDeclaration = 5, 
		RULE_resourceName = 6, RULE_accessDeclarations = 7, RULE_accessDeclaration = 8, 
		RULE_accessPath = 9, RULE_globalVarAccess = 10, RULE_accessName = 11, 
		RULE_programOutputAccess = 12, RULE_programName = 13, RULE_accessDirection = 14, 
		RULE_taskConfig = 15, RULE_taskName = 16, RULE_taskInit = 17, RULE_dataSource = 18, 
		RULE_programConfig = 19, RULE_programConfigurationElements = 20, RULE_programConfigurationElement = 21, 
		RULE_fbTask = 22, RULE_programCnxn = 23, RULE_programDataSource = 24, 
		RULE_dataSink = 25, RULE_configInit = 26, RULE_configInstInit = 27, RULE_namespaceDeclaration = 28, 
		RULE_namespaceElements = 29, RULE_namespaceHName = 30, RULE_namespaceName = 31, 
		RULE_usingDirective = 32, RULE_pouDeclaration = 33, RULE_programDeclaration = 34, 
		RULE_programTypeName = 35, RULE_programTypeAccess = 36, RULE_programAccessDeclarations = 37, 
		RULE_programAccessDeclaration = 38, RULE_dataTypeDeclaration = 39, RULE_typeDeclaration = 40, 
		RULE_simpleTypeDeclaration = 41, RULE_simpleSpecInit = 42, RULE_simpleSpec = 43, 
		RULE_elementTypeName = 44, RULE_numericTypeName = 45, RULE_subrangeTypeDeclaration = 46, 
		RULE_subrangeSpecInit = 47, RULE_subrangeSpec = 48, RULE_subrange = 49, 
		RULE_enumTypeDeclaration = 50, RULE_namedSpecInit = 51, RULE_enumSpecInit = 52, 
		RULE_enumValueSpec = 53, RULE_enumValue = 54, RULE_arrayTypeDeclaration = 55, 
		RULE_arraySpecInit = 56, RULE_arraySpec = 57, RULE_dataTypeAccess = 58, 
		RULE_arrayInit = 59, RULE_arrayElementInit = 60, RULE_arrayElementInitValue = 61, 
		RULE_structTypeDeclaration = 62, RULE_structSpec = 63, RULE_structSpecInit = 64, 
		RULE_structDeclaration = 65, RULE_structElementDeclaration = 66, RULE_locatedAt = 67, 
		RULE_multibitPartAccess = 68, RULE_structElementName = 69, RULE_structInit = 70, 
		RULE_structElementInit = 71, RULE_stringTypeDeclaration = 72, RULE_refTypeDeclaration = 73, 
		RULE_refSpecInit = 74, RULE_refSpec = 75, RULE_refTypeName = 76, RULE_refTypeAccess = 77, 
		RULE_refName = 78, RULE_refValue = 79, RULE_refAddress = 80, RULE_refAssign = 81, 
		RULE_refDereference = 82, RULE_fbTypeName = 83, RULE_fbTypeAccess = 84, 
		RULE_fbDeclaration = 85, RULE_fbIOVarDeclarations = 86, RULE_fbInputDeclarations = 87, 
		RULE_fbInputDeclaration = 88, RULE_fbOutputDeclarations = 89, RULE_fbOutputDeclaration = 90, 
		RULE_otherVarDeclarations = 91, RULE_nonRetainVarDeclarations = 92, RULE_fbBody = 93, 
		RULE_methodDeclaration = 94, RULE_methodName = 95, RULE_derivedTypeAccess = 96, 
		RULE_stringTypeAccess = 97, RULE_stringTypeName = 98, RULE_singleElementTypeAccess = 99, 
		RULE_simpleTypeAccess = 100, RULE_simpleTypeName = 101, RULE_subrangeTypeAccess = 102, 
		RULE_subrangeTypeName = 103, RULE_enumTypeAccess = 104, RULE_enumTypeName = 105, 
		RULE_arrayTypeAccess = 106, RULE_arrayTypeName = 107, RULE_structTypeAccess = 108, 
		RULE_structTypeName = 109, RULE_variable = 110, RULE_symbolicVariable = 111, 
		RULE_varAccess = 112, RULE_varName = 113, RULE_multiElementVar = 114, 
		RULE_subscriptList = 115, RULE_subscript = 116, RULE_structVariable = 117, 
		RULE_structElementSelect = 118, RULE_inputDeclarations = 119, RULE_inputDeclaration = 120, 
		RULE_varDeclarationInit = 121, RULE_refVarDeclaration = 122, RULE_interfaceVarDeclaration = 123, 
		RULE_variableList = 124, RULE_variableName = 125, RULE_arrayVarDeclarationInit = 126, 
		RULE_arrayConformand = 127, RULE_arrayConformDeclaration = 128, RULE_structVarDeclarationInit = 129, 
		RULE_fbDeclarationNoInit = 130, RULE_fbDeclarationInit = 131, RULE_fbName = 132, 
		RULE_fbInstanceName = 133, RULE_outputDeclarations = 134, RULE_outputDeclaration = 135, 
		RULE_inOutDeclarations = 136, RULE_inOutVarDeclaration = 137, RULE_varDeclaration = 138, 
		RULE_arrayVarDeclaration = 139, RULE_structVarDeclaration = 140, RULE_varDeclarations = 141, 
		RULE_retainVarDeclarations = 142, RULE_locVarDeclarations = 143, RULE_locVarDeclaration = 144, 
		RULE_tempVarDeclarations = 145, RULE_externalVarDeclarations = 146, RULE_externalDeclaration = 147, 
		RULE_globalVarName = 148, RULE_globalVarDeclarations = 149, RULE_globalVarDeclaration = 150, 
		RULE_globalVarSpec = 151, RULE_locVarSpecInit = 152, RULE_strVarDeclaration = 153, 
		RULE_sByteStrVarDecl = 154, RULE_sByteStrSpec = 155, RULE_dByteStrVarDeclaration = 156, 
		RULE_dByteStrSpec = 157, RULE_locPartlyVarDeclaration = 158, RULE_locPartlyVar = 159, 
		RULE_varSpec = 160, RULE_functionName = 161, RULE_functionAccess = 162, 
		RULE_functionDeclaration = 163, RULE_ioVarDeclarations = 164, RULE_functionVarDeclarations = 165, 
		RULE_functionBody = 166, RULE_classDeclaration = 167, RULE_classTypeName = 168, 
		RULE_classTypeAccess = 169, RULE_className = 170, RULE_classInstanceName = 171, 
		RULE_interfaceDeclaration = 172, RULE_methodPrototype = 173, RULE_interfaceSpecInit = 174, 
		RULE_interfaceValue = 175, RULE_interfaceNameList = 176, RULE_interfaceTypeName = 177, 
		RULE_interfaceTypeAccess = 178, RULE_interfaceName = 179, RULE_accessSpec = 180, 
		RULE_variableAccess = 181, RULE_functionCall = 182, RULE_statementList = 183, 
		RULE_statement = 184, RULE_assignStatement = 185, RULE_assignmentAttempt = 186, 
		RULE_invocation = 187, RULE_subprogControlStatement = 188, RULE_parameterAssign = 189, 
		RULE_selectionStatement = 190, RULE_ifStatement = 191, RULE_caseStatement = 192, 
		RULE_caseSelection = 193, RULE_caseList = 194, RULE_caseListElement = 195, 
		RULE_iterationStatement = 196, RULE_forStatement = 197, RULE_controlVariable = 198, 
		RULE_forList = 199, RULE_whileStatement = 200, RULE_repeatStatement = 201, 
		RULE_expression = 202, RULE_constExpression = 203, RULE_xorExpression = 204, 
		RULE_andExpression = 205, RULE_compareExpression = 206, RULE_equExpression = 207, 
		RULE_addExpression = 208, RULE_term = 209, RULE_powerExpression = 210, 
		RULE_unaryExpression = 211, RULE_primaryExpression = 212, RULE_literalValue = 213, 
		RULE_numericLiteral = 214, RULE_intLiteral = 215, RULE_intLiteralValue = 216, 
		RULE_intTypeName = 217, RULE_unsignedIntTypeName = 218, RULE_signedIntTypeName = 219, 
		RULE_multibitsLiteral = 220, RULE_multibitsLiteralValue = 221, RULE_multibitsTypeName = 222, 
		RULE_realLiteral = 223, RULE_realLiteralValue = 224, RULE_realTypeName = 225, 
		RULE_boolLiteral = 226, RULE_boolLiteralValue = 227, RULE_boolTypeName = 228, 
		RULE_charLiteral = 229, RULE_charString = 230, RULE_charTypeName = 231, 
		RULE_timeLiteral = 232, RULE_durationLiteral = 233, RULE_durationLiteralValue = 234, 
		RULE_durationTypeName = 235, RULE_timeOfDayLiteral = 236, RULE_timeOfDayLiteralValue = 237, 
		RULE_timeOfDayTypeName = 238, RULE_dateLiteral = 239, RULE_dateLiteralValue = 240, 
		RULE_dateTypeName = 241, RULE_dateAndTimeLiteral = 242, RULE_dateAndTimeLiteralValue = 243, 
		RULE_dateAndTimeTypeName = 244, RULE_directVariable = 245;
	public static readonly string[] ruleNames = {
		"file", "configurationName", "resourceTypeName", "configDeclaration", 
		"resourceDeclaration", "singleResourceDeclaration", "resourceName", "accessDeclarations", 
		"accessDeclaration", "accessPath", "globalVarAccess", "accessName", "programOutputAccess", 
		"programName", "accessDirection", "taskConfig", "taskName", "taskInit", 
		"dataSource", "programConfig", "programConfigurationElements", "programConfigurationElement", 
		"fbTask", "programCnxn", "programDataSource", "dataSink", "configInit", 
		"configInstInit", "namespaceDeclaration", "namespaceElements", "namespaceHName", 
		"namespaceName", "usingDirective", "pouDeclaration", "programDeclaration", 
		"programTypeName", "programTypeAccess", "programAccessDeclarations", "programAccessDeclaration", 
		"dataTypeDeclaration", "typeDeclaration", "simpleTypeDeclaration", "simpleSpecInit", 
		"simpleSpec", "elementTypeName", "numericTypeName", "subrangeTypeDeclaration", 
		"subrangeSpecInit", "subrangeSpec", "subrange", "enumTypeDeclaration", 
		"namedSpecInit", "enumSpecInit", "enumValueSpec", "enumValue", "arrayTypeDeclaration", 
		"arraySpecInit", "arraySpec", "dataTypeAccess", "arrayInit", "arrayElementInit", 
		"arrayElementInitValue", "structTypeDeclaration", "structSpec", "structSpecInit", 
		"structDeclaration", "structElementDeclaration", "locatedAt", "multibitPartAccess", 
		"structElementName", "structInit", "structElementInit", "stringTypeDeclaration", 
		"refTypeDeclaration", "refSpecInit", "refSpec", "refTypeName", "refTypeAccess", 
		"refName", "refValue", "refAddress", "refAssign", "refDereference", "fbTypeName", 
		"fbTypeAccess", "fbDeclaration", "fbIOVarDeclarations", "fbInputDeclarations", 
		"fbInputDeclaration", "fbOutputDeclarations", "fbOutputDeclaration", "otherVarDeclarations", 
		"nonRetainVarDeclarations", "fbBody", "methodDeclaration", "methodName", 
		"derivedTypeAccess", "stringTypeAccess", "stringTypeName", "singleElementTypeAccess", 
		"simpleTypeAccess", "simpleTypeName", "subrangeTypeAccess", "subrangeTypeName", 
		"enumTypeAccess", "enumTypeName", "arrayTypeAccess", "arrayTypeName", 
		"structTypeAccess", "structTypeName", "variable", "symbolicVariable", 
		"varAccess", "varName", "multiElementVar", "subscriptList", "subscript", 
		"structVariable", "structElementSelect", "inputDeclarations", "inputDeclaration", 
		"varDeclarationInit", "refVarDeclaration", "interfaceVarDeclaration", 
		"variableList", "variableName", "arrayVarDeclarationInit", "arrayConformand", 
		"arrayConformDeclaration", "structVarDeclarationInit", "fbDeclarationNoInit", 
		"fbDeclarationInit", "fbName", "fbInstanceName", "outputDeclarations", 
		"outputDeclaration", "inOutDeclarations", "inOutVarDeclaration", "varDeclaration", 
		"arrayVarDeclaration", "structVarDeclaration", "varDeclarations", "retainVarDeclarations", 
		"locVarDeclarations", "locVarDeclaration", "tempVarDeclarations", "externalVarDeclarations", 
		"externalDeclaration", "globalVarName", "globalVarDeclarations", "globalVarDeclaration", 
		"globalVarSpec", "locVarSpecInit", "strVarDeclaration", "sByteStrVarDecl", 
		"sByteStrSpec", "dByteStrVarDeclaration", "dByteStrSpec", "locPartlyVarDeclaration", 
		"locPartlyVar", "varSpec", "functionName", "functionAccess", "functionDeclaration", 
		"ioVarDeclarations", "functionVarDeclarations", "functionBody", "classDeclaration", 
		"classTypeName", "classTypeAccess", "className", "classInstanceName", 
		"interfaceDeclaration", "methodPrototype", "interfaceSpecInit", "interfaceValue", 
		"interfaceNameList", "interfaceTypeName", "interfaceTypeAccess", "interfaceName", 
		"accessSpec", "variableAccess", "functionCall", "statementList", "statement", 
		"assignStatement", "assignmentAttempt", "invocation", "subprogControlStatement", 
		"parameterAssign", "selectionStatement", "ifStatement", "caseStatement", 
		"caseSelection", "caseList", "caseListElement", "iterationStatement", 
		"forStatement", "controlVariable", "forList", "whileStatement", "repeatStatement", 
		"expression", "constExpression", "xorExpression", "andExpression", "compareExpression", 
		"equExpression", "addExpression", "term", "powerExpression", "unaryExpression", 
		"primaryExpression", "literalValue", "numericLiteral", "intLiteral", "intLiteralValue", 
		"intTypeName", "unsignedIntTypeName", "signedIntTypeName", "multibitsLiteral", 
		"multibitsLiteralValue", "multibitsTypeName", "realLiteral", "realLiteralValue", 
		"realTypeName", "boolLiteral", "boolLiteralValue", "boolTypeName", "charLiteral", 
		"charString", "charTypeName", "timeLiteral", "durationLiteral", "durationLiteralValue", 
		"durationTypeName", "timeOfDayLiteral", "timeOfDayLiteralValue", "timeOfDayTypeName", 
		"dateLiteral", "dateLiteralValue", "dateTypeName", "dateAndTimeLiteral", 
		"dateAndTimeLiteralValue", "dateAndTimeTypeName", "directVariable"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "'('", "':='", "','", "')'", "'=>'", "'..'", "'#'", 
		"'['", "']'", "'^'", "'*'", "'?='", "'&'", "'='", "'<>'", "'<'", "'>'", 
		"'<='", "'>='", "'+'", "'-'", "'/'", "'**'", "'T'", "'LT'", "'TOD'", "'LTOD'", 
		"'D'", "'LD'", "'DT'", "'LDT'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "'USINT'", "'UINT'", 
		"'UDINT'", "'ULINT'", "'SINT'", "'INT'", "'DINT'", "'LINT'", "'REAL'", 
		"'LREAL'", "'BYTE'", "'WORD'", "'DWORD'", "'LWORD'", "'BOOL'", "'FALSE'", 
		"'TRUE'", "'STRING'", "'WSTRING'", "'CHAR'", "'WCHAR'", "'TIME'", "'LTIME'", 
		"'TIME_OF_DAY'", "'LTIME_OF_DAY'", "'DATE'", "'LDATE'", "'DATE_AND_TIME'", 
		"'LDATE_AND_TIME'", "'TYPE'", "'END_TYPE'", "'ARRAY'", "'OF'", "'STRUCT'", 
		"'OVERLAP'", "'END_STRUCT'", "'AT'", "'REF_TO'", "'REF'", "'NULL'", "'THIS'", 
		"'VAR_INPUT'", "'VAR_OUTPUT'", "'VAR_IN_OUT'", "'RETAIN'", "'NON_RETAIN'", 
		"'END_VAR'", "'VAR'", "'CONSTANT'", "'VAR_TEMP'", "'VAR_EXTERNAL'", "'VAR_GLOBAL'", 
		"'FUNCTION'", "'END_FUNCTION'", "'FUNCTION_BLOCK'", "'FINAL'", "'ABSTRACT'", 
		"'EXTENDS'", "'IMPLEMENTS'", "'END_FUNCTION_BLOCK'", "'METHOD'", "'OVERRIDE'", 
		"'END_METHOD'", "'CLASS'", "'END_CLASS'", "'INTERFACE'", "'END_INTERFACE'", 
		"'PUBLIC'", "'PROTECTED'", "'PRIVATE'", "'INTERAL'", "'PROGRAM'", "'END_PROGRAM'", 
		"'VAR_ACCESS'", "'CONFIGURATION'", "'END_CONFIGURATION'", "'RESOURCE'", 
		"'ON'", "'END_RESOURCE'", "'READ_WRITE'", "'READ_ONLY'", "'TASK'", "'SINGLE'", 
		"'INTERVAL'", "'PRIORITY'", "'WITH'", "'VAR_CONFIG'", "'NAMESPACE'", "'END_NAMESPACE'", 
		"'USING'", "'AND'", "'OR'", "'XOR'", "'NOT'", "'MOD'", "'SUPER'", "'RETURN'", 
		"'IF'", "'THEN'", "'ELSIF'", "'ELSE'", "'END_IF'", "'CASE'", "'END_CASE'", 
		"'EXIT'", "'CONTINUE'", "'FOR'", "'TO'", "'BY'", "'DO'", "'END_FOR'", 
		"'WHILE'", "'END_WHILE'", "'REPEAT'", "'UNTIL'", "'END_REPEAT'", "'.'", 
		"'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "PARTLY_DIRECT_VARIABLE", 
		"DIRECT_PART_ACCESS", "DIRECT_VARIABLE", "SINGLE_BYTE_STRING", "DOUBLE_BYTE_STRING", 
		"DURATION", "DATE_TIME_VALUE", "DATE_VALUE", "CLOCK_TIME", "GENERAL_REAL", 
		"SIGNED_INT", "UNSIGNED_INT", "BINARY_INT", "OCTAL_INT", "HEX_INT", "BOOLEAN", 
		"USINT", "UINT", "UDINT", "ULINT", "SINT", "INT", "DINT", "LINT", "REAL", 
		"LREAL", "BYTE", "WORD", "DWORD", "LWORD", "BOOL", "FALSE", "TRUE", "STRING", 
		"WSTRING", "CHAR", "WCHAR", "TIME", "LTIME", "TIME_OF_DAY", "LTIME_OF_DAY", 
		"DATE", "LDATE", "DATE_AND_TIME", "LDATE_AND_TIME", "TYPE", "END_TYPE", 
		"ARRAY", "OF", "STRUCT", "OVERLAP", "END_STRUCT", "AT", "REF_TO", "REF", 
		"NULL", "THIS", "VAR_INPUT", "VAR_OUTPUT", "VAR_IN_OUT", "RETAIN", "NON_RETAIN", 
		"END_VAR", "VAR", "CONSTANT", "VAR_TEMP", "VAR_EXTERNAL", "VAR_GLOBAL", 
		"FUNCTION", "END_FUNCTION", "FUNCTION_BLOCK", "FINAL", "ABSTRACT", "EXTENDS", 
		"IMPLEMENTS", "END_FUNCTION_BLOCK", "METHOD", "OVERRIDE", "END_METHOD", 
		"CLASS", "END_CLASS", "INTERFACE", "END_INTERFACE", "PUBLIC", "PROTECTED", 
		"PRIVATE", "INTERNAL", "PROGRAM", "END_PROGRAM", "VAR_ACCESS", "CONFIGURATION", 
		"END_CONFIGURATION", "RESOURCE", "ON", "END_RESOURCE", "READ_WRITE", "READ_ONLY", 
		"TASK", "SINGLE", "INTERVAL", "PRIORITY", "WITH", "VAR_CONFIG", "NAMESPACE", 
		"END_NAMESPACE", "USING", "AND", "OR", "XOR", "NOT", "MOD", "SUPER", "RETURN", 
		"IF", "THEN", "ELSIF", "ELSE", "END_IF", "CASE", "END_CASE", "EXIT", "CONTINUE", 
		"FOR", "TO", "BY", "DO", "END_FOR", "WHILE", "END_WHILE", "REPEAT", "UNTIL", 
		"END_REPEAT", "DOT", "PERCENT", "IDENTIFIER", "PRAGMA", "LINE_COMMENT", 
		"SLASH_COMMENT", "BRACE_COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "st.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static stParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public stParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public stParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConfigDeclarationContext[] configDeclaration() {
			return GetRuleContexts<ConfigDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigDeclarationContext configDeclaration(int i) {
			return GetRuleContext<ConfigDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramDeclarationContext[] programDeclaration() {
			return GetRuleContexts<ProgramDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramDeclarationContext programDeclaration(int i) {
			return GetRuleContext<ProgramDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PouDeclarationContext[] pouDeclaration() {
			return GetRuleContexts<PouDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PouDeclarationContext pouDeclaration(int i) {
			return GetRuleContext<PouDeclarationContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 1441209141308686337L) != 0)) {
				{
				State = 495;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONFIGURATION:
					{
					State = 492;
					configDeclaration();
					}
					break;
				case PROGRAM:
					{
					State = 493;
					programDeclaration();
					}
					break;
				case TYPE:
				case VAR_GLOBAL:
				case FUNCTION:
				case FUNCTION_BLOCK:
				case CLASS:
				case INTERFACE:
				case VAR_ACCESS:
				case NAMESPACE:
				case USING:
					{
					State = 494;
					pouDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigurationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ConfigurationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configurationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigurationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigurationNameContext configurationName() {
		ConfigurationNameContext _localctx = new ConfigurationNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_configurationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ResourceTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceTypeNameContext resourceTypeName() {
		ResourceTypeNameContext _localctx = new ResourceTypeNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_resourceTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(stParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConfigurationNameContext configurationName() {
			return GetRuleContext<ConfigurationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CONFIGURATION() { return GetToken(stParser.END_CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleResourceDeclarationContext singleResourceDeclaration() {
			return GetRuleContext<SingleResourceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext globalVarDeclarations() {
			return GetRuleContext<GlobalVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessDeclarationsContext accessDeclarations() {
			return GetRuleContext<AccessDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigInitContext configInit() {
			return GetRuleContext<ConfigInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceDeclarationContext[] resourceDeclaration() {
			return GetRuleContexts<ResourceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceDeclarationContext resourceDeclaration(int i) {
			return GetRuleContext<ResourceDeclarationContext>(i);
		}
		public ConfigDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigDeclarationContext configDeclaration() {
		ConfigDeclarationContext _localctx = new ConfigDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_configDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(CONFIGURATION);
			State = 505;
			configurationName();
			State = 507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR_GLOBAL) {
				{
				State = 506;
				globalVarDeclarations();
				}
			}

			State = 515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
			case TASK:
				{
				State = 509;
				singleResourceDeclaration();
				}
				break;
			case RESOURCE:
				{
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 510;
					resourceDeclaration();
					}
					}
					State = 513;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==RESOURCE );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR_ACCESS) {
				{
				State = 517;
				accessDeclarations();
				}
			}

			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR_CONFIG) {
				{
				State = 520;
				configInit();
				}
			}

			State = 523;
			Match(END_CONFIGURATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(stParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceNameContext resourceName() {
			return GetRuleContext<ResourceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(stParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceTypeNameContext resourceTypeName() {
			return GetRuleContext<ResourceTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleResourceDeclarationContext singleResourceDeclaration() {
			return GetRuleContext<SingleResourceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_RESOURCE() { return GetToken(stParser.END_RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext globalVarDeclarations() {
			return GetRuleContext<GlobalVarDeclarationsContext>(0);
		}
		public ResourceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceDeclarationContext resourceDeclaration() {
		ResourceDeclarationContext _localctx = new ResourceDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_resourceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(RESOURCE);
			State = 526;
			resourceName();
			State = 527;
			Match(ON);
			State = 528;
			resourceTypeName();
			State = 530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR_GLOBAL) {
				{
				State = 529;
				globalVarDeclarations();
				}
			}

			State = 532;
			singleResourceDeclaration();
			State = 533;
			Match(END_RESOURCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleResourceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TaskConfigContext[] taskConfig() {
			return GetRuleContexts<TaskConfigContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TaskConfigContext taskConfig(int i) {
			return GetRuleContext<TaskConfigContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramConfigContext[] programConfig() {
			return GetRuleContexts<ProgramConfigContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramConfigContext programConfig(int i) {
			return GetRuleContext<ProgramConfigContext>(i);
		}
		public SingleResourceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleResourceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleResourceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleResourceDeclarationContext singleResourceDeclaration() {
		SingleResourceDeclarationContext _localctx = new SingleResourceDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_singleResourceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TASK) {
				{
				{
				State = 535;
				taskConfig();
				State = 536;
				Match(T__0);
				}
				}
				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 543;
				programConfig();
				State = 544;
				Match(T__0);
				}
				}
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==PROGRAM );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ResourceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceNameContext resourceName() {
		ResourceNameContext _localctx = new ResourceNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_resourceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ACCESS() { return GetToken(stParser.VAR_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessDeclarationContext[] accessDeclaration() {
			return GetRuleContexts<AccessDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessDeclarationContext accessDeclaration(int i) {
			return GetRuleContext<AccessDeclarationContext>(i);
		}
		public AccessDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessDeclarationsContext accessDeclarations() {
		AccessDeclarationsContext _localctx = new AccessDeclarationsContext(Context, State);
		EnterRule(_localctx, 14, RULE_accessDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(VAR_ACCESS);
			State = 558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 553;
				accessDeclaration();
				State = 554;
				Match(T__0);
				}
				}
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 561;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessNameContext accessName() {
			return GetRuleContext<AccessNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessPathContext accessPath() {
			return GetRuleContext<AccessPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessDirectionContext accessDirection() {
			return GetRuleContext<AccessDirectionContext>(0);
		}
		public AccessDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessDeclarationContext accessDeclaration() {
		AccessDeclarationContext _localctx = new AccessDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_accessDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			accessName();
			State = 564;
			Match(T__1);
			State = 565;
			accessPath();
			State = 566;
			Match(T__1);
			State = 567;
			dataTypeAccess();
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READ_WRITE || _la==READ_ONLY) {
				{
				State = 568;
				accessDirection();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectVariableContext directVariable() {
			return GetRuleContext<DirectVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceNameContext resourceName() {
			return GetRuleContext<ResourceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramNameContext programName() {
			return GetRuleContext<ProgramNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext[] fbInstanceName() {
			return GetRuleContexts<FbInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext fbInstanceName(int i) {
			return GetRuleContext<FbInstanceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext[] classInstanceName() {
			return GetRuleContexts<ClassInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName(int i) {
			return GetRuleContext<ClassInstanceNameContext>(i);
		}
		public AccessPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessPathContext accessPath() {
		AccessPathContext _localctx = new AccessPathContext(Context, State);
		EnterRule(_localctx, 18, RULE_accessPath);
		int _la;
		try {
			int _alt;
			State = 599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 571;
					resourceName();
					State = 572;
					Match(DOT);
					}
				}

				State = 576;
				directVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 580;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 577;
					resourceName();
					State = 578;
					Match(DOT);
					}
					break;
				}
				State = 585;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 582;
					programName();
					State = 583;
					Match(DOT);
					}
					break;
				}
				State = 595;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 589;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
						case 1:
							{
							State = 587;
							fbInstanceName();
							}
							break;
						case 2:
							{
							State = 588;
							classInstanceName();
							}
							break;
						}
						State = 591;
						Match(DOT);
						}
						} 
					}
					State = 597;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 598;
				symbolicVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext globalVarName() {
			return GetRuleContext<GlobalVarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceNameContext resourceName() {
			return GetRuleContext<ResourceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementNameContext structElementName() {
			return GetRuleContext<StructElementNameContext>(0);
		}
		public GlobalVarAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarAccessContext globalVarAccess() {
		GlobalVarAccessContext _localctx = new GlobalVarAccessContext(Context, State);
		EnterRule(_localctx, 20, RULE_globalVarAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 601;
				resourceName();
				State = 602;
				Match(DOT);
				}
				break;
			}
			State = 606;
			globalVarName();
			State = 609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 607;
				Match(DOT);
				State = 608;
				structElementName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public AccessNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessNameContext accessName() {
		AccessNameContext _localctx = new AccessNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_accessName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramOutputAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramNameContext programName() {
			return GetRuleContext<ProgramNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(stParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		public ProgramOutputAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programOutputAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramOutputAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramOutputAccessContext programOutputAccess() {
		ProgramOutputAccessContext _localctx = new ProgramOutputAccessContext(Context, State);
		EnterRule(_localctx, 24, RULE_programOutputAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			programName();
			State = 614;
			Match(DOT);
			State = 615;
			symbolicVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ProgramNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramNameContext programName() {
		ProgramNameContext _localctx = new ProgramNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_programName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessDirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_WRITE() { return GetToken(stParser.READ_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(stParser.READ_ONLY, 0); }
		public AccessDirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessDirection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessDirectionContext accessDirection() {
		AccessDirectionContext _localctx = new AccessDirectionContext(Context, State);
		EnterRule(_localctx, 28, RULE_accessDirection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			_la = TokenStream.LA(1);
			if ( !(_la==READ_WRITE || _la==READ_ONLY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TaskConfigContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TASK() { return GetToken(stParser.TASK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TaskNameContext taskName() {
			return GetRuleContext<TaskNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TaskInitContext taskInit() {
			return GetRuleContext<TaskInitContext>(0);
		}
		public TaskConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taskConfig; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaskConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TaskConfigContext taskConfig() {
		TaskConfigContext _localctx = new TaskConfigContext(Context, State);
		EnterRule(_localctx, 30, RULE_taskConfig);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(TASK);
			State = 622;
			taskName();
			State = 623;
			taskInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TaskNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public TaskNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taskName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaskName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TaskNameContext taskName() {
		TaskNameContext _localctx = new TaskNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_taskName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TaskInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIORITY() { return GetToken(stParser.PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE() { return GetToken(stParser.SINGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataSourceContext[] dataSource() {
			return GetRuleContexts<DataSourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataSourceContext dataSource(int i) {
			return GetRuleContext<DataSourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(stParser.INTERVAL, 0); }
		public TaskInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taskInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaskInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TaskInitContext taskInit() {
		TaskInitContext _localctx = new TaskInitContext(Context, State);
		EnterRule(_localctx, 34, RULE_taskInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			Match(T__2);
			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SINGLE) {
				{
				State = 628;
				Match(SINGLE);
				State = 629;
				Match(T__3);
				State = 630;
				dataSource();
				State = 631;
				Match(T__4);
				}
			}

			State = 640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERVAL) {
				{
				State = 635;
				Match(INTERVAL);
				State = 636;
				Match(T__3);
				State = 637;
				dataSource();
				State = 638;
				Match(T__4);
				}
			}

			State = 642;
			Match(PRIORITY);
			State = 643;
			Match(T__3);
			State = 644;
			Match(UNSIGNED_INT);
			State = 645;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarAccessContext globalVarAccess() {
			return GetRuleContext<GlobalVarAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramOutputAccessContext programOutputAccess() {
			return GetRuleContext<ProgramOutputAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectVariableContext directVariable() {
			return GetRuleContext<DirectVariableContext>(0);
		}
		public DataSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataSourceContext dataSource() {
		DataSourceContext _localctx = new DataSourceContext(Context, State);
		EnterRule(_localctx, 36, RULE_dataSource);
		try {
			State = 651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 647;
				literalValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 648;
				globalVarAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 649;
				programOutputAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 650;
				directVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramConfigContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(stParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramNameContext programName() {
			return GetRuleContext<ProgramNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramTypeAccessContext programTypeAccess() {
			return GetRuleContext<ProgramTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(stParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TaskNameContext taskName() {
			return GetRuleContext<TaskNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramConfigurationElementsContext programConfigurationElements() {
			return GetRuleContext<ProgramConfigurationElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public ProgramConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programConfig; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramConfigContext programConfig() {
		ProgramConfigContext _localctx = new ProgramConfigContext(Context, State);
		EnterRule(_localctx, 38, RULE_programConfig);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			Match(PROGRAM);
			State = 655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 654;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 657;
			programName();
			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 658;
				Match(WITH);
				State = 659;
				taskName();
				}
			}

			State = 662;
			Match(T__1);
			State = 663;
			programTypeAccess();
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 664;
				Match(T__2);
				State = 665;
				programConfigurationElements();
				State = 666;
				Match(T__5);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramConfigurationElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramConfigurationElementContext[] programConfigurationElement() {
			return GetRuleContexts<ProgramConfigurationElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramConfigurationElementContext programConfigurationElement(int i) {
			return GetRuleContext<ProgramConfigurationElementContext>(i);
		}
		public ProgramConfigurationElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programConfigurationElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramConfigurationElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramConfigurationElementsContext programConfigurationElements() {
		ProgramConfigurationElementsContext _localctx = new ProgramConfigurationElementsContext(Context, State);
		EnterRule(_localctx, 40, RULE_programConfigurationElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			programConfigurationElement();
			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 671;
				Match(T__4);
				State = 672;
				programConfigurationElement();
				}
				}
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramConfigurationElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbTaskContext fbTask() {
			return GetRuleContext<FbTaskContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramCnxnContext programCnxn() {
			return GetRuleContext<ProgramCnxnContext>(0);
		}
		public ProgramConfigurationElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programConfigurationElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramConfigurationElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramConfigurationElementContext programConfigurationElement() {
		ProgramConfigurationElementContext _localctx = new ProgramConfigurationElementContext(Context, State);
		EnterRule(_localctx, 42, RULE_programConfigurationElement);
		try {
			State = 680;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 678;
				fbTask();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 679;
				programCnxn();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbTaskContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext fbInstanceName() {
			return GetRuleContext<FbInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(stParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TaskNameContext taskName() {
			return GetRuleContext<TaskNameContext>(0);
		}
		public FbTaskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbTask; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbTask(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbTaskContext fbTask() {
		FbTaskContext _localctx = new FbTaskContext(Context, State);
		EnterRule(_localctx, 44, RULE_fbTask);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			fbInstanceName();
			State = 683;
			Match(WITH);
			State = 684;
			taskName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramCnxnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramDataSourceContext programDataSource() {
			return GetRuleContext<ProgramDataSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataSinkContext dataSink() {
			return GetRuleContext<DataSinkContext>(0);
		}
		public ProgramCnxnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programCnxn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramCnxn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramCnxnContext programCnxn() {
		ProgramCnxnContext _localctx = new ProgramCnxnContext(Context, State);
		EnterRule(_localctx, 46, RULE_programCnxn);
		try {
			State = 694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 686;
				symbolicVariable();
				State = 687;
				Match(T__3);
				State = 688;
				programDataSource();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 690;
				symbolicVariable();
				State = 691;
				Match(T__6);
				State = 692;
				dataSink();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramDataSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarAccessContext globalVarAccess() {
			return GetRuleContext<GlobalVarAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectVariableContext directVariable() {
			return GetRuleContext<DirectVariableContext>(0);
		}
		public ProgramDataSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programDataSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramDataSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramDataSourceContext programDataSource() {
		ProgramDataSourceContext _localctx = new ProgramDataSourceContext(Context, State);
		EnterRule(_localctx, 48, RULE_programDataSource);
		try {
			State = 700;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 696;
				literalValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 697;
				enumValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 698;
				globalVarAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 699;
				directVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataSinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarAccessContext globalVarAccess() {
			return GetRuleContext<GlobalVarAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectVariableContext directVariable() {
			return GetRuleContext<DirectVariableContext>(0);
		}
		public DataSinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataSink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataSink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataSinkContext dataSink() {
		DataSinkContext _localctx = new DataSinkContext(Context, State);
		EnterRule(_localctx, 50, RULE_dataSink);
		try {
			State = 704;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 702;
				globalVarAccess();
				}
				break;
			case DIRECT_VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 703;
				directVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_CONFIG() { return GetToken(stParser.VAR_CONFIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConfigInstInitContext[] configInstInit() {
			return GetRuleContexts<ConfigInstInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigInstInitContext configInstInit(int i) {
			return GetRuleContext<ConfigInstInitContext>(i);
		}
		public ConfigInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigInitContext configInit() {
		ConfigInitContext _localctx = new ConfigInitContext(Context, State);
		EnterRule(_localctx, 52, RULE_configInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			Match(VAR_CONFIG);
			State = 712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 707;
				configInstInit();
				State = 708;
				Match(T__0);
				}
				}
				State = 714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 715;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigInstInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceNameContext resourceName() {
			return GetRuleContext<ResourceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramNameContext programName() {
			return GetRuleContext<ProgramNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarSpecInitContext locVarSpecInit() {
			return GetRuleContext<LocVarSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext[] fbInstanceName() {
			return GetRuleContexts<FbInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext fbInstanceName(int i) {
			return GetRuleContext<FbInstanceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext[] classInstanceName() {
			return GetRuleContexts<ClassInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName(int i) {
			return GetRuleContext<ClassInstanceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbTypeAccessContext fbTypeAccess() {
			return GetRuleContext<FbTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		public ConfigInstInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configInstInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigInstInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigInstInitContext configInstInit() {
		ConfigInstInitContext _localctx = new ConfigInstInitContext(Context, State);
		EnterRule(_localctx, 54, RULE_configInstInit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			resourceName();
			State = 718;
			Match(DOT);
			State = 719;
			programName();
			State = 720;
			Match(DOT);
			State = 729;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 723;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						State = 721;
						fbInstanceName();
						}
						break;
					case 2:
						{
						State = 722;
						classInstanceName();
						}
						break;
					}
					State = 725;
					Match(DOT);
					}
					} 
				}
				State = 731;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 752;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 732;
				variableName();
				State = 734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 733;
					locatedAt();
					}
				}

				State = 736;
				Match(T__1);
				State = 737;
				locVarSpecInit();
				}
				break;
			case 2:
				{
				State = 747;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					{
					State = 739;
					fbInstanceName();
					State = 740;
					Match(T__1);
					State = 741;
					fbTypeAccess();
					}
					}
					break;
				case 2:
					{
					{
					State = 743;
					classInstanceName();
					State = 744;
					Match(T__1);
					State = 745;
					classTypeAccess();
					}
					}
					break;
				}
				State = 749;
				Match(T__3);
				State = 750;
				structInit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(stParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceHNameContext namespaceHName() {
			return GetRuleContext<NamespaceHNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceElementsContext namespaceElements() {
			return GetRuleContext<NamespaceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_NAMESPACE() { return GetToken(stParser.END_NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(stParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			Match(NAMESPACE);
			State = 756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERNAL) {
				{
				State = 755;
				Match(INTERNAL);
				}
			}

			State = 758;
			namespaceHName();
			State = 762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 759;
				usingDirective();
				}
				}
				State = 764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 765;
			namespaceElements();
			State = 766;
			Match(END_NAMESPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext[] dataTypeDeclaration() {
			return GetRuleContexts<DataTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext dataTypeDeclaration(int i) {
			return GetRuleContext<DataTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationContext[] fbDeclaration() {
			return GetRuleContexts<FbDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationContext fbDeclaration(int i) {
			return GetRuleContext<FbDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext[] interfaceDeclaration() {
			return GetRuleContexts<InterfaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration(int i) {
			return GetRuleContext<InterfaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public NamespaceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceElementsContext namespaceElements() {
		NamespaceElementsContext _localctx = new NamespaceElementsContext(Context, State);
		EnterRule(_localctx, 58, RULE_namespaceElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 774;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TYPE:
					{
					State = 768;
					dataTypeDeclaration();
					}
					break;
				case FUNCTION:
					{
					State = 769;
					functionDeclaration();
					}
					break;
				case FUNCTION_BLOCK:
					{
					State = 770;
					fbDeclaration();
					}
					break;
				case CLASS:
					{
					State = 771;
					classDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 772;
					interfaceDeclaration();
					}
					break;
				case NAMESPACE:
					{
					State = 773;
					namespaceDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 776;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 288230462093000705L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceHNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public NamespaceHNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceHName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceHName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceHNameContext namespaceHName() {
		NamespaceHNameContext _localctx = new NamespaceHNameContext(Context, State);
		EnterRule(_localctx, 60, RULE_namespaceHName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			namespaceName();
			State = 783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 779;
				Match(DOT);
				State = 780;
				namespaceName();
				}
				}
				State = 785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_namespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(stParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceHNameContext[] namespaceHName() {
			return GetRuleContexts<NamespaceHNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceHNameContext namespaceHName(int i) {
			return GetRuleContext<NamespaceHNameContext>(i);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 64, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788;
			Match(USING);
			State = 789;
			namespaceHName();
			State = 794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 790;
				Match(T__4);
				State = 791;
				namespaceHName();
				}
				}
				State = 796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 797;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PouDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext[] globalVarDeclarations() {
			return GetRuleContexts<GlobalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext globalVarDeclarations(int i) {
			return GetRuleContext<GlobalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext[] dataTypeDeclaration() {
			return GetRuleContexts<DataTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext dataTypeDeclaration(int i) {
			return GetRuleContext<DataTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessDeclarationsContext[] accessDeclarations() {
			return GetRuleContexts<AccessDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessDeclarationsContext accessDeclarations(int i) {
			return GetRuleContext<AccessDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationContext[] fbDeclaration() {
			return GetRuleContexts<FbDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationContext fbDeclaration(int i) {
			return GetRuleContext<FbDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext[] interfaceDeclaration() {
			return GetRuleContexts<InterfaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration(int i) {
			return GetRuleContext<InterfaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public PouDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pouDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPouDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PouDeclarationContext pouDeclaration() {
		PouDeclarationContext _localctx = new PouDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_pouDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 799;
				usingDirective();
				}
				}
				State = 804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 813;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 813;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case VAR_GLOBAL:
						{
						State = 805;
						globalVarDeclarations();
						}
						break;
					case TYPE:
						{
						State = 806;
						dataTypeDeclaration();
						}
						break;
					case VAR_ACCESS:
						{
						State = 807;
						accessDeclarations();
						}
						break;
					case FUNCTION:
						{
						State = 808;
						functionDeclaration();
						}
						break;
					case FUNCTION_BLOCK:
						{
						State = 809;
						fbDeclaration();
						}
						break;
					case CLASS:
						{
						State = 810;
						classDeclaration();
						}
						break;
					case INTERFACE:
						{
						State = 811;
						interfaceDeclaration();
						}
						break;
					case NAMESPACE:
						{
						State = 812;
						namespaceDeclaration();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 815;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(stParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramTypeNameContext programTypeName() {
			return GetRuleContext<ProgramTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbBodyContext fbBody() {
			return GetRuleContext<FbBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_PROGRAM() { return GetToken(stParser.END_PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext[] functionVarDeclarations() {
			return GetRuleContexts<FunctionVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext functionVarDeclarations(int i) {
			return GetRuleContext<FunctionVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationsContext[] locVarDeclarations() {
			return GetRuleContexts<LocVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationsContext locVarDeclarations(int i) {
			return GetRuleContext<LocVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramAccessDeclarationsContext[] programAccessDeclarations() {
			return GetRuleContexts<ProgramAccessDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramAccessDeclarationsContext programAccessDeclarations(int i) {
			return GetRuleContext<ProgramAccessDeclarationsContext>(i);
		}
		public ProgramDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramDeclarationContext programDeclaration() {
		ProgramDeclarationContext _localctx = new ProgramDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_programDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(PROGRAM);
			State = 818;
			programTypeName();
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 4294968135L) != 0)) {
				{
				State = 825;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 819;
					ioVarDeclarations();
					}
					break;
				case 2:
					{
					State = 820;
					functionVarDeclarations();
					}
					break;
				case 3:
					{
					State = 821;
					tempVarDeclarations();
					}
					break;
				case 4:
					{
					State = 822;
					otherVarDeclarations();
					}
					break;
				case 5:
					{
					State = 823;
					locVarDeclarations();
					}
					break;
				case 6:
					{
					State = 824;
					programAccessDeclarations();
					}
					break;
				}
				}
				State = 829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 830;
			fbBody();
			State = 831;
			Match(END_PROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ProgramTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramTypeNameContext programTypeName() {
		ProgramTypeNameContext _localctx = new ProgramTypeNameContext(Context, State);
		EnterRule(_localctx, 70, RULE_programTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramTypeNameContext programTypeName() {
			return GetRuleContext<ProgramTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ProgramTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramTypeAccessContext programTypeAccess() {
		ProgramTypeAccessContext _localctx = new ProgramTypeAccessContext(Context, State);
		EnterRule(_localctx, 72, RULE_programTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 835;
					namespaceName();
					State = 836;
					Match(DOT);
					}
					} 
				}
				State = 842;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			State = 843;
			programTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramAccessDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ACCESS() { return GetToken(stParser.VAR_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramAccessDeclarationContext[] programAccessDeclaration() {
			return GetRuleContexts<ProgramAccessDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramAccessDeclarationContext programAccessDeclaration(int i) {
			return GetRuleContext<ProgramAccessDeclarationContext>(i);
		}
		public ProgramAccessDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programAccessDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramAccessDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramAccessDeclarationsContext programAccessDeclarations() {
		ProgramAccessDeclarationsContext _localctx = new ProgramAccessDeclarationsContext(Context, State);
		EnterRule(_localctx, 74, RULE_programAccessDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845;
			Match(VAR_ACCESS);
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 846;
				programAccessDeclaration();
				State = 847;
				Match(T__0);
				}
				}
				State = 853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 854;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramAccessDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessNameContext accessName() {
			return GetRuleContext<AccessNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitPartAccessContext multibitPartAccess() {
			return GetRuleContext<MultibitPartAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessDirectionContext accessDirection() {
			return GetRuleContext<AccessDirectionContext>(0);
		}
		public ProgramAccessDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programAccessDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramAccessDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramAccessDeclarationContext programAccessDeclaration() {
		ProgramAccessDeclarationContext _localctx = new ProgramAccessDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_programAccessDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			accessName();
			State = 857;
			Match(T__1);
			State = 858;
			symbolicVariable();
			State = 860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 859;
				multibitPartAccess();
				}
			}

			State = 862;
			Match(T__1);
			State = 863;
			dataTypeAccess();
			State = 865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READ_WRITE || _la==READ_ONLY) {
				{
				State = 864;
				accessDirection();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(stParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_TYPE() { return GetToken(stParser.END_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public DataTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeDeclarationContext dataTypeDeclaration() {
		DataTypeDeclarationContext _localctx = new DataTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_dataTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			Match(TYPE);
			State = 871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 868;
				typeDeclaration();
				State = 869;
				Match(T__0);
				}
				}
				State = 873;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 15L) != 0) || _la==IDENTIFIER );
			State = 875;
			Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeDeclarationContext simpleTypeDeclaration() {
			return GetRuleContext<SimpleTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeDeclarationContext subrangeTypeDeclaration() {
			return GetRuleContext<SubrangeTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeDeclarationContext enumTypeDeclaration() {
			return GetRuleContext<EnumTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeDeclarationContext arrayTypeDeclaration() {
			return GetRuleContext<ArrayTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeDeclarationContext structTypeDeclaration() {
			return GetRuleContext<StructTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeDeclarationContext stringTypeDeclaration() {
			return GetRuleContext<StringTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeDeclarationContext refTypeDeclaration() {
			return GetRuleContext<RefTypeDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeDeclaration);
		try {
			State = 884;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 877;
				simpleTypeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 878;
				subrangeTypeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 879;
				enumTypeDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 880;
				arrayTypeDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 881;
				structTypeDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 882;
				stringTypeDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 883;
				refTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecInitContext simpleSpecInit() {
			return GetRuleContext<SimpleSpecInitContext>(0);
		}
		public SimpleTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeDeclarationContext simpleTypeDeclaration() {
		SimpleTypeDeclarationContext _localctx = new SimpleTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_simpleTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			simpleTypeName();
			State = 887;
			Match(T__1);
			State = 888;
			simpleSpecInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSpecInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecContext simpleSpec() {
			return GetRuleContext<SimpleSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstExpressionContext constExpression() {
			return GetRuleContext<ConstExpressionContext>(0);
		}
		public SimpleSpecInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSpecInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSpecInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSpecInitContext simpleSpecInit() {
		SimpleSpecInitContext _localctx = new SimpleSpecInitContext(Context, State);
		EnterRule(_localctx, 84, RULE_simpleSpecInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890;
			simpleSpec();
			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 891;
				Match(T__3);
				State = 892;
				constExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeNameContext elementTypeName() {
			return GetRuleContext<ElementTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeAccessContext simpleTypeAccess() {
			return GetRuleContext<SimpleTypeAccessContext>(0);
		}
		public SimpleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSpecContext simpleSpec() {
		SimpleSpecContext _localctx = new SimpleSpecContext(Context, State);
		EnterRule(_localctx, 86, RULE_simpleSpec);
		try {
			State = 897;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 895;
				elementTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 896;
				simpleTypeAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeNameContext numericTypeName() {
			return GetRuleContext<NumericTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTypeNameContext boolTypeName() {
			return GetRuleContext<BoolTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsTypeNameContext multibitsTypeName() {
			return GetRuleContext<MultibitsTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext stringTypeName() {
			return GetRuleContext<StringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTypeNameContext dateTypeName() {
			return GetRuleContext<DateTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationTypeNameContext durationTypeName() {
			return GetRuleContext<DurationTypeNameContext>(0);
		}
		public ElementTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementTypeNameContext elementTypeName() {
		ElementTypeNameContext _localctx = new ElementTypeNameContext(Context, State);
		EnterRule(_localctx, 88, RULE_elementTypeName);
		try {
			State = 906;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 899;
				numericTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 900;
				boolTypeName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 901;
				derivedTypeAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 902;
				multibitsTypeName();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 903;
				stringTypeName();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 904;
				dateTypeName();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 905;
				durationTypeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeNameContext realTypeName() {
			return GetRuleContext<RealTypeNameContext>(0);
		}
		public NumericTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeNameContext numericTypeName() {
		NumericTypeNameContext _localctx = new NumericTypeNameContext(Context, State);
		EnterRule(_localctx, 90, RULE_numericTypeName);
		try {
			State = 910;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 908;
				intTypeName();
				}
				break;
			case REAL:
			case LREAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 909;
				realTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeNameContext subrangeTypeName() {
			return GetRuleContext<SubrangeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecInitContext subrangeSpecInit() {
			return GetRuleContext<SubrangeSpecInitContext>(0);
		}
		public SubrangeTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeDeclarationContext subrangeTypeDeclaration() {
		SubrangeTypeDeclarationContext _localctx = new SubrangeTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_subrangeTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912;
			subrangeTypeName();
			State = 913;
			Match(T__1);
			State = 914;
			subrangeSpecInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeSpecInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecContext subrangeSpec() {
			return GetRuleContext<SubrangeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_INT() { return GetToken(stParser.SIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public SubrangeSpecInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeSpecInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeSpecInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeSpecInitContext subrangeSpecInit() {
		SubrangeSpecInitContext _localctx = new SubrangeSpecInitContext(Context, State);
		EnterRule(_localctx, 94, RULE_subrangeSpecInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 916;
			subrangeSpec();
			State = 919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 917;
				Match(T__3);
				State = 918;
				_la = TokenStream.LA(1);
				if ( !(_la==SIGNED_INT || _la==UNSIGNED_INT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeAccessContext subrangeTypeAccess() {
			return GetRuleContext<SubrangeTypeAccessContext>(0);
		}
		public SubrangeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeSpecContext subrangeSpec() {
		SubrangeSpecContext _localctx = new SubrangeSpecContext(Context, State);
		EnterRule(_localctx, 96, RULE_subrangeSpec);
		try {
			State = 927;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 921;
				intTypeName();
				State = 922;
				Match(T__2);
				State = 923;
				subrange();
				State = 924;
				Match(T__5);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 926;
				subrangeTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstExpressionContext[] constExpression() {
			return GetRuleContexts<ConstExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstExpressionContext constExpression(int i) {
			return GetRuleContext<ConstExpressionContext>(i);
		}
		public SubrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeContext subrange() {
		SubrangeContext _localctx = new SubrangeContext(Context, State);
		EnterRule(_localctx, 98, RULE_subrange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			constExpression();
			State = 930;
			Match(T__7);
			State = 931;
			constExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecInitContext enumSpecInit() {
			return GetRuleContext<EnumSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedSpecInitContext namedSpecInit() {
			return GetRuleContext<NamedSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeNameContext elementTypeName() {
			return GetRuleContext<ElementTypeNameContext>(0);
		}
		public EnumTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeDeclarationContext enumTypeDeclaration() {
		EnumTypeDeclarationContext _localctx = new EnumTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 100, RULE_enumTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			enumTypeName();
			State = 934;
			Match(T__1);
			State = 940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				{
				State = 936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & 1827938064400435L) != 0) || _la==IDENTIFIER) {
					{
					State = 935;
					elementTypeName();
					}
				}

				State = 938;
				namedSpecInit();
				}
				}
				break;
			case 2:
				{
				State = 939;
				enumSpecInit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedSpecInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueSpecContext[] enumValueSpec() {
			return GetRuleContexts<EnumValueSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueSpecContext enumValueSpec(int i) {
			return GetRuleContext<EnumValueSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public NamedSpecInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedSpecInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedSpecInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedSpecInitContext namedSpecInit() {
		NamedSpecInitContext _localctx = new NamedSpecInitContext(Context, State);
		EnterRule(_localctx, 102, RULE_namedSpecInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942;
			Match(T__2);
			State = 943;
			enumValueSpec();
			State = 948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 944;
				Match(T__4);
				State = 945;
				enumValueSpec();
				}
				}
				State = 950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 951;
			Match(T__5);
			State = 954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 952;
				Match(T__3);
				State = 953;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeAccessContext enumTypeAccess() {
			return GetRuleContext<EnumTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(stParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(stParser.IDENTIFIER, i);
		}
		public EnumSpecInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecInitContext enumSpecInit() {
		EnumSpecInitContext _localctx = new EnumSpecInitContext(Context, State);
		EnterRule(_localctx, 104, RULE_enumSpecInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				{
				State = 956;
				Match(T__2);
				State = 957;
				Match(IDENTIFIER);
				State = 962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 958;
					Match(T__4);
					State = 959;
					Match(IDENTIFIER);
					}
					}
					State = 964;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 965;
				Match(T__5);
				}
				}
				break;
			case IDENTIFIER:
				{
				State = 966;
				enumTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 969;
				Match(T__3);
				State = 970;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstExpressionContext constExpression() {
			return GetRuleContext<ConstExpressionContext>(0);
		}
		public EnumValueSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueSpecContext enumValueSpec() {
		EnumValueSpecContext _localctx = new EnumValueSpecContext(Context, State);
		EnterRule(_localctx, 106, RULE_enumValueSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			Match(IDENTIFIER);
			State = 979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 974;
				Match(T__3);
				State = 977;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 975;
					intLiteral();
					}
					break;
				case 2:
					{
					State = 976;
					constExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 108, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 981;
				enumTypeName();
				State = 982;
				Match(T__8);
				}
				break;
			}
			State = 986;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeNameContext arrayTypeName() {
			return GetRuleContext<ArrayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecInitContext arraySpecInit() {
			return GetRuleContext<ArraySpecInitContext>(0);
		}
		public ArrayTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeDeclarationContext arrayTypeDeclaration() {
		ArrayTypeDeclarationContext _localctx = new ArrayTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_arrayTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			arrayTypeName();
			State = 989;
			Match(T__1);
			State = 990;
			arraySpecInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySpecInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecContext arraySpec() {
			return GetRuleContext<ArraySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArraySpecInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySpecInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySpecInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySpecInitContext arraySpecInit() {
		ArraySpecInitContext _localctx = new ArraySpecInitContext(Context, State);
		EnterRule(_localctx, 112, RULE_arraySpecInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 992;
			arraySpec();
			State = 995;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 993;
				Match(T__3);
				State = 994;
				arrayInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeAccessContext arrayTypeAccess() {
			return GetRuleContext<ArrayTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(stParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext[] subrange() {
			return GetRuleContexts<SubrangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange(int i) {
			return GetRuleContext<SubrangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		public ArraySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySpecContext arraySpec() {
		ArraySpecContext _localctx = new ArraySpecContext(Context, State);
		EnterRule(_localctx, 114, RULE_arraySpec);
		int _la;
		try {
			State = 1012;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 997;
				arrayTypeAccess();
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 998;
				Match(ARRAY);
				State = 999;
				Match(T__9);
				State = 1000;
				subrange();
				State = 1005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 1001;
					Match(T__4);
					State = 1002;
					subrange();
					}
					}
					State = 1007;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1008;
				Match(T__10);
				State = 1009;
				Match(OF);
				State = 1010;
				dataTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeNameContext elementTypeName() {
			return GetRuleContext<ElementTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		public DataTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeAccessContext dataTypeAccess() {
		DataTypeAccessContext _localctx = new DataTypeAccessContext(Context, State);
		EnterRule(_localctx, 116, RULE_dataTypeAccess);
		try {
			State = 1016;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1014;
				elementTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1015;
				derivedTypeAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitContext[] arrayElementInit() {
			return GetRuleContexts<ArrayElementInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitContext arrayElementInit(int i) {
			return GetRuleContext<ArrayElementInitContext>(i);
		}
		public ArrayInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitContext arrayInit() {
		ArrayInitContext _localctx = new ArrayInitContext(Context, State);
		EnterRule(_localctx, 118, RULE_arrayInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018;
			Match(T__9);
			State = 1019;
			arrayElementInit();
			State = 1024;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 1020;
				Match(T__4);
				State = 1021;
				arrayElementInit();
				}
				}
				State = 1026;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1027;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitValueContext arrayElementInitValue() {
			return GetRuleContext<ArrayElementInitValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public ArrayElementInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementInitContext arrayElementInit() {
		ArrayElementInitContext _localctx = new ArrayElementInitContext(Context, State);
		EnterRule(_localctx, 120, RULE_arrayElementInit);
		int _la;
		try {
			State = 1036;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1029;
				arrayElementInitValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1030;
				Match(UNSIGNED_INT);
				State = 1031;
				Match(T__2);
				State = 1033;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8297931340792L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 117473273L) != 0) || _la==NOT || _la==IDENTIFIER) {
					{
					State = 1032;
					arrayElementInitValue();
					}
				}

				State = 1035;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementInitValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstExpressionContext constExpression() {
			return GetRuleContext<ConstExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArrayElementInitValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementInitValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementInitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementInitValueContext arrayElementInitValue() {
		ArrayElementInitValueContext _localctx = new ArrayElementInitValueContext(Context, State);
		EnterRule(_localctx, 122, RULE_arrayElementInitValue);
		try {
			State = 1042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1038;
				constExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1039;
				enumValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1040;
				structInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1041;
				arrayInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecContext structSpec() {
			return GetRuleContext<StructSpecContext>(0);
		}
		public StructTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeDeclarationContext structTypeDeclaration() {
		StructTypeDeclarationContext _localctx = new StructTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_structTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1044;
			structTypeName();
			State = 1045;
			Match(T__1);
			State = 1046;
			structSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecInitContext structSpecInit() {
			return GetRuleContext<StructSpecInitContext>(0);
		}
		public StructSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecContext structSpec() {
		StructSpecContext _localctx = new StructSpecContext(Context, State);
		EnterRule(_localctx, 126, RULE_structSpec);
		try {
			State = 1050;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRUCT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1048;
				structDeclaration();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1049;
				structSpecInit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		public StructSpecInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpecInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpecInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecInitContext structSpecInit() {
		StructSpecInitContext _localctx = new StructSpecInitContext(Context, State);
		EnterRule(_localctx, 128, RULE_structSpecInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			structTypeAccess();
			State = 1055;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 1053;
				Match(T__3);
				State = 1054;
				structInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(stParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_STRUCT() { return GetToken(stParser.END_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAP() { return GetToken(stParser.OVERLAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementDeclarationContext[] structElementDeclaration() {
			return GetRuleContexts<StructElementDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementDeclarationContext structElementDeclaration(int i) {
			return GetRuleContext<StructElementDeclarationContext>(i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1057;
			Match(STRUCT);
			State = 1059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERLAP) {
				{
				State = 1058;
				Match(OVERLAP);
				}
			}

			State = 1064;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1061;
				structElementDeclaration();
				State = 1062;
				Match(T__0);
				}
				}
				State = 1066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 1068;
			Match(END_STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructElementNameContext structElementName() {
			return GetRuleContext<StructElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecInitContext simpleSpecInit() {
			return GetRuleContext<SimpleSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecInitContext subrangeSpecInit() {
			return GetRuleContext<SubrangeSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecInitContext enumSpecInit() {
			return GetRuleContext<EnumSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecInitContext arraySpecInit() {
			return GetRuleContext<ArraySpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecInitContext structSpecInit() {
			return GetRuleContext<StructSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitPartAccessContext multibitPartAccess() {
			return GetRuleContext<MultibitPartAccessContext>(0);
		}
		public StructElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementDeclarationContext structElementDeclaration() {
		StructElementDeclarationContext _localctx = new StructElementDeclarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_structElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			structElementName();
			State = 1075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 1071;
				locatedAt();
				State = 1073;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 1072;
					multibitPartAccess();
					}
				}

				}
			}

			State = 1077;
			Match(T__1);
			State = 1083;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 1078;
				simpleSpecInit();
				}
				break;
			case 2:
				{
				State = 1079;
				subrangeSpecInit();
				}
				break;
			case 3:
				{
				State = 1080;
				enumSpecInit();
				}
				break;
			case 4:
				{
				State = 1081;
				arraySpecInit();
				}
				break;
			case 5:
				{
				State = 1082;
				structSpecInit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedAtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(stParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectVariableContext directVariable() {
			return GetRuleContext<DirectVariableContext>(0);
		}
		public LocatedAtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedAt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedAt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedAtContext locatedAt() {
		LocatedAtContext _localctx = new LocatedAtContext(Context, State);
		EnterRule(_localctx, 134, RULE_locatedAt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1085;
			Match(AT);
			State = 1086;
			directVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitPartAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(stParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_PART_ACCESS() { return GetToken(stParser.DIRECT_PART_ACCESS, 0); }
		public MultibitPartAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitPartAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitPartAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitPartAccessContext multibitPartAccess() {
		MultibitPartAccessContext _localctx = new MultibitPartAccessContext(Context, State);
		EnterRule(_localctx, 136, RULE_multibitPartAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1088;
			Match(DOT);
			State = 1089;
			_la = TokenStream.LA(1);
			if ( !(_la==DIRECT_PART_ACCESS || _la==UNSIGNED_INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StructElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementNameContext structElementName() {
		StructElementNameContext _localctx = new StructElementNameContext(Context, State);
		EnterRule(_localctx, 138, RULE_structElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructElementInitContext[] structElementInit() {
			return GetRuleContexts<StructElementInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementInitContext structElementInit(int i) {
			return GetRuleContext<StructElementInitContext>(i);
		}
		public StructInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructInitContext structInit() {
		StructInitContext _localctx = new StructInitContext(Context, State);
		EnterRule(_localctx, 140, RULE_structInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1093;
			Match(T__2);
			State = 1094;
			structElementInit();
			State = 1099;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 1095;
				Match(T__4);
				State = 1096;
				structElementInit();
				}
				}
				State = 1101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1102;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructElementNameContext structElementName() {
			return GetRuleContext<StructElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstExpressionContext constExpression() {
			return GetRuleContext<ConstExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefValueContext refValue() {
			return GetRuleContext<RefValueContext>(0);
		}
		public StructElementInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementInitContext structElementInit() {
		StructElementInitContext _localctx = new StructElementInitContext(Context, State);
		EnterRule(_localctx, 142, RULE_structElementInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1104;
			structElementName();
			State = 1105;
			Match(T__3);
			State = 1111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 1106;
				constExpression();
				}
				break;
			case 2:
				{
				State = 1107;
				enumValue();
				}
				break;
			case 3:
				{
				State = 1108;
				arrayInit();
				}
				break;
			case 4:
				{
				State = 1109;
				structInit();
				}
				break;
			case 5:
				{
				State = 1110;
				refValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext[] stringTypeName() {
			return GetRuleContexts<StringTypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext stringTypeName(int i) {
			return GetRuleContext<StringTypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharStringContext charString() {
			return GetRuleContext<CharStringContext>(0);
		}
		public StringTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeDeclarationContext stringTypeDeclaration() {
		StringTypeDeclarationContext _localctx = new StringTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 144, RULE_stringTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			stringTypeName();
			State = 1114;
			Match(T__1);
			State = 1115;
			stringTypeName();
			State = 1118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 1116;
				Match(T__3);
				State = 1117;
				charString();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeNameContext refTypeName() {
			return GetRuleContext<RefTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefSpecInitContext refSpecInit() {
			return GetRuleContext<RefSpecInitContext>(0);
		}
		public RefTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefTypeDeclarationContext refTypeDeclaration() {
		RefTypeDeclarationContext _localctx = new RefTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 146, RULE_refTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120;
			refTypeName();
			State = 1121;
			Match(T__1);
			State = 1122;
			refSpecInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefSpecInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefSpecContext refSpec() {
			return GetRuleContext<RefSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefValueContext refValue() {
			return GetRuleContext<RefValueContext>(0);
		}
		public RefSpecInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refSpecInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefSpecInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefSpecInitContext refSpecInit() {
		RefSpecInitContext _localctx = new RefSpecInitContext(Context, State);
		EnterRule(_localctx, 148, RULE_refSpecInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1124;
			refSpec();
			State = 1127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 1125;
				Match(T__3);
				State = 1126;
				refValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REF_TO() { return GetTokens(stParser.REF_TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF_TO(int i) {
			return GetToken(stParser.REF_TO, i);
		}
		public RefSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefSpecContext refSpec() {
		RefSpecContext _localctx = new RefSpecContext(Context, State);
		EnterRule(_localctx, 150, RULE_refSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1129;
				Match(REF_TO);
				}
				}
				State = 1132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==REF_TO );
			State = 1134;
			dataTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public RefTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefTypeNameContext refTypeName() {
		RefTypeNameContext _localctx = new RefTypeNameContext(Context, State);
		EnterRule(_localctx, 152, RULE_refTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeNameContext refTypeName() {
			return GetRuleContext<RefTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public RefTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefTypeAccessContext refTypeAccess() {
		RefTypeAccessContext _localctx = new RefTypeAccessContext(Context, State);
		EnterRule(_localctx, 154, RULE_refTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1143;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1138;
					namespaceName();
					State = 1139;
					Match(DOT);
					}
					} 
				}
				State = 1145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			}
			State = 1146;
			refTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public RefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefNameContext refName() {
		RefNameContext _localctx = new RefNameContext(Context, State);
		EnterRule(_localctx, 156, RULE_refName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1148;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefAddressContext refAddress() {
			return GetRuleContext<RefAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(stParser.NULL, 0); }
		public RefValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefValueContext refValue() {
		RefValueContext _localctx = new RefValueContext(Context, State);
		EnterRule(_localctx, 158, RULE_refValue);
		try {
			State = 1152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1150;
				refAddress();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1151;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(stParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext fbInstanceName() {
			return GetRuleContext<FbInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName() {
			return GetRuleContext<ClassInstanceNameContext>(0);
		}
		public RefAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefAddressContext refAddress() {
		RefAddressContext _localctx = new RefAddressContext(Context, State);
		EnterRule(_localctx, 160, RULE_refAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1154;
			Match(REF);
			State = 1155;
			Match(T__2);
			State = 1159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 1156;
				symbolicVariable();
				}
				break;
			case 2:
				{
				State = 1157;
				fbInstanceName();
				}
				break;
			case 3:
				{
				State = 1158;
				classInstanceName();
				}
				break;
			}
			State = 1161;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefNameContext[] refName() {
			return GetRuleContexts<RefNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefNameContext refName(int i) {
			return GetRuleContext<RefNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefDereferenceContext refDereference() {
			return GetRuleContext<RefDereferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefValueContext refValue() {
			return GetRuleContext<RefValueContext>(0);
		}
		public RefAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefAssignContext refAssign() {
		RefAssignContext _localctx = new RefAssignContext(Context, State);
		EnterRule(_localctx, 162, RULE_refAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1163;
			refName();
			State = 1164;
			Match(T__3);
			State = 1168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 1165;
				refName();
				}
				break;
			case 2:
				{
				State = 1166;
				refDereference();
				}
				break;
			case 3:
				{
				State = 1167;
				refValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefDereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefNameContext refName() {
			return GetRuleContext<RefNameContext>(0);
		}
		public RefDereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refDereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefDereferenceContext refDereference() {
		RefDereferenceContext _localctx = new RefDereferenceContext(Context, State);
		EnterRule(_localctx, 164, RULE_refDereference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1170;
			refName();
			State = 1172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1171;
				Match(T__11);
				}
				}
				State = 1174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__11 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FbTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbTypeNameContext fbTypeName() {
		FbTypeNameContext _localctx = new FbTypeNameContext(Context, State);
		EnterRule(_localctx, 166, RULE_fbTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1176;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbTypeNameContext fbTypeName() {
			return GetRuleContext<FbTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public FbTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbTypeAccessContext fbTypeAccess() {
		FbTypeAccessContext _localctx = new FbTypeAccessContext(Context, State);
		EnterRule(_localctx, 168, RULE_fbTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1178;
					namespaceName();
					State = 1179;
					Match(DOT);
					}
					} 
				}
				State = 1185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
			}
			State = 1186;
			fbTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_BLOCK() { return GetToken(stParser.FUNCTION_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FbNameContext fbName() {
			return GetRuleContext<FbNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbBodyContext fbBody() {
			return GetRuleContext<FbBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FUNCTION_BLOCK() { return GetToken(stParser.END_FUNCTION_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(stParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceNameListContext interfaceNameList() {
			return GetRuleContext<InterfaceNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbIOVarDeclarationsContext[] fbIOVarDeclarations() {
			return GetRuleContexts<FbIOVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbIOVarDeclarationsContext fbIOVarDeclarations(int i) {
			return GetRuleContext<FbIOVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext[] functionVarDeclarations() {
			return GetRuleContexts<FunctionVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext functionVarDeclarations(int i) {
			return GetRuleContext<FunctionVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FbTypeAccessContext fbTypeAccess() {
			return GetRuleContext<FbTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		public FbDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbDeclarationContext fbDeclaration() {
		FbDeclarationContext _localctx = new FbDeclarationContext(Context, State);
		EnterRule(_localctx, 170, RULE_fbDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			Match(FUNCTION_BLOCK);
			State = 1190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 1189;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1192;
			fbName();
			State = 1196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1193;
				usingDirective();
				}
				}
				State = 1198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1199;
				Match(EXTENDS);
				State = 1202;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 1200;
					fbTypeAccess();
					}
					break;
				case 2:
					{
					State = 1201;
					classTypeAccess();
					}
					break;
				}
				}
			}

			State = 1208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1206;
				Match(IMPLEMENTS);
				State = 1207;
				interfaceNameList();
				}
			}

			State = 1216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 839L) != 0)) {
				{
				State = 1214;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 1210;
					fbIOVarDeclarations();
					}
					break;
				case 2:
					{
					State = 1211;
					functionVarDeclarations();
					}
					break;
				case 3:
					{
					State = 1212;
					tempVarDeclarations();
					}
					break;
				case 4:
					{
					State = 1213;
					otherVarDeclarations();
					}
					break;
				}
				}
				State = 1218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 1219;
				methodDeclaration();
				}
				}
				State = 1224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1225;
			fbBody();
			State = 1226;
			Match(END_FUNCTION_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbIOVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbInputDeclarationsContext fbInputDeclarations() {
			return GetRuleContext<FbInputDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbOutputDeclarationsContext fbOutputDeclarations() {
			return GetRuleContext<FbOutputDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutDeclarationsContext inOutDeclarations() {
			return GetRuleContext<InOutDeclarationsContext>(0);
		}
		public FbIOVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbIOVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbIOVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbIOVarDeclarationsContext fbIOVarDeclarations() {
		FbIOVarDeclarationsContext _localctx = new FbIOVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 172, RULE_fbIOVarDeclarations);
		try {
			State = 1231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_INPUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1228;
				fbInputDeclarations();
				}
				break;
			case VAR_OUTPUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1229;
				fbOutputDeclarations();
				}
				break;
			case VAR_IN_OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1230;
				inOutDeclarations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbInputDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_INPUT() { return GetToken(stParser.VAR_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FbInputDeclarationContext[] fbInputDeclaration() {
			return GetRuleContexts<FbInputDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInputDeclarationContext fbInputDeclaration(int i) {
			return GetRuleContext<FbInputDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public FbInputDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbInputDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbInputDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbInputDeclarationsContext fbInputDeclarations() {
		FbInputDeclarationsContext _localctx = new FbInputDeclarationsContext(Context, State);
		EnterRule(_localctx, 174, RULE_fbInputDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1233;
			Match(VAR_INPUT);
			State = 1235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1234;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1237;
				fbInputDeclaration();
				State = 1238;
				Match(T__0);
				}
				}
				State = 1244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1245;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbInputDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public FbInputDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbInputDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbInputDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbInputDeclarationContext fbInputDeclaration() {
		FbInputDeclarationContext _localctx = new FbInputDeclarationContext(Context, State);
		EnterRule(_localctx, 176, RULE_fbInputDeclaration);
		try {
			State = 1249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1247;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1248;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbOutputDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_OUTPUT() { return GetToken(stParser.VAR_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FbOutputDeclarationContext[] fbOutputDeclaration() {
			return GetRuleContexts<FbOutputDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbOutputDeclarationContext fbOutputDeclaration(int i) {
			return GetRuleContext<FbOutputDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public FbOutputDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbOutputDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbOutputDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbOutputDeclarationsContext fbOutputDeclarations() {
		FbOutputDeclarationsContext _localctx = new FbOutputDeclarationsContext(Context, State);
		EnterRule(_localctx, 178, RULE_fbOutputDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251;
			Match(VAR_OUTPUT);
			State = 1253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1252;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1255;
				fbOutputDeclaration();
				State = 1256;
				Match(T__0);
				}
				}
				State = 1262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1263;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbOutputDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public FbOutputDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbOutputDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbOutputDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbOutputDeclarationContext fbOutputDeclaration() {
		FbOutputDeclarationContext _localctx = new FbOutputDeclarationContext(Context, State);
		EnterRule(_localctx, 180, RULE_fbOutputDeclaration);
		try {
			State = 1267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1265;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1266;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RetainVarDeclarationsContext retainVarDeclarations() {
			return GetRuleContext<RetainVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonRetainVarDeclarationsContext nonRetainVarDeclarations() {
			return GetRuleContext<NonRetainVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocPartlyVarDeclarationContext locPartlyVarDeclaration() {
			return GetRuleContext<LocPartlyVarDeclarationContext>(0);
		}
		public OtherVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherVarDeclarationsContext otherVarDeclarations() {
		OtherVarDeclarationsContext _localctx = new OtherVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 182, RULE_otherVarDeclarations);
		try {
			State = 1272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1269;
				retainVarDeclarations();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1270;
				nonRetainVarDeclarations();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1271;
				locPartlyVarDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonRetainVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecContext accessSpec() {
			return GetRuleContext<AccessSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		public NonRetainVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonRetainVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonRetainVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonRetainVarDeclarationsContext nonRetainVarDeclarations() {
		NonRetainVarDeclarationsContext _localctx = new NonRetainVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 184, RULE_nonRetainVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1274;
			Match(VAR);
			State = 1275;
			Match(NON_RETAIN);
			State = 1277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & 15L) != 0)) {
				{
				State = 1276;
				accessSpec();
				}
			}

			State = 1284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1279;
				varDeclarationInit();
				State = 1280;
				Match(T__0);
				}
				}
				State = 1286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1287;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FbBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbBodyContext fbBody() {
		FbBodyContext _localctx = new FbBodyContext(Context, State);
		EnterRule(_localctx, 186, RULE_fbBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1289;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(stParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecContext accessSpec() {
			return GetRuleContext<AccessSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_METHOD() { return GetToken(stParser.END_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(stParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext[] functionVarDeclarations() {
			return GetRuleContexts<FunctionVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext functionVarDeclarations(int i) {
			return GetRuleContext<FunctionVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 188, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1291;
			Match(METHOD);
			State = 1292;
			accessSpec();
			State = 1294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 1293;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERRIDE) {
				{
				State = 1296;
				Match(OVERRIDE);
				}
			}

			State = 1299;
			methodName();
			State = 1302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 1300;
				Match(T__1);
				State = 1301;
				dataTypeAccess();
				}
			}

			State = 1309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 839L) != 0)) {
				{
				State = 1307;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR_INPUT:
				case VAR_OUTPUT:
				case VAR_IN_OUT:
					{
					State = 1304;
					ioVarDeclarations();
					}
					break;
				case VAR:
				case VAR_EXTERNAL:
					{
					State = 1305;
					functionVarDeclarations();
					}
					break;
				case VAR_TEMP:
					{
					State = 1306;
					tempVarDeclarations();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1312;
			functionBody();
			State = 1313;
			Match(END_METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 190, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1315;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleElementTypeAccessContext singleElementTypeAccess() {
			return GetRuleContext<SingleElementTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeAccessContext arrayTypeAccess() {
			return GetRuleContext<ArrayTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeAccessContext stringTypeAccess() {
			return GetRuleContext<StringTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeAccessContext refTypeAccess() {
			return GetRuleContext<RefTypeAccessContext>(0);
		}
		public DerivedTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTypeAccessContext derivedTypeAccess() {
		DerivedTypeAccessContext _localctx = new DerivedTypeAccessContext(Context, State);
		EnterRule(_localctx, 192, RULE_derivedTypeAccess);
		try {
			State = 1322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1317;
				singleElementTypeAccess();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1318;
				arrayTypeAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1319;
				structTypeAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1320;
				stringTypeAccess();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1321;
				refTypeAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext stringTypeName() {
			return GetRuleContext<StringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public StringTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeAccessContext stringTypeAccess() {
		StringTypeAccessContext _localctx = new StringTypeAccessContext(Context, State);
		EnterRule(_localctx, 194, RULE_stringTypeAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1324;
				namespaceName();
				State = 1325;
				Match(DOT);
				}
				}
				State = 1331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1332;
			stringTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(stParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WCHAR() { return GetToken(stParser.WCHAR, 0); }
		public StringTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeNameContext stringTypeName() {
		StringTypeNameContext _localctx = new StringTypeNameContext(Context, State);
		EnterRule(_localctx, 196, RULE_stringTypeName);
		int _la;
		try {
			State = 1342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case WSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1334;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==WSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 1335;
					Match(T__9);
					State = 1336;
					Match(UNSIGNED_INT);
					State = 1337;
					Match(T__10);
					}
				}

				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1340;
				Match(CHAR);
				}
				break;
			case WCHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1341;
				Match(WCHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleElementTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeAccessContext simpleTypeAccess() {
			return GetRuleContext<SimpleTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeAccessContext subrangeTypeAccess() {
			return GetRuleContext<SubrangeTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeAccessContext enumTypeAccess() {
			return GetRuleContext<EnumTypeAccessContext>(0);
		}
		public SingleElementTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleElementTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleElementTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleElementTypeAccessContext singleElementTypeAccess() {
		SingleElementTypeAccessContext _localctx = new SingleElementTypeAccessContext(Context, State);
		EnterRule(_localctx, 198, RULE_singleElementTypeAccess);
		try {
			State = 1347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1344;
				simpleTypeAccess();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1345;
				subrangeTypeAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1346;
				enumTypeAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public SimpleTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeAccessContext simpleTypeAccess() {
		SimpleTypeAccessContext _localctx = new SimpleTypeAccessContext(Context, State);
		EnterRule(_localctx, 200, RULE_simpleTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1354;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1349;
					namespaceName();
					State = 1350;
					Match(DOT);
					}
					} 
				}
				State = 1356;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			}
			State = 1357;
			simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(Context, State);
		EnterRule(_localctx, 202, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1359;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeNameContext subrangeTypeName() {
			return GetRuleContext<SubrangeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public SubrangeTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeAccessContext subrangeTypeAccess() {
		SubrangeTypeAccessContext _localctx = new SubrangeTypeAccessContext(Context, State);
		EnterRule(_localctx, 204, RULE_subrangeTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1366;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1361;
					namespaceName();
					State = 1362;
					Match(DOT);
					}
					} 
				}
				State = 1368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			}
			State = 1369;
			subrangeTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public SubrangeTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeNameContext subrangeTypeName() {
		SubrangeTypeNameContext _localctx = new SubrangeTypeNameContext(Context, State);
		EnterRule(_localctx, 206, RULE_subrangeTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public EnumTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeAccessContext enumTypeAccess() {
		EnumTypeAccessContext _localctx = new EnumTypeAccessContext(Context, State);
		EnterRule(_localctx, 208, RULE_enumTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1378;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1373;
					namespaceName();
					State = 1374;
					Match(DOT);
					}
					} 
				}
				State = 1380;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			}
			State = 1381;
			enumTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public EnumTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeNameContext enumTypeName() {
		EnumTypeNameContext _localctx = new EnumTypeNameContext(Context, State);
		EnterRule(_localctx, 210, RULE_enumTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1383;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeNameContext arrayTypeName() {
			return GetRuleContext<ArrayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ArrayTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeAccessContext arrayTypeAccess() {
		ArrayTypeAccessContext _localctx = new ArrayTypeAccessContext(Context, State);
		EnterRule(_localctx, 212, RULE_arrayTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1390;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1385;
					namespaceName();
					State = 1386;
					Match(DOT);
					}
					} 
				}
				State = 1392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			}
			State = 1393;
			arrayTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ArrayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeNameContext arrayTypeName() {
		ArrayTypeNameContext _localctx = new ArrayTypeNameContext(Context, State);
		EnterRule(_localctx, 214, RULE_arrayTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1395;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public StructTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeAccessContext structTypeAccess() {
		StructTypeAccessContext _localctx = new StructTypeAccessContext(Context, State);
		EnterRule(_localctx, 216, RULE_structTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1402;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1397;
					namespaceName();
					State = 1398;
					Match(DOT);
					}
					} 
				}
				State = 1404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			}
			State = 1405;
			structTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StructTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeNameContext structTypeName() {
		StructTypeNameContext _localctx = new StructTypeNameContext(Context, State);
		EnterRule(_localctx, 218, RULE_structTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1407;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectVariableContext directVariable() {
			return GetRuleContext<DirectVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 220, RULE_variable);
		try {
			State = 1411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIRECT_VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1409;
				directVariable();
				}
				break;
			case THIS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1410;
				symbolicVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolicVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarAccessContext varAccess() {
			return GetRuleContext<VarAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiElementVarContext multiElementVar() {
			return GetRuleContext<MultiElementVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(stParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		public SymbolicVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolicVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolicVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolicVariableContext symbolicVariable() {
		SymbolicVariableContext _localctx = new SymbolicVariableContext(Context, State);
		EnterRule(_localctx, 222, RULE_symbolicVariable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				{
				{
				State = 1413;
				Match(THIS);
				State = 1414;
				Match(DOT);
				}
				}
				break;
			case 2:
				{
				State = 1418;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1415;
						namespaceName();
						State = 1416;
						Match(DOT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1420;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 1426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 1424;
				varAccess();
				}
				break;
			case 2:
				{
				State = 1425;
				multiElementVar();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefDereferenceContext refDereference() {
			return GetRuleContext<RefDereferenceContext>(0);
		}
		public VarAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAccessContext varAccess() {
		VarAccessContext _localctx = new VarAccessContext(Context, State);
		EnterRule(_localctx, 224, RULE_varAccess);
		try {
			State = 1430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1428;
				varName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1429;
				refDereference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarNameContext varName() {
		VarNameContext _localctx = new VarNameContext(Context, State);
		EnterRule(_localctx, 226, RULE_varName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1432;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiElementVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarAccessContext varAccess() {
			return GetRuleContext<VarAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptListContext[] subscriptList() {
			return GetRuleContexts<SubscriptListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptListContext subscriptList(int i) {
			return GetRuleContext<SubscriptListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructVariableContext[] structVariable() {
			return GetRuleContexts<StructVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructVariableContext structVariable(int i) {
			return GetRuleContext<StructVariableContext>(i);
		}
		public MultiElementVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiElementVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiElementVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiElementVarContext multiElementVar() {
		MultiElementVarContext _localctx = new MultiElementVarContext(Context, State);
		EnterRule(_localctx, 228, RULE_multiElementVar);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1434;
			varAccess();
			State = 1437;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 1437;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__9:
						{
						State = 1435;
						subscriptList();
						}
						break;
					case DOT:
						{
						State = 1436;
						structVariable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1439;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public SubscriptListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptListContext subscriptList() {
		SubscriptListContext _localctx = new SubscriptListContext(Context, State);
		EnterRule(_localctx, 230, RULE_subscriptList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441;
			Match(T__9);
			State = 1442;
			subscript();
			State = 1447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 1443;
				Match(T__4);
				State = 1444;
				subscript();
				}
				}
				State = 1449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1450;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 232, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(stParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementSelectContext structElementSelect() {
			return GetRuleContext<StructElementSelectContext>(0);
		}
		public StructVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructVariableContext structVariable() {
		StructVariableContext _localctx = new StructVariableContext(Context, State);
		EnterRule(_localctx, 234, RULE_structVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454;
			Match(DOT);
			State = 1455;
			structElementSelect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementSelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarAccessContext varAccess() {
			return GetRuleContext<VarAccessContext>(0);
		}
		public StructElementSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementSelect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementSelectContext structElementSelect() {
		StructElementSelectContext _localctx = new StructElementSelectContext(Context, State);
		EnterRule(_localctx, 236, RULE_structElementSelect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457;
			varAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_INPUT() { return GetToken(stParser.VAR_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputDeclarationContext[] inputDeclaration() {
			return GetRuleContexts<InputDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputDeclarationContext inputDeclaration(int i) {
			return GetRuleContext<InputDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public InputDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputDeclarationsContext inputDeclarations() {
		InputDeclarationsContext _localctx = new InputDeclarationsContext(Context, State);
		EnterRule(_localctx, 238, RULE_inputDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459;
			Match(VAR_INPUT);
			State = 1461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1460;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==IDENTIFIER) {
				{
				{
				State = 1463;
				inputDeclaration();
				State = 1464;
				Match(T__0);
				}
				}
				State = 1470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1471;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public InputDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputDeclarationContext inputDeclaration() {
		InputDeclarationContext _localctx = new InputDeclarationContext(Context, State);
		EnterRule(_localctx, 240, RULE_inputDeclaration);
		try {
			State = 1476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1473;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1475;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecInitContext simpleSpecInit() {
			return GetRuleContext<SimpleSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrVarDeclarationContext strVarDeclaration() {
			return GetRuleContext<StrVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefSpecInitContext refSpecInit() {
			return GetRuleContext<RefSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayVarDeclarationInitContext arrayVarDeclarationInit() {
			return GetRuleContext<ArrayVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructVarDeclarationInitContext structVarDeclarationInit() {
			return GetRuleContext<StructVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationInitContext fbDeclarationInit() {
			return GetRuleContext<FbDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceSpecInitContext interfaceSpecInit() {
			return GetRuleContext<InterfaceSpecInitContext>(0);
		}
		public VarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationInitContext varDeclarationInit() {
		VarDeclarationInitContext _localctx = new VarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 242, RULE_varDeclarationInit);
		try {
			State = 1489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1478;
				variableList();
				State = 1479;
				Match(T__1);
				State = 1483;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
				case 1:
					{
					State = 1480;
					simpleSpecInit();
					}
					break;
				case 2:
					{
					State = 1481;
					strVarDeclaration();
					}
					break;
				case 3:
					{
					State = 1482;
					refSpecInit();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1485;
				arrayVarDeclarationInit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1486;
				structVarDeclarationInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1487;
				fbDeclarationInit();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1488;
				interfaceSpecInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefSpecContext refSpec() {
			return GetRuleContext<RefSpecContext>(0);
		}
		public RefVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefVarDeclarationContext refVarDeclaration() {
		RefVarDeclarationContext _localctx = new RefVarDeclarationContext(Context, State);
		EnterRule(_localctx, 244, RULE_refVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1491;
			variableList();
			State = 1492;
			Match(T__1);
			State = 1493;
			refSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext interfaceTypeAccess() {
			return GetRuleContext<InterfaceTypeAccessContext>(0);
		}
		public InterfaceVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceVarDeclarationContext interfaceVarDeclaration() {
		InterfaceVarDeclarationContext _localctx = new InterfaceVarDeclarationContext(Context, State);
		EnterRule(_localctx, 246, RULE_interfaceVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1495;
			variableList();
			State = 1496;
			Match(T__1);
			State = 1497;
			interfaceTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext[] variableName() {
			return GetRuleContexts<VariableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName(int i) {
			return GetRuleContext<VariableNameContext>(i);
		}
		public VariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListContext variableList() {
		VariableListContext _localctx = new VariableListContext(Context, State);
		EnterRule(_localctx, 248, RULE_variableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1499;
			variableName();
			State = 1504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 1500;
				Match(T__4);
				State = 1501;
				variableName();
				}
				}
				State = 1506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 250, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1507;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecInitContext arraySpecInit() {
			return GetRuleContext<ArraySpecInitContext>(0);
		}
		public ArrayVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayVarDeclarationInitContext arrayVarDeclarationInit() {
		ArrayVarDeclarationInitContext _localctx = new ArrayVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 252, RULE_arrayVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1509;
			variableList();
			State = 1510;
			Match(T__1);
			State = 1511;
			arraySpecInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConformandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(stParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		public ArrayConformandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayConformand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConformand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConformandContext arrayConformand() {
		ArrayConformandContext _localctx = new ArrayConformandContext(Context, State);
		EnterRule(_localctx, 254, RULE_arrayConformand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513;
			Match(ARRAY);
			State = 1514;
			Match(T__9);
			State = 1515;
			Match(T__12);
			State = 1520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 1516;
				Match(T__4);
				State = 1517;
				Match(T__12);
				}
				}
				State = 1522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1523;
			Match(T__10);
			State = 1524;
			Match(OF);
			State = 1525;
			dataTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConformDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformandContext arrayConformand() {
			return GetRuleContext<ArrayConformandContext>(0);
		}
		public ArrayConformDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayConformDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConformDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConformDeclarationContext arrayConformDeclaration() {
		ArrayConformDeclarationContext _localctx = new ArrayConformDeclarationContext(Context, State);
		EnterRule(_localctx, 256, RULE_arrayConformDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1527;
			variableList();
			State = 1528;
			Match(T__1);
			State = 1529;
			arrayConformand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecInitContext structSpecInit() {
			return GetRuleContext<StructSpecInitContext>(0);
		}
		public StructVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructVarDeclarationInitContext structVarDeclarationInit() {
		StructVarDeclarationInitContext _localctx = new StructVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 258, RULE_structVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531;
			variableList();
			State = 1532;
			Match(T__1);
			State = 1533;
			structSpecInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbDeclarationNoInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbNameContext[] fbName() {
			return GetRuleContexts<FbNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbNameContext fbName(int i) {
			return GetRuleContext<FbNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbTypeAccessContext fbTypeAccess() {
			return GetRuleContext<FbTypeAccessContext>(0);
		}
		public FbDeclarationNoInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbDeclarationNoInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbDeclarationNoInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbDeclarationNoInitContext fbDeclarationNoInit() {
		FbDeclarationNoInitContext _localctx = new FbDeclarationNoInitContext(Context, State);
		EnterRule(_localctx, 260, RULE_fbDeclarationNoInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535;
			fbName();
			State = 1540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 1536;
				Match(T__4);
				State = 1537;
				fbName();
				}
				}
				State = 1542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1543;
			Match(T__1);
			State = 1544;
			fbTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationNoInitContext fbDeclarationNoInit() {
			return GetRuleContext<FbDeclarationNoInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		public FbDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbDeclarationInitContext fbDeclarationInit() {
		FbDeclarationInitContext _localctx = new FbDeclarationInitContext(Context, State);
		EnterRule(_localctx, 262, RULE_fbDeclarationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546;
			fbDeclarationNoInit();
			State = 1549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 1547;
				Match(T__3);
				State = 1548;
				structInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FbNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbNameContext fbName() {
		FbNameContext _localctx = new FbNameContext(Context, State);
		EnterRule(_localctx, 264, RULE_fbName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1551;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbInstanceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbNameContext fbName() {
			return GetRuleContext<FbNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public FbInstanceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbInstanceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbInstanceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbInstanceNameContext fbInstanceName() {
		FbInstanceNameContext _localctx = new FbInstanceNameContext(Context, State);
		EnterRule(_localctx, 266, RULE_fbInstanceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1558;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1553;
					namespaceName();
					State = 1554;
					Match(DOT);
					}
					} 
				}
				State = 1560;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			}
			State = 1561;
			fbName();
			State = 1565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 1562;
				Match(T__11);
				}
				}
				State = 1567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_OUTPUT() { return GetToken(stParser.VAR_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputDeclarationContext[] outputDeclaration() {
			return GetRuleContexts<OutputDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputDeclarationContext outputDeclaration(int i) {
			return GetRuleContext<OutputDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public OutputDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputDeclarationsContext outputDeclarations() {
		OutputDeclarationsContext _localctx = new OutputDeclarationsContext(Context, State);
		EnterRule(_localctx, 268, RULE_outputDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1568;
			Match(VAR_OUTPUT);
			State = 1570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1569;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1572;
				outputDeclaration();
				State = 1573;
				Match(T__0);
				}
				}
				State = 1579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1580;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public OutputDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputDeclarationContext outputDeclaration() {
		OutputDeclarationContext _localctx = new OutputDeclarationContext(Context, State);
		EnterRule(_localctx, 270, RULE_outputDeclaration);
		try {
			State = 1584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1582;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1583;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOutDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_IN_OUT() { return GetToken(stParser.VAR_IN_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationContext[] inOutVarDeclaration() {
			return GetRuleContexts<InOutVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationContext inOutVarDeclaration(int i) {
			return GetRuleContext<InOutVarDeclarationContext>(i);
		}
		public InOutDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOutDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOutDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOutDeclarationsContext inOutDeclarations() {
		InOutDeclarationsContext _localctx = new InOutDeclarationsContext(Context, State);
		EnterRule(_localctx, 272, RULE_inOutDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1586;
			Match(VAR_IN_OUT);
			State = 1592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1587;
				inOutVarDeclaration();
				State = 1588;
				Match(T__0);
				}
				}
				State = 1594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1595;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOutVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbDeclarationNoInitContext fbDeclarationNoInit() {
			return GetRuleContext<FbDeclarationNoInitContext>(0);
		}
		public InOutVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOutVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOutVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOutVarDeclarationContext inOutVarDeclaration() {
		InOutVarDeclarationContext _localctx = new InOutVarDeclarationContext(Context, State);
		EnterRule(_localctx, 274, RULE_inOutVarDeclaration);
		try {
			State = 1600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1597;
				varDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1598;
				arrayConformDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1599;
				fbDeclarationNoInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecContext simpleSpec() {
			return GetRuleContext<SimpleSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrVarDeclarationContext strVarDeclaration() {
			return GetRuleContext<StrVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayVarDeclarationContext arrayVarDeclaration() {
			return GetRuleContext<ArrayVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructVarDeclarationContext structVarDeclaration() {
			return GetRuleContext<StructVarDeclarationContext>(0);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 276, RULE_varDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602;
			variableList();
			State = 1603;
			Match(T__1);
			State = 1608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 1604;
				simpleSpec();
				}
				break;
			case 2:
				{
				State = 1605;
				strVarDeclaration();
				}
				break;
			case 3:
				{
				State = 1606;
				arrayVarDeclaration();
				}
				break;
			case 4:
				{
				State = 1607;
				structVarDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecContext arraySpec() {
			return GetRuleContext<ArraySpecContext>(0);
		}
		public ArrayVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayVarDeclarationContext arrayVarDeclaration() {
		ArrayVarDeclarationContext _localctx = new ArrayVarDeclarationContext(Context, State);
		EnterRule(_localctx, 278, RULE_arrayVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610;
			variableList();
			State = 1611;
			Match(T__1);
			State = 1612;
			arraySpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		public StructVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructVarDeclarationContext structVarDeclaration() {
		StructVarDeclarationContext _localctx = new StructVarDeclarationContext(Context, State);
		EnterRule(_localctx, 280, RULE_structVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1614;
			variableList();
			State = 1615;
			Match(T__1);
			State = 1616;
			structTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecContext accessSpec() {
			return GetRuleContext<AccessSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		public VarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationsContext varDeclarations() {
		VarDeclarationsContext _localctx = new VarDeclarationsContext(Context, State);
		EnterRule(_localctx, 282, RULE_varDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618;
			Match(VAR);
			State = 1620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1619;
				Match(CONSTANT);
				}
			}

			State = 1623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & 15L) != 0)) {
				{
				State = 1622;
				accessSpec();
				}
			}

			State = 1630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1625;
				varDeclarationInit();
				State = 1626;
				Match(T__0);
				}
				}
				State = 1632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1633;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetainVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecContext accessSpec() {
			return GetRuleContext<AccessSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		public RetainVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retainVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetainVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetainVarDeclarationsContext retainVarDeclarations() {
		RetainVarDeclarationsContext _localctx = new RetainVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 284, RULE_retainVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1635;
			Match(VAR);
			State = 1636;
			Match(RETAIN);
			State = 1638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & 15L) != 0)) {
				{
				State = 1637;
				accessSpec();
				}
			}

			State = 1645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1640;
				varDeclarationInit();
				State = 1641;
				Match(T__0);
				}
				}
				State = 1647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1648;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationContext[] locVarDeclaration() {
			return GetRuleContexts<LocVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationContext locVarDeclaration(int i) {
			return GetRuleContext<LocVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public LocVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocVarDeclarationsContext locVarDeclarations() {
		LocVarDeclarationsContext _localctx = new LocVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 286, RULE_locVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650;
			Match(VAR);
			State = 1652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 19L) != 0)) {
				{
				State = 1651;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 19L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==IDENTIFIER) {
				{
				{
				State = 1654;
				locVarDeclaration();
				State = 1655;
				Match(T__0);
				}
				}
				State = 1661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1662;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarSpecInitContext locVarSpecInit() {
			return GetRuleContext<LocVarSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public LocVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocVarDeclarationContext locVarDeclaration() {
		LocVarDeclarationContext _localctx = new LocVarDeclarationContext(Context, State);
		EnterRule(_localctx, 288, RULE_locVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 1664;
				variableName();
				}
			}

			State = 1667;
			locatedAt();
			State = 1668;
			Match(T__1);
			State = 1669;
			locVarSpecInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_TEMP() { return GetToken(stParser.VAR_TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext[] varDeclaration() {
			return GetRuleContexts<VarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration(int i) {
			return GetRuleContext<VarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefVarDeclarationContext[] refVarDeclaration() {
			return GetRuleContexts<RefVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefVarDeclarationContext refVarDeclaration(int i) {
			return GetRuleContext<RefVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceVarDeclarationContext[] interfaceVarDeclaration() {
			return GetRuleContexts<InterfaceVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceVarDeclarationContext interfaceVarDeclaration(int i) {
			return GetRuleContext<InterfaceVarDeclarationContext>(i);
		}
		public TempVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempVarDeclarationsContext tempVarDeclarations() {
		TempVarDeclarationsContext _localctx = new TempVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 290, RULE_tempVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1671;
			Match(VAR_TEMP);
			State = 1681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1675;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
				case 1:
					{
					State = 1672;
					varDeclaration();
					}
					break;
				case 2:
					{
					State = 1673;
					refVarDeclaration();
					}
					break;
				case 3:
					{
					State = 1674;
					interfaceVarDeclaration();
					}
					break;
				}
				State = 1677;
				Match(T__0);
				}
				}
				State = 1683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1684;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_EXTERNAL() { return GetToken(stParser.VAR_EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext[] externalDeclaration() {
			return GetRuleContexts<ExternalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext externalDeclaration(int i) {
			return GetRuleContext<ExternalDeclarationContext>(i);
		}
		public ExternalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalVarDeclarationsContext externalVarDeclarations() {
		ExternalVarDeclarationsContext _localctx = new ExternalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 292, RULE_externalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1686;
			Match(VAR_EXTERNAL);
			State = 1688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1687;
				Match(CONSTANT);
				}
			}

			State = 1695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1690;
				externalDeclaration();
				State = 1691;
				Match(T__0);
				}
				}
				State = 1697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1698;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext globalVarName() {
			return GetRuleContext<GlobalVarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecContext simpleSpec() {
			return GetRuleContext<SimpleSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecContext arraySpec() {
			return GetRuleContext<ArraySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbTypeAccessContext fbTypeAccess() {
			return GetRuleContext<FbTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeAccessContext refTypeAccess() {
			return GetRuleContext<RefTypeAccessContext>(0);
		}
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 294, RULE_externalDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1700;
			globalVarName();
			State = 1701;
			Match(T__1);
			State = 1707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				{
				State = 1702;
				simpleSpec();
				}
				break;
			case 2:
				{
				State = 1703;
				arraySpec();
				}
				break;
			case 3:
				{
				State = 1704;
				structTypeAccess();
				}
				break;
			case 4:
				{
				State = 1705;
				fbTypeAccess();
				}
				break;
			case 5:
				{
				State = 1706;
				refTypeAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public GlobalVarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarNameContext globalVarName() {
		GlobalVarNameContext _localctx = new GlobalVarNameContext(Context, State);
		EnterRule(_localctx, 296, RULE_globalVarName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1709;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_GLOBAL() { return GetToken(stParser.VAR_GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationContext[] globalVarDeclaration() {
			return GetRuleContexts<GlobalVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationContext globalVarDeclaration(int i) {
			return GetRuleContext<GlobalVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		public GlobalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclarationsContext globalVarDeclarations() {
		GlobalVarDeclarationsContext _localctx = new GlobalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 298, RULE_globalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1711;
			Match(VAR_GLOBAL);
			State = 1713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==CONSTANT) {
				{
				State = 1712;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==CONSTANT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1715;
				globalVarDeclaration();
				State = 1716;
				Match(T__0);
				}
				}
				State = 1722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1723;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarSpecContext globalVarSpec() {
			return GetRuleContext<GlobalVarSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarSpecInitContext locVarSpecInit() {
			return GetRuleContext<LocVarSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbTypeAccessContext fbTypeAccess() {
			return GetRuleContext<FbTypeAccessContext>(0);
		}
		public GlobalVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclarationContext globalVarDeclaration() {
		GlobalVarDeclarationContext _localctx = new GlobalVarDeclarationContext(Context, State);
		EnterRule(_localctx, 300, RULE_globalVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1725;
			globalVarSpec();
			State = 1726;
			Match(T__1);
			State = 1729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 1727;
				locVarSpecInit();
				}
				break;
			case 2:
				{
				State = 1728;
				fbTypeAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext[] globalVarName() {
			return GetRuleContexts<GlobalVarNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext globalVarName(int i) {
			return GetRuleContext<GlobalVarNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		public GlobalVarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarSpecContext globalVarSpec() {
		GlobalVarSpecContext _localctx = new GlobalVarSpecContext(Context, State);
		EnterRule(_localctx, 302, RULE_globalVarSpec);
		int _la;
		try {
			State = 1742;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1731;
				globalVarName();
				State = 1736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 1732;
					Match(T__4);
					State = 1733;
					globalVarName();
					}
					}
					State = 1738;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1739;
				globalVarName();
				State = 1740;
				locatedAt();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocVarSpecInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecInitContext simpleSpecInit() {
			return GetRuleContext<SimpleSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecInitContext arraySpecInit() {
			return GetRuleContext<ArraySpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecInitContext structSpecInit() {
			return GetRuleContext<StructSpecInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SByteStrSpecContext sByteStrSpec() {
			return GetRuleContext<SByteStrSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DByteStrSpecContext dByteStrSpec() {
			return GetRuleContext<DByteStrSpecContext>(0);
		}
		public LocVarSpecInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locVarSpecInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocVarSpecInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocVarSpecInitContext locVarSpecInit() {
		LocVarSpecInitContext _localctx = new LocVarSpecInitContext(Context, State);
		EnterRule(_localctx, 304, RULE_locVarSpecInit);
		try {
			State = 1749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1744;
				simpleSpecInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1745;
				arraySpecInit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1746;
				structSpecInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1747;
				sByteStrSpec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1748;
				dByteStrSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SByteStrVarDeclContext sByteStrVarDecl() {
			return GetRuleContext<SByteStrVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DByteStrVarDeclarationContext dByteStrVarDeclaration() {
			return GetRuleContext<DByteStrVarDeclarationContext>(0);
		}
		public StrVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrVarDeclarationContext strVarDeclaration() {
		StrVarDeclarationContext _localctx = new StrVarDeclarationContext(Context, State);
		EnterRule(_localctx, 306, RULE_strVarDeclaration);
		try {
			State = 1753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1751;
				sByteStrVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1752;
				dByteStrVarDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SByteStrVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SByteStrSpecContext sByteStrSpec() {
			return GetRuleContext<SByteStrSpecContext>(0);
		}
		public SByteStrVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sByteStrVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSByteStrVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SByteStrVarDeclContext sByteStrVarDecl() {
		SByteStrVarDeclContext _localctx = new SByteStrVarDeclContext(Context, State);
		EnterRule(_localctx, 308, RULE_sByteStrVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			variableList();
			State = 1756;
			Match(T__1);
			State = 1757;
			sByteStrSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SByteStrSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BYTE_STRING() { return GetToken(stParser.SINGLE_BYTE_STRING, 0); }
		public SByteStrSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sByteStrSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSByteStrSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SByteStrSpecContext sByteStrSpec() {
		SByteStrSpecContext _localctx = new SByteStrSpecContext(Context, State);
		EnterRule(_localctx, 310, RULE_sByteStrSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1759;
			Match(STRING);
			State = 1762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 1760;
				Match(T__9);
				State = 1761;
				Match(T__10);
				}
			}

			State = 1766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 1764;
				Match(T__3);
				State = 1765;
				Match(SINGLE_BYTE_STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DByteStrVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DByteStrSpecContext dByteStrSpec() {
			return GetRuleContext<DByteStrSpecContext>(0);
		}
		public DByteStrVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dByteStrVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDByteStrVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DByteStrVarDeclarationContext dByteStrVarDeclaration() {
		DByteStrVarDeclarationContext _localctx = new DByteStrVarDeclarationContext(Context, State);
		EnterRule(_localctx, 312, RULE_dByteStrVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1768;
			variableList();
			State = 1769;
			Match(T__1);
			State = 1770;
			dByteStrSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DByteStrSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BYTE_STRING() { return GetToken(stParser.DOUBLE_BYTE_STRING, 0); }
		public DByteStrSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dByteStrSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDByteStrSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DByteStrSpecContext dByteStrSpec() {
		DByteStrSpecContext _localctx = new DByteStrSpecContext(Context, State);
		EnterRule(_localctx, 314, RULE_dByteStrSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1772;
			Match(WSTRING);
			State = 1776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 1773;
				Match(T__9);
				State = 1774;
				Match(UNSIGNED_INT);
				State = 1775;
				Match(T__10);
				}
			}

			State = 1780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 1778;
				Match(T__3);
				State = 1779;
				Match(DOUBLE_BYTE_STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocPartlyVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocPartlyVarContext[] locPartlyVar() {
			return GetRuleContexts<LocPartlyVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocPartlyVarContext locPartlyVar(int i) {
			return GetRuleContext<LocPartlyVarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public LocPartlyVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locPartlyVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocPartlyVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocPartlyVarDeclarationContext locPartlyVarDeclaration() {
		LocPartlyVarDeclarationContext _localctx = new LocPartlyVarDeclarationContext(Context, State);
		EnterRule(_localctx, 316, RULE_locPartlyVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782;
			Match(VAR);
			State = 1784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1783;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1786;
				locPartlyVar();
				}
				}
				State = 1791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1792;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocPartlyVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(stParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTLY_DIRECT_VARIABLE() { return GetToken(stParser.PARTLY_DIRECT_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecContext varSpec() {
			return GetRuleContext<VarSpecContext>(0);
		}
		public LocPartlyVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locPartlyVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocPartlyVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocPartlyVarContext locPartlyVar() {
		LocPartlyVarContext _localctx = new LocPartlyVarContext(Context, State);
		EnterRule(_localctx, 318, RULE_locPartlyVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1794;
			variableName();
			State = 1795;
			Match(AT);
			State = 1796;
			Match(PARTLY_DIRECT_VARIABLE);
			State = 1797;
			Match(T__1);
			State = 1798;
			varSpec();
			State = 1799;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecContext simpleSpec() {
			return GetRuleContext<SimpleSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecContext arraySpec() {
			return GetRuleContext<ArraySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public VarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSpecContext varSpec() {
		VarSpecContext _localctx = new VarSpecContext(Context, State);
		EnterRule(_localctx, 320, RULE_varSpec);
		int _la;
		try {
			State = 1810;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1801;
				simpleSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1802;
				arraySpec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1803;
				structTypeAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1804;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==WSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 1805;
					Match(T__9);
					State = 1806;
					Match(UNSIGNED_INT);
					State = 1807;
					Match(T__10);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 322, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public FunctionAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionAccessContext functionAccess() {
		FunctionAccessContext _localctx = new FunctionAccessContext(Context, State);
		EnterRule(_localctx, 324, RULE_functionAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1819;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1814;
					namespaceName();
					State = 1815;
					Match(DOT);
					}
					} 
				}
				State = 1821;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			}
			State = 1822;
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(stParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FUNCTION() { return GetToken(stParser.END_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext[] functionVarDeclarations() {
			return GetRuleContexts<FunctionVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext functionVarDeclarations(int i) {
			return GetRuleContext<FunctionVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 326, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1824;
			Match(FUNCTION);
			State = 1825;
			functionName();
			State = 1828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 1826;
				Match(T__1);
				State = 1827;
				dataTypeAccess();
				}
			}

			State = 1833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1830;
				usingDirective();
				}
				}
				State = 1835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 839L) != 0)) {
				{
				State = 1839;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR_INPUT:
				case VAR_OUTPUT:
				case VAR_IN_OUT:
					{
					State = 1836;
					ioVarDeclarations();
					}
					break;
				case VAR:
				case VAR_EXTERNAL:
					{
					State = 1837;
					functionVarDeclarations();
					}
					break;
				case VAR_TEMP:
					{
					State = 1838;
					tempVarDeclarations();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1844;
			functionBody();
			State = 1845;
			Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IoVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputDeclarationsContext inputDeclarations() {
			return GetRuleContext<InputDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputDeclarationsContext outputDeclarations() {
			return GetRuleContext<OutputDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutDeclarationsContext inOutDeclarations() {
			return GetRuleContext<InOutDeclarationsContext>(0);
		}
		public IoVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ioVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIoVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IoVarDeclarationsContext ioVarDeclarations() {
		IoVarDeclarationsContext _localctx = new IoVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 328, RULE_ioVarDeclarations);
		try {
			State = 1850;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_INPUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1847;
				inputDeclarations();
				}
				break;
			case VAR_OUTPUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1848;
				outputDeclarations();
				}
				break;
			case VAR_IN_OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1849;
				inOutDeclarations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations() {
			return GetRuleContext<ExternalVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationsContext varDeclarations() {
			return GetRuleContext<VarDeclarationsContext>(0);
		}
		public FunctionVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionVarDeclarationsContext functionVarDeclarations() {
		FunctionVarDeclarationsContext _localctx = new FunctionVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 330, RULE_functionVarDeclarations);
		try {
			State = 1854;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_EXTERNAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1852;
				externalVarDeclarations();
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1853;
				varDeclarations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 332, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1856;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(stParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CLASS() { return GetToken(stParser.END_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(stParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceNameListContext interfaceNameList() {
			return GetRuleContext<InterfaceNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext[] functionVarDeclarations() {
			return GetRuleContexts<FunctionVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVarDeclarationsContext functionVarDeclarations(int i) {
			return GetRuleContext<FunctionVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 334, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1858;
			Match(CLASS);
			State = 1860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 1859;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1862;
			classTypeName();
			State = 1866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1863;
				usingDirective();
				}
				}
				State = 1868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1869;
				Match(EXTENDS);
				State = 1870;
				classTypeAccess();
				}
			}

			State = 1875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1873;
				Match(IMPLEMENTS);
				State = 1874;
				interfaceNameList();
				}
			}

			State = 1881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VAR || _la==VAR_EXTERNAL) {
				{
				State = 1879;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
				case 1:
					{
					State = 1877;
					functionVarDeclarations();
					}
					break;
				case 2:
					{
					State = 1878;
					otherVarDeclarations();
					}
					break;
				}
				}
				State = 1883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1887;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 1884;
				methodDeclaration();
				}
				}
				State = 1889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1890;
			Match(END_CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ClassTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeNameContext classTypeName() {
		ClassTypeNameContext _localctx = new ClassTypeNameContext(Context, State);
		EnterRule(_localctx, 336, RULE_classTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1892;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ClassTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeAccessContext classTypeAccess() {
		ClassTypeAccessContext _localctx = new ClassTypeAccessContext(Context, State);
		EnterRule(_localctx, 338, RULE_classTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1899;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1894;
					namespaceName();
					State = 1895;
					Match(DOT);
					}
					} 
				}
				State = 1901;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
			}
			State = 1902;
			classTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 340, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1904;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ClassInstanceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceNameContext classInstanceName() {
		ClassInstanceNameContext _localctx = new ClassInstanceNameContext(Context, State);
		EnterRule(_localctx, 342, RULE_classInstanceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1911;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,197,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1906;
					namespaceName();
					State = 1907;
					Match(DOT);
					}
					} 
				}
				State = 1913;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,197,Context);
			}
			State = 1914;
			className();
			State = 1918;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 1915;
				Match(T__11);
				}
				}
				State = 1920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(stParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeNameContext interfaceTypeName() {
			return GetRuleContext<InterfaceTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_INTERFACE() { return GetToken(stParser.END_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceNameListContext interfaceNameList() {
			return GetRuleContext<InterfaceNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodPrototypeContext[] methodPrototype() {
			return GetRuleContexts<MethodPrototypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodPrototypeContext methodPrototype(int i) {
			return GetRuleContext<MethodPrototypeContext>(i);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 344, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1921;
			Match(INTERFACE);
			State = 1922;
			interfaceTypeName();
			State = 1926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1923;
				usingDirective();
				}
				}
				State = 1928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1929;
				Match(EXTENDS);
				State = 1930;
				interfaceNameList();
				}
			}

			State = 1936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 1933;
				methodPrototype();
				}
				}
				State = 1938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1939;
			Match(END_INTERFACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodPrototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(stParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_METHOD() { return GetToken(stParser.END_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		public MethodPrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodPrototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodPrototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodPrototypeContext methodPrototype() {
		MethodPrototypeContext _localctx = new MethodPrototypeContext(Context, State);
		EnterRule(_localctx, 346, RULE_methodPrototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1941;
			Match(METHOD);
			State = 1942;
			methodName();
			State = 1945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 1943;
				Match(T__1);
				State = 1944;
				dataTypeAccess();
				}
			}

			State = 1950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 7L) != 0)) {
				{
				{
				State = 1947;
				ioVarDeclarations();
				}
				}
				State = 1952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1953;
			Match(END_METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceSpecInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceValueContext interfaceValue() {
			return GetRuleContext<InterfaceValueContext>(0);
		}
		public InterfaceSpecInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceSpecInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceSpecInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceSpecInitContext interfaceSpecInit() {
		InterfaceSpecInitContext _localctx = new InterfaceSpecInitContext(Context, State);
		EnterRule(_localctx, 348, RULE_interfaceSpecInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1955;
			variableList();
			State = 1958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 1956;
				Match(T__3);
				State = 1957;
				interfaceValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext fbInstanceName() {
			return GetRuleContext<FbInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName() {
			return GetRuleContext<ClassInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(stParser.NULL, 0); }
		public InterfaceValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceValueContext interfaceValue() {
		InterfaceValueContext _localctx = new InterfaceValueContext(Context, State);
		EnterRule(_localctx, 350, RULE_interfaceValue);
		try {
			State = 1964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1960;
				symbolicVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1961;
				fbInstanceName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1962;
				classInstanceName();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1963;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext[] interfaceTypeAccess() {
			return GetRuleContexts<InterfaceTypeAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext interfaceTypeAccess(int i) {
			return GetRuleContext<InterfaceTypeAccessContext>(i);
		}
		public InterfaceNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceNameListContext interfaceNameList() {
		InterfaceNameListContext _localctx = new InterfaceNameListContext(Context, State);
		EnterRule(_localctx, 352, RULE_interfaceNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1966;
			interfaceTypeAccess();
			State = 1971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 1967;
				Match(T__4);
				State = 1968;
				interfaceTypeAccess();
				}
				}
				State = 1973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public InterfaceTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeNameContext interfaceTypeName() {
		InterfaceTypeNameContext _localctx = new InterfaceTypeNameContext(Context, State);
		EnterRule(_localctx, 354, RULE_interfaceTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeNameContext interfaceTypeName() {
			return GetRuleContext<InterfaceTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public InterfaceTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeAccessContext interfaceTypeAccess() {
		InterfaceTypeAccessContext _localctx = new InterfaceTypeAccessContext(Context, State);
		EnterRule(_localctx, 356, RULE_interfaceTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1981;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1976;
					namespaceName();
					State = 1977;
					Match(DOT);
					}
					} 
				}
				State = 1983;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			}
			State = 1984;
			interfaceTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public InterfaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceNameContext interfaceName() {
		InterfaceNameContext _localctx = new InterfaceNameContext(Context, State);
		EnterRule(_localctx, 358, RULE_interfaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1986;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(stParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(stParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(stParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(stParser.INTERNAL, 0); }
		public AccessSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecContext accessSpec() {
		AccessSpecContext _localctx = new AccessSpecContext(Context, State);
		EnterRule(_localctx, 360, RULE_accessSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1988;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitPartAccessContext multibitPartAccess() {
			return GetRuleContext<MultibitPartAccessContext>(0);
		}
		public VariableAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAccessContext variableAccess() {
		VariableAccessContext _localctx = new VariableAccessContext(Context, State);
		EnterRule(_localctx, 362, RULE_variableAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990;
			variable();
			State = 1992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 1991;
				multibitPartAccess();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionAccessContext functionAccess() {
			return GetRuleContext<FunctionAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext[] parameterAssign() {
			return GetRuleContexts<ParameterAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext parameterAssign(int i) {
			return GetRuleContext<ParameterAssignContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 364, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1994;
			functionAccess();
			State = 1995;
			Match(T__2);
			State = 2004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8297931341816L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 117473273L) != 0) || _la==NOT || _la==IDENTIFIER) {
				{
				State = 1996;
				parameterAssign();
				State = 2001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 1997;
					Match(T__4);
					State = 1998;
					parameterAssign();
					}
					}
					State = 2003;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 2006;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 366, RULE_statementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2014;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2009;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DIRECT_VARIABLE || _la==THIS || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & 8720007L) != 0)) {
						{
						State = 2008;
						statement();
						}
					}

					State = 2011;
					Match(T__0);
					}
					} 
				}
				State = 2016;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogControlStatementContext subprogControlStatement() {
			return GetRuleContext<SubprogControlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 368, RULE_statement);
		try {
			State = 2021;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2017;
				assignStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2018;
				subprogControlStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2019;
				selectionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2020;
				iterationStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefAssignContext refAssign() {
			return GetRuleContext<RefAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentAttemptContext assignmentAttempt() {
			return GetRuleContext<AssignmentAttemptContext>(0);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 370, RULE_assignStatement);
		try {
			State = 2029;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2023;
				variable();
				State = 2024;
				Match(T__3);
				State = 2025;
				expression();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2027;
				refAssign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2028;
				assignmentAttempt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentAttemptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefNameContext[] refName() {
			return GetRuleContexts<RefNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefNameContext refName(int i) {
			return GetRuleContext<RefNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefDereferenceContext[] refDereference() {
			return GetRuleContexts<RefDereferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefDereferenceContext refDereference(int i) {
			return GetRuleContext<RefDereferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefValueContext refValue() {
			return GetRuleContext<RefValueContext>(0);
		}
		public AssignmentAttemptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentAttempt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentAttempt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentAttemptContext assignmentAttempt() {
		AssignmentAttemptContext _localctx = new AssignmentAttemptContext(Context, State);
		EnterRule(_localctx, 372, RULE_assignmentAttempt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				{
				State = 2031;
				refName();
				}
				break;
			case 2:
				{
				State = 2032;
				refDereference();
				}
				break;
			}
			State = 2035;
			Match(T__13);
			State = 2039;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				{
				State = 2036;
				refName();
				}
				break;
			case 2:
				{
				State = 2037;
				refDereference();
				}
				break;
			case 3:
				{
				State = 2038;
				refValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext[] fbInstanceName() {
			return GetRuleContexts<FbInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbInstanceNameContext fbInstanceName(int i) {
			return GetRuleContext<FbInstanceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(stParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext[] parameterAssign() {
			return GetRuleContexts<ParameterAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext parameterAssign(int i) {
			return GetRuleContext<ParameterAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext[] classInstanceName() {
			return GetRuleContexts<ClassInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName(int i) {
			return GetRuleContext<ClassInstanceNameContext>(i);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 374, RULE_invocation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2060;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				{
				State = 2041;
				fbInstanceName();
				}
				break;
			case 2:
				{
				State = 2042;
				methodName();
				}
				break;
			case 3:
				{
				State = 2043;
				Match(THIS);
				}
				break;
			case 4:
				{
				{
				State = 2046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THIS) {
					{
					State = 2044;
					Match(THIS);
					State = 2045;
					Match(DOT);
					}
				}

				{
				State = 2054;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2050;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
						case 1:
							{
							State = 2048;
							fbInstanceName();
							}
							break;
						case 2:
							{
							State = 2049;
							classInstanceName();
							}
							break;
						}
						State = 2052;
						Match(DOT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2056;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,219,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				State = 2058;
				methodName();
				}
				}
				break;
			}
			State = 2062;
			Match(T__2);
			State = 2071;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8297931341816L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 117473273L) != 0) || _la==NOT || _la==IDENTIFIER) {
				{
				State = 2063;
				parameterAssign();
				State = 2068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 2064;
					Match(T__4);
					State = 2065;
					parameterAssign();
					}
					}
					State = 2070;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 2073;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogControlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(stParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(stParser.RETURN, 0); }
		public SubprogControlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogControlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogControlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogControlStatementContext subprogControlStatement() {
		SubprogControlStatementContext _localctx = new SubprogControlStatementContext(Context, State);
		EnterRule(_localctx, 376, RULE_subprogControlStatement);
		try {
			State = 2081;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2075;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2076;
				invocation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2077;
				Match(SUPER);
				State = 2078;
				Match(T__2);
				State = 2079;
				Match(T__5);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2080;
				Match(RETURN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefAssignContext refAssign() {
			return GetRuleContext<RefAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(stParser.NOT, 0); }
		public ParameterAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterAssignContext parameterAssign() {
		ParameterAssignContext _localctx = new ParameterAssignContext(Context, State);
		EnterRule(_localctx, 378, RULE_parameterAssign);
		int _la;
		try {
			State = 2097;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2086;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
				case 1:
					{
					State = 2083;
					variableName();
					State = 2084;
					Match(T__3);
					}
					break;
				}
				State = 2088;
				expression();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2089;
				refAssign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 2091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2090;
					Match(NOT);
					}
				}

				State = 2093;
				variableName();
				State = 2094;
				Match(T__6);
				State = 2095;
				variable();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 380, RULE_selectionStatement);
		try {
			State = 2101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2099;
				ifStatement();
				}
				break;
			case CASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2100;
				caseStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(stParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(stParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(stParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_IF() { return GetToken(stParser.END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSIF() { return GetTokens(stParser.ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF(int i) {
			return GetToken(stParser.ELSIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(stParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 382, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2103;
			Match(IF);
			State = 2104;
			expression();
			State = 2105;
			Match(THEN);
			State = 2106;
			statementList();
			State = 2114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 2107;
				Match(ELSIF);
				State = 2108;
				expression();
				State = 2109;
				Match(THEN);
				State = 2110;
				statementList();
				}
				}
				State = 2116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 2117;
				Match(ELSE);
				State = 2118;
				statementList();
				}
			}

			State = 2121;
			Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(stParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CASE() { return GetToken(stParser.END_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseSelectionContext[] caseSelection() {
			return GetRuleContexts<CaseSelectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseSelectionContext caseSelection(int i) {
			return GetRuleContext<CaseSelectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(stParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 384, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2123;
			Match(CASE);
			State = 2124;
			expression();
			State = 2125;
			Match(OF);
			State = 2127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2126;
				caseSelection();
				}
				}
				State = 2129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -8297931341816L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 117473273L) != 0) || _la==NOT || _la==IDENTIFIER );
			State = 2133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 2131;
				Match(ELSE);
				State = 2132;
				statementList();
				}
			}

			State = 2135;
			Match(END_CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseSelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseListContext caseList() {
			return GetRuleContext<CaseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseSelection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseSelectionContext caseSelection() {
		CaseSelectionContext _localctx = new CaseSelectionContext(Context, State);
		EnterRule(_localctx, 386, RULE_caseSelection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2137;
			caseList();
			State = 2138;
			Match(T__1);
			State = 2139;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext[] caseListElement() {
			return GetRuleContexts<CaseListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext caseListElement(int i) {
			return GetRuleContext<CaseListElementContext>(i);
		}
		public CaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListContext caseList() {
		CaseListContext _localctx = new CaseListContext(Context, State);
		EnterRule(_localctx, 388, RULE_caseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2141;
			caseListElement();
			State = 2146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 2142;
				Match(T__4);
				State = 2143;
				caseListElement();
				}
				}
				State = 2148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstExpressionContext constExpression() {
			return GetRuleContext<ConstExpressionContext>(0);
		}
		public CaseListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListElementContext caseListElement() {
		CaseListElementContext _localctx = new CaseListElementContext(Context, State);
		EnterRule(_localctx, 390, RULE_caseListElement);
		try {
			State = 2151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2149;
				subrange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2150;
				constExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(stParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(stParser.CONTINUE, 0); }
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 392, RULE_iterationStatement);
		try {
			State = 2158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2153;
				forStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2154;
				whileStatement();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2155;
				repeatStatement();
				}
				break;
			case EXIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2156;
				Match(EXIT);
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2157;
				Match(CONTINUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(stParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ControlVariableContext controlVariable() {
			return GetRuleContext<ControlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForListContext forList() {
			return GetRuleContext<ForListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(stParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FOR() { return GetToken(stParser.END_FOR, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 394, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2160;
			Match(FOR);
			State = 2161;
			controlVariable();
			State = 2162;
			Match(T__3);
			State = 2163;
			forList();
			State = 2164;
			Match(DO);
			State = 2165;
			statementList();
			State = 2166;
			Match(END_FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ControlVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlVariableContext controlVariable() {
		ControlVariableContext _localctx = new ControlVariableContext(Context, State);
		EnterRule(_localctx, 396, RULE_controlVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2168;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(stParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(stParser.BY, 0); }
		public ForListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForListContext forList() {
		ForListContext _localctx = new ForListContext(Context, State);
		EnterRule(_localctx, 398, RULE_forList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2170;
			expression();
			State = 2171;
			Match(TO);
			State = 2172;
			expression();
			State = 2175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 2173;
				Match(BY);
				State = 2174;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(stParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(stParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_WHILE() { return GetToken(stParser.END_WHILE, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 400, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2177;
			Match(WHILE);
			State = 2178;
			expression();
			State = 2179;
			Match(DO);
			State = 2180;
			statementList();
			State = 2181;
			Match(END_WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(stParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(stParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_REPEAT() { return GetToken(stParser.END_REPEAT, 0); }
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 402, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2183;
			Match(REPEAT);
			State = 2184;
			statementList();
			State = 2185;
			Match(UNTIL);
			State = 2186;
			expression();
			State = 2187;
			Match(END_REPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public XorExpressionContext[] xorExpression() {
			return GetRuleContexts<XorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public XorExpressionContext xorExpression(int i) {
			return GetRuleContext<XorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(stParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(stParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 404, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2189;
			xorExpression();
			State = 2194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 2190;
				Match(OR);
				State = 2191;
				xorExpression();
				}
				}
				State = 2196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 406, RULE_constExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2197;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] XOR() { return GetTokens(stParser.XOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR(int i) {
			return GetToken(stParser.XOR, i);
		}
		public XorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorExpressionContext xorExpression() {
		XorExpressionContext _localctx = new XorExpressionContext(Context, State);
		EnterRule(_localctx, 408, RULE_xorExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199;
			andExpression();
			State = 2204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==XOR) {
				{
				{
				State = 2200;
				Match(XOR);
				State = 2201;
				andExpression();
				}
				}
				State = 2206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareExpressionContext[] compareExpression() {
			return GetRuleContexts<CompareExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareExpressionContext compareExpression(int i) {
			return GetRuleContext<CompareExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(stParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(stParser.AND, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 410, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2207;
			compareExpression();
			State = 2212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14 || _la==AND) {
				{
				{
				State = 2208;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==AND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2209;
				compareExpression();
				}
				}
				State = 2214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EquExpressionContext[] equExpression() {
			return GetRuleContexts<EquExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquExpressionContext equExpression(int i) {
			return GetRuleContext<EquExpressionContext>(i);
		}
		public CompareExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareExpressionContext compareExpression() {
		CompareExpressionContext _localctx = new CompareExpressionContext(Context, State);
		EnterRule(_localctx, 412, RULE_compareExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2215;
			equExpression();
			State = 2220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15 || _la==T__16) {
				{
				{
				State = 2216;
				_la = TokenStream.LA(1);
				if ( !(_la==T__15 || _la==T__16) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2217;
				equExpression();
				}
				}
				State = 2222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddExpressionContext[] addExpression() {
			return GetRuleContexts<AddExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddExpressionContext addExpression(int i) {
			return GetRuleContext<AddExpressionContext>(i);
		}
		public EquExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquExpressionContext equExpression() {
		EquExpressionContext _localctx = new EquExpressionContext(Context, State);
		EnterRule(_localctx, 414, RULE_equExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2223;
			addExpression();
			State = 2228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3932160L) != 0)) {
				{
				{
				State = 2224;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3932160L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2225;
				addExpression();
				}
				}
				State = 2230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AddExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExpressionContext addExpression() {
		AddExpressionContext _localctx = new AddExpressionContext(Context, State);
		EnterRule(_localctx, 416, RULE_addExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2231;
			term();
			State = 2236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__21 || _la==T__22) {
				{
				{
				State = 2232;
				_la = TokenStream.LA(1);
				if ( !(_la==T__21 || _la==T__22) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2233;
				term();
				}
				}
				State = 2238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowerExpressionContext[] powerExpression() {
			return GetRuleContexts<PowerExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowerExpressionContext powerExpression(int i) {
			return GetRuleContext<PowerExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(stParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(stParser.MOD, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 418, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2239;
			powerExpression();
			State = 2246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12 || _la==T__23 || _la==MOD) {
				{
				State = 2244;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__12:
					{
					State = 2240;
					Match(T__12);
					}
					break;
				case T__23:
					{
					State = 2241;
					Match(T__23);
					}
					break;
				case MOD:
					{
					State = 2242;
					Match(MOD);
					State = 2243;
					powerExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public PowerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powerExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowerExpressionContext powerExpression() {
		PowerExpressionContext _localctx = new PowerExpressionContext(Context, State);
		EnterRule(_localctx, 420, RULE_powerExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2249;
			unaryExpression();
			State = 2254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__24) {
				{
				{
				State = 2250;
				Match(T__24);
				State = 2251;
				unaryExpression();
				}
				}
				State = 2256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(stParser.NOT, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 422, RULE_unaryExpression);
		int _la;
		try {
			State = 2263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2257;
				Match(T__22);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2258;
				Match(T__21);
				}
				break;
			case T__2:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case DIRECT_VARIABLE:
			case SINGLE_BYTE_STRING:
			case DOUBLE_BYTE_STRING:
			case GENERAL_REAL:
			case SIGNED_INT:
			case UNSIGNED_INT:
			case BINARY_INT:
			case OCTAL_INT:
			case HEX_INT:
			case BOOLEAN:
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
			case REAL:
			case LREAL:
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
			case BOOL:
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
			case TIME:
			case LTIME:
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
			case DATE:
			case LDATE:
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
			case REF:
			case NULL:
			case THIS:
			case NOT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2259;
					Match(NOT);
					}
				}

				State = 2262;
				primaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefValueContext refValue() {
			return GetRuleContext<RefValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 424, RULE_primaryExpression);
		try {
			State = 2274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2265;
				literalValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2266;
				enumValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2267;
				variableAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2268;
				functionCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2269;
				refValue();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2270;
				Match(T__2);
				State = 2271;
				expression();
				State = 2272;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeLiteralContext timeLiteral() {
			return GetRuleContext<TimeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsLiteralContext multibitsLiteral() {
			return GetRuleContext<MultibitsLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 426, RULE_literalValue);
		try {
			State = 2281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2276;
				numericLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2277;
				charLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2278;
				timeLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2279;
				multibitsLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2280;
				boolLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralContext realLiteral() {
			return GetRuleContext<RealLiteralContext>(0);
		}
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 428, RULE_numericLiteral);
		try {
			State = 2285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SIGNED_INT:
			case UNSIGNED_INT:
			case BINARY_INT:
			case OCTAL_INT:
			case HEX_INT:
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2283;
				intLiteral();
				}
				break;
			case GENERAL_REAL:
			case REAL:
			case LREAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2284;
				realLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralValueContext intLiteralValue() {
			return GetRuleContext<IntLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		public IntLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralContext intLiteral() {
		IntLiteralContext _localctx = new IntLiteralContext(Context, State);
		EnterRule(_localctx, 430, RULE_intLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 287104476244869120L) != 0)) {
				{
				State = 2287;
				intTypeName();
				State = 2288;
				Match(T__8);
				}
			}

			State = 2292;
			intLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_INT() { return GetToken(stParser.SIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_INT() { return GetToken(stParser.BINARY_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_INT() { return GetToken(stParser.OCTAL_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INT() { return GetToken(stParser.HEX_INT, 0); }
		public IntLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralValueContext intLiteralValue() {
		IntLiteralValueContext _localctx = new IntLiteralValueContext(Context, State);
		EnterRule(_localctx, 432, RULE_intLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2294;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 545357767376896L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntTypeNameContext unsignedIntTypeName() {
			return GetRuleContext<UnsignedIntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedIntTypeNameContext signedIntTypeName() {
			return GetRuleContext<SignedIntTypeNameContext>(0);
		}
		public IntTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntTypeNameContext intTypeName() {
		IntTypeNameContext _localctx = new IntTypeNameContext(Context, State);
		EnterRule(_localctx, 434, RULE_intTypeName);
		try {
			State = 2298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2296;
				unsignedIntTypeName();
				}
				break;
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2297;
				signedIntTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedIntTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USINT() { return GetToken(stParser.USINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(stParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDINT() { return GetToken(stParser.UDINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULINT() { return GetToken(stParser.ULINT, 0); }
		public UnsignedIntTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedIntTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedIntTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedIntTypeNameContext unsignedIntTypeName() {
		UnsignedIntTypeNameContext _localctx = new UnsignedIntTypeNameContext(Context, State);
		EnterRule(_localctx, 436, RULE_unsignedIntTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2300;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16888498602639360L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedIntTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT() { return GetToken(stParser.SINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(stParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DINT() { return GetToken(stParser.DINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINT() { return GetToken(stParser.LINT, 0); }
		public SignedIntTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedIntTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedIntTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedIntTypeNameContext signedIntTypeName() {
		SignedIntTypeNameContext _localctx = new SignedIntTypeNameContext(Context, State);
		EnterRule(_localctx, 438, RULE_signedIntTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2302;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 270215977642229760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsLiteralValueContext multibitsLiteralValue() {
			return GetRuleContext<MultibitsLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsTypeNameContext multibitsTypeName() {
			return GetRuleContext<MultibitsTypeNameContext>(0);
		}
		public MultibitsLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsLiteralContext multibitsLiteral() {
		MultibitsLiteralContext _localctx = new MultibitsLiteralContext(Context, State);
		EnterRule(_localctx, 440, RULE_multibitsLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921504606846976L) != 0)) {
				{
				State = 2304;
				multibitsTypeName();
				State = 2305;
				Match(T__8);
				}
			}

			State = 2309;
			multibitsLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_INT() { return GetToken(stParser.BINARY_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_INT() { return GetToken(stParser.OCTAL_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INT() { return GetToken(stParser.HEX_INT, 0); }
		public MultibitsLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsLiteralValueContext multibitsLiteralValue() {
		MultibitsLiteralValueContext _localctx = new MultibitsLiteralValueContext(Context, State);
		EnterRule(_localctx, 442, RULE_multibitsLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2311;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 527765581332480L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(stParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(stParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DWORD() { return GetToken(stParser.DWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LWORD() { return GetToken(stParser.LWORD, 0); }
		public MultibitsTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsTypeNameContext multibitsTypeName() {
		MultibitsTypeNameContext _localctx = new MultibitsTypeNameContext(Context, State);
		EnterRule(_localctx, 444, RULE_multibitsTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2313;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921504606846976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralValueContext realLiteralValue() {
			return GetRuleContext<RealLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeNameContext realTypeName() {
			return GetRuleContext<RealTypeNameContext>(0);
		}
		public RealLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralContext realLiteral() {
		RealLiteralContext _localctx = new RealLiteralContext(Context, State);
		EnterRule(_localctx, 446, RULE_realLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REAL || _la==LREAL) {
				{
				State = 2315;
				realTypeName();
				State = 2316;
				Match(T__8);
				}
			}

			State = 2320;
			realLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL_REAL() { return GetToken(stParser.GENERAL_REAL, 0); }
		public RealLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralValueContext realLiteralValue() {
		RealLiteralValueContext _localctx = new RealLiteralValueContext(Context, State);
		EnterRule(_localctx, 448, RULE_realLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2322;
			Match(GENERAL_REAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(stParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LREAL() { return GetToken(stParser.LREAL, 0); }
		public RealTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealTypeNameContext realTypeName() {
		RealTypeNameContext _localctx = new RealTypeNameContext(Context, State);
		EnterRule(_localctx, 450, RULE_realTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2324;
			_la = TokenStream.LA(1);
			if ( !(_la==REAL || _la==LREAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralValueContext boolLiteralValue() {
			return GetRuleContext<BoolLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTypeNameContext boolTypeName() {
			return GetRuleContext<BoolTypeNameContext>(0);
		}
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 452, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BOOL) {
				{
				State = 2326;
				boolTypeName();
				State = 2327;
				Match(T__8);
				}
			}

			State = 2331;
			boolLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(stParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public BoolLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralValueContext boolLiteralValue() {
		BoolLiteralValueContext _localctx = new BoolLiteralValueContext(Context, State);
		EnterRule(_localctx, 454, RULE_boolLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2333;
			_la = TokenStream.LA(1);
			if ( !(_la==UNSIGNED_INT || _la==BOOLEAN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(stParser.BOOL, 0); }
		public BoolTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolTypeNameContext boolTypeName() {
		BoolTypeNameContext _localctx = new BoolTypeNameContext(Context, State);
		EnterRule(_localctx, 456, RULE_boolTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2335;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharStringContext charString() {
			return GetRuleContext<CharStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharTypeNameContext charTypeName() {
			return GetRuleContext<CharTypeNameContext>(0);
		}
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 458, RULE_charLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 15L) != 0)) {
				{
				State = 2337;
				charTypeName();
				State = 2338;
				Match(T__8);
				}
			}

			State = 2342;
			charString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BYTE_STRING() { return GetToken(stParser.SINGLE_BYTE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BYTE_STRING() { return GetToken(stParser.DOUBLE_BYTE_STRING, 0); }
		public CharStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharStringContext charString() {
		CharStringContext _localctx = new CharStringContext(Context, State);
		EnterRule(_localctx, 460, RULE_charString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2344;
			_la = TokenStream.LA(1);
			if ( !(_la==SINGLE_BYTE_STRING || _la==DOUBLE_BYTE_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(stParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WCHAR() { return GetToken(stParser.WCHAR, 0); }
		public CharTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharTypeNameContext charTypeName() {
		CharTypeNameContext _localctx = new CharTypeNameContext(Context, State);
		EnterRule(_localctx, 462, RULE_charTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2346;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationLiteralContext durationLiteral() {
			return GetRuleContext<DurationLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayLiteralContext timeOfDayLiteral() {
			return GetRuleContext<TimeOfDayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeLiteralContext dateAndTimeLiteral() {
			return GetRuleContext<DateAndTimeLiteralContext>(0);
		}
		public TimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeLiteralContext timeLiteral() {
		TimeLiteralContext _localctx = new TimeLiteralContext(Context, State);
		EnterRule(_localctx, 464, RULE_timeLiteral);
		try {
			State = 2352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
			case T__26:
			case TIME:
			case LTIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2348;
				durationLiteral();
				}
				break;
			case T__27:
			case T__28:
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2349;
				timeOfDayLiteral();
				}
				break;
			case T__29:
			case T__30:
			case DATE:
			case LDATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2350;
				dateLiteral();
				}
				break;
			case T__31:
			case T__32:
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2351;
				dateAndTimeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationLiteralValueContext durationLiteralValue() {
			return GetRuleContext<DurationLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationTypeNameContext durationTypeName() {
			return GetRuleContext<DurationTypeNameContext>(0);
		}
		public DurationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationLiteralContext durationLiteral() {
		DurationLiteralContext _localctx = new DurationLiteralContext(Context, State);
		EnterRule(_localctx, 466, RULE_durationLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2354;
			durationTypeName();
			}
			State = 2355;
			Match(T__8);
			State = 2356;
			durationLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DURATION() { return GetToken(stParser.DURATION, 0); }
		public DurationLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationLiteralValueContext durationLiteralValue() {
		DurationLiteralValueContext _localctx = new DurationLiteralValueContext(Context, State);
		EnterRule(_localctx, 468, RULE_durationLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2358;
			Match(DURATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(stParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTIME() { return GetToken(stParser.LTIME, 0); }
		public DurationTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationTypeNameContext durationTypeName() {
		DurationTypeNameContext _localctx = new DurationTypeNameContext(Context, State);
		EnterRule(_localctx, 470, RULE_durationTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2360;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & 105553116266499L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayTypeNameContext timeOfDayTypeName() {
			return GetRuleContext<TimeOfDayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayLiteralValueContext timeOfDayLiteralValue() {
			return GetRuleContext<TimeOfDayLiteralValueContext>(0);
		}
		public TimeOfDayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayLiteralContext timeOfDayLiteral() {
		TimeOfDayLiteralContext _localctx = new TimeOfDayLiteralContext(Context, State);
		EnterRule(_localctx, 472, RULE_timeOfDayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2362;
			timeOfDayTypeName();
			State = 2363;
			Match(T__8);
			State = 2364;
			timeOfDayLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCK_TIME() { return GetToken(stParser.CLOCK_TIME, 0); }
		public TimeOfDayLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayLiteralValueContext timeOfDayLiteralValue() {
		TimeOfDayLiteralValueContext _localctx = new TimeOfDayLiteralValueContext(Context, State);
		EnterRule(_localctx, 474, RULE_timeOfDayLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2366;
			Match(CLOCK_TIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_OF_DAY() { return GetToken(stParser.TIME_OF_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTIME_OF_DAY() { return GetToken(stParser.LTIME_OF_DAY, 0); }
		public TimeOfDayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayTypeNameContext timeOfDayTypeName() {
		TimeOfDayTypeNameContext _localctx = new TimeOfDayTypeNameContext(Context, State);
		EnterRule(_localctx, 476, RULE_timeOfDayTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2368;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 105553116266499L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralValueContext dateLiteralValue() {
			return GetRuleContext<DateLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTypeNameContext dateTypeName() {
			return GetRuleContext<DateTypeNameContext>(0);
		}
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(Context, State);
		EnterRule(_localctx, 478, RULE_dateLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2370;
			dateTypeName();
			}
			State = 2371;
			Match(T__8);
			State = 2372;
			dateLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_VALUE() { return GetToken(stParser.DATE_VALUE, 0); }
		public DateLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralValueContext dateLiteralValue() {
		DateLiteralValueContext _localctx = new DateLiteralValueContext(Context, State);
		EnterRule(_localctx, 480, RULE_dateLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2374;
			Match(DATE_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(stParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDATE() { return GetToken(stParser.LDATE, 0); }
		public DateTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTypeNameContext dateTypeName() {
		DateTypeNameContext _localctx = new DateTypeNameContext(Context, State);
		EnterRule(_localctx, 482, RULE_dateTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2376;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 105553116266499L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeLiteralValueContext dateAndTimeLiteralValue() {
			return GetRuleContext<DateAndTimeLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeTypeNameContext dateAndTimeTypeName() {
			return GetRuleContext<DateAndTimeTypeNameContext>(0);
		}
		public DateAndTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeLiteralContext dateAndTimeLiteral() {
		DateAndTimeLiteralContext _localctx = new DateAndTimeLiteralContext(Context, State);
		EnterRule(_localctx, 484, RULE_dateAndTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2378;
			dateAndTimeTypeName();
			}
			State = 2379;
			Match(T__8);
			State = 2380;
			dateAndTimeLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_TIME_VALUE() { return GetToken(stParser.DATE_TIME_VALUE, 0); }
		public DateAndTimeLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeLiteralValueContext dateAndTimeLiteralValue() {
		DateAndTimeLiteralValueContext _localctx = new DateAndTimeLiteralValueContext(Context, State);
		EnterRule(_localctx, 486, RULE_dateAndTimeLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2382;
			Match(DATE_TIME_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_AND_TIME() { return GetToken(stParser.DATE_AND_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDATE_AND_TIME() { return GetToken(stParser.LDATE_AND_TIME, 0); }
		public DateAndTimeTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeTypeNameContext dateAndTimeTypeName() {
		DateAndTimeTypeNameContext _localctx = new DateAndTimeTypeNameContext(Context, State);
		EnterRule(_localctx, 488, RULE_dateAndTimeTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2384;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & 105553116266499L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_VARIABLE() { return GetToken(stParser.DIRECT_VARIABLE, 0); }
		public DirectVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectVariableContext directVariable() {
		DirectVariableContext _localctx = new DirectVariableContext(Context, State);
		EnterRule(_localctx, 490, RULE_directVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2386;
			Match(DIRECT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,173,2389,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,1,0,1,0,1,0,5,0,496,8,0,10,0,12,0,
		499,9,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,3,3,508,8,3,1,3,1,3,4,3,512,8,3,11,
		3,12,3,513,3,3,516,8,3,1,3,3,3,519,8,3,1,3,3,3,522,8,3,1,3,1,3,1,4,1,4,
		1,4,1,4,1,4,3,4,531,8,4,1,4,1,4,1,4,1,5,1,5,1,5,5,5,539,8,5,10,5,12,5,
		542,9,5,1,5,1,5,1,5,4,5,547,8,5,11,5,12,5,548,1,6,1,6,1,7,1,7,1,7,1,7,
		5,7,557,8,7,10,7,12,7,560,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,570,
		8,8,1,9,1,9,1,9,3,9,575,8,9,1,9,1,9,1,9,1,9,3,9,581,8,9,1,9,1,9,1,9,3,
		9,586,8,9,1,9,1,9,3,9,590,8,9,1,9,1,9,5,9,594,8,9,10,9,12,9,597,9,9,1,
		9,3,9,600,8,9,1,10,1,10,1,10,3,10,605,8,10,1,10,1,10,1,10,3,10,610,8,10,
		1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,
		1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,634,8,17,1,17,1,17,1,17,1,
		17,1,17,3,17,641,8,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,
		652,8,18,1,19,1,19,3,19,656,8,19,1,19,1,19,1,19,3,19,661,8,19,1,19,1,19,
		1,19,1,19,1,19,1,19,3,19,669,8,19,1,20,1,20,1,20,5,20,674,8,20,10,20,12,
		20,677,9,20,1,21,1,21,3,21,681,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,3,23,695,8,23,1,24,1,24,1,24,1,24,3,24,701,8,
		24,1,25,1,25,3,25,705,8,25,1,26,1,26,1,26,1,26,5,26,711,8,26,10,26,12,
		26,714,9,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,724,8,27,1,27,
		1,27,5,27,728,8,27,10,27,12,27,731,9,27,1,27,1,27,3,27,735,8,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,748,8,27,1,27,1,27,
		1,27,3,27,753,8,27,1,28,1,28,3,28,757,8,28,1,28,1,28,5,28,761,8,28,10,
		28,12,28,764,9,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,4,29,775,
		8,29,11,29,12,29,776,1,30,1,30,1,30,5,30,782,8,30,10,30,12,30,785,9,30,
		1,31,1,31,1,32,1,32,1,32,1,32,5,32,793,8,32,10,32,12,32,796,9,32,1,32,
		1,32,1,33,5,33,801,8,33,10,33,12,33,804,9,33,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,1,33,4,33,814,8,33,11,33,12,33,815,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,5,34,826,8,34,10,34,12,34,829,9,34,1,34,1,34,1,34,1,35,
		1,35,1,36,1,36,1,36,5,36,839,8,36,10,36,12,36,842,9,36,1,36,1,36,1,37,
		1,37,1,37,1,37,5,37,850,8,37,10,37,12,37,853,9,37,1,37,1,37,1,38,1,38,
		1,38,1,38,3,38,861,8,38,1,38,1,38,1,38,3,38,866,8,38,1,39,1,39,1,39,1,
		39,4,39,872,8,39,11,39,12,39,873,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,
		40,1,40,3,40,885,8,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,3,42,894,8,42,
		1,43,1,43,3,43,898,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,907,8,
		44,1,45,1,45,3,45,911,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,3,47,920,
		8,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,928,8,48,1,49,1,49,1,49,1,49,1,
		50,1,50,1,50,3,50,937,8,50,1,50,1,50,3,50,941,8,50,1,51,1,51,1,51,1,51,
		5,51,947,8,51,10,51,12,51,950,9,51,1,51,1,51,1,51,3,51,955,8,51,1,52,1,
		52,1,52,1,52,5,52,961,8,52,10,52,12,52,964,9,52,1,52,1,52,3,52,968,8,52,
		1,52,1,52,3,52,972,8,52,1,53,1,53,1,53,1,53,3,53,978,8,53,3,53,980,8,53,
		1,54,1,54,1,54,3,54,985,8,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,
		56,3,56,996,8,56,1,57,1,57,1,57,1,57,1,57,1,57,5,57,1004,8,57,10,57,12,
		57,1007,9,57,1,57,1,57,1,57,1,57,3,57,1013,8,57,1,58,1,58,3,58,1017,8,
		58,1,59,1,59,1,59,1,59,5,59,1023,8,59,10,59,12,59,1026,9,59,1,59,1,59,
		1,60,1,60,1,60,1,60,3,60,1034,8,60,1,60,3,60,1037,8,60,1,61,1,61,1,61,
		1,61,3,61,1043,8,61,1,62,1,62,1,62,1,62,1,63,1,63,3,63,1051,8,63,1,64,
		1,64,1,64,3,64,1056,8,64,1,65,1,65,3,65,1060,8,65,1,65,1,65,1,65,4,65,
		1065,8,65,11,65,12,65,1066,1,65,1,65,1,66,1,66,1,66,3,66,1074,8,66,3,66,
		1076,8,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1084,8,66,1,67,1,67,1,67,
		1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,5,70,1098,8,70,10,70,12,70,
		1101,9,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1112,8,71,
		1,72,1,72,1,72,1,72,1,72,3,72,1119,8,72,1,73,1,73,1,73,1,73,1,74,1,74,
		1,74,3,74,1128,8,74,1,75,4,75,1131,8,75,11,75,12,75,1132,1,75,1,75,1,76,
		1,76,1,77,1,77,1,77,5,77,1142,8,77,10,77,12,77,1145,9,77,1,77,1,77,1,78,
		1,78,1,79,1,79,3,79,1153,8,79,1,80,1,80,1,80,1,80,1,80,3,80,1160,8,80,
		1,80,1,80,1,81,1,81,1,81,1,81,1,81,3,81,1169,8,81,1,82,1,82,4,82,1173,
		8,82,11,82,12,82,1174,1,83,1,83,1,84,1,84,1,84,5,84,1182,8,84,10,84,12,
		84,1185,9,84,1,84,1,84,1,85,1,85,3,85,1191,8,85,1,85,1,85,5,85,1195,8,
		85,10,85,12,85,1198,9,85,1,85,1,85,1,85,3,85,1203,8,85,3,85,1205,8,85,
		1,85,1,85,3,85,1209,8,85,1,85,1,85,1,85,1,85,5,85,1215,8,85,10,85,12,85,
		1218,9,85,1,85,5,85,1221,8,85,10,85,12,85,1224,9,85,1,85,1,85,1,85,1,86,
		1,86,1,86,3,86,1232,8,86,1,87,1,87,3,87,1236,8,87,1,87,1,87,1,87,5,87,
		1241,8,87,10,87,12,87,1244,9,87,1,87,1,87,1,88,1,88,3,88,1250,8,88,1,89,
		1,89,3,89,1254,8,89,1,89,1,89,1,89,5,89,1259,8,89,10,89,12,89,1262,9,89,
		1,89,1,89,1,90,1,90,3,90,1268,8,90,1,91,1,91,1,91,3,91,1273,8,91,1,92,
		1,92,1,92,3,92,1278,8,92,1,92,1,92,1,92,5,92,1283,8,92,10,92,12,92,1286,
		9,92,1,92,1,92,1,93,1,93,1,94,1,94,1,94,3,94,1295,8,94,1,94,3,94,1298,
		8,94,1,94,1,94,1,94,3,94,1303,8,94,1,94,1,94,1,94,5,94,1308,8,94,10,94,
		12,94,1311,9,94,1,94,1,94,1,94,1,95,1,95,1,96,1,96,1,96,1,96,1,96,3,96,
		1323,8,96,1,97,1,97,1,97,5,97,1328,8,97,10,97,12,97,1331,9,97,1,97,1,97,
		1,98,1,98,1,98,1,98,3,98,1339,8,98,1,98,1,98,3,98,1343,8,98,1,99,1,99,
		1,99,3,99,1348,8,99,1,100,1,100,1,100,5,100,1353,8,100,10,100,12,100,1356,
		9,100,1,100,1,100,1,101,1,101,1,102,1,102,1,102,5,102,1365,8,102,10,102,
		12,102,1368,9,102,1,102,1,102,1,103,1,103,1,104,1,104,1,104,5,104,1377,
		8,104,10,104,12,104,1380,9,104,1,104,1,104,1,105,1,105,1,106,1,106,1,106,
		5,106,1389,8,106,10,106,12,106,1392,9,106,1,106,1,106,1,107,1,107,1,108,
		1,108,1,108,5,108,1401,8,108,10,108,12,108,1404,9,108,1,108,1,108,1,109,
		1,109,1,110,1,110,3,110,1412,8,110,1,111,1,111,1,111,1,111,1,111,4,111,
		1419,8,111,11,111,12,111,1420,3,111,1423,8,111,1,111,1,111,3,111,1427,
		8,111,1,112,1,112,3,112,1431,8,112,1,113,1,113,1,114,1,114,1,114,4,114,
		1438,8,114,11,114,12,114,1439,1,115,1,115,1,115,1,115,5,115,1446,8,115,
		10,115,12,115,1449,9,115,1,115,1,115,1,116,1,116,1,117,1,117,1,117,1,118,
		1,118,1,119,1,119,3,119,1462,8,119,1,119,1,119,1,119,5,119,1467,8,119,
		10,119,12,119,1470,9,119,1,119,1,119,1,120,1,120,1,120,3,120,1477,8,120,
		1,121,1,121,1,121,1,121,1,121,3,121,1484,8,121,1,121,1,121,1,121,1,121,
		3,121,1490,8,121,1,122,1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,124,
		1,124,1,124,5,124,1503,8,124,10,124,12,124,1506,9,124,1,125,1,125,1,126,
		1,126,1,126,1,126,1,127,1,127,1,127,1,127,1,127,5,127,1519,8,127,10,127,
		12,127,1522,9,127,1,127,1,127,1,127,1,127,1,128,1,128,1,128,1,128,1,129,
		1,129,1,129,1,129,1,130,1,130,1,130,5,130,1539,8,130,10,130,12,130,1542,
		9,130,1,130,1,130,1,130,1,131,1,131,1,131,3,131,1550,8,131,1,132,1,132,
		1,133,1,133,1,133,5,133,1557,8,133,10,133,12,133,1560,9,133,1,133,1,133,
		5,133,1564,8,133,10,133,12,133,1567,9,133,1,134,1,134,3,134,1571,8,134,
		1,134,1,134,1,134,5,134,1576,8,134,10,134,12,134,1579,9,134,1,134,1,134,
		1,135,1,135,3,135,1585,8,135,1,136,1,136,1,136,1,136,5,136,1591,8,136,
		10,136,12,136,1594,9,136,1,136,1,136,1,137,1,137,1,137,3,137,1601,8,137,
		1,138,1,138,1,138,1,138,1,138,1,138,3,138,1609,8,138,1,139,1,139,1,139,
		1,139,1,140,1,140,1,140,1,140,1,141,1,141,3,141,1621,8,141,1,141,3,141,
		1624,8,141,1,141,1,141,1,141,5,141,1629,8,141,10,141,12,141,1632,9,141,
		1,141,1,141,1,142,1,142,1,142,3,142,1639,8,142,1,142,1,142,1,142,5,142,
		1644,8,142,10,142,12,142,1647,9,142,1,142,1,142,1,143,1,143,3,143,1653,
		8,143,1,143,1,143,1,143,5,143,1658,8,143,10,143,12,143,1661,9,143,1,143,
		1,143,1,144,3,144,1666,8,144,1,144,1,144,1,144,1,144,1,145,1,145,1,145,
		1,145,3,145,1676,8,145,1,145,1,145,5,145,1680,8,145,10,145,12,145,1683,
		9,145,1,145,1,145,1,146,1,146,3,146,1689,8,146,1,146,1,146,1,146,5,146,
		1694,8,146,10,146,12,146,1697,9,146,1,146,1,146,1,147,1,147,1,147,1,147,
		1,147,1,147,1,147,3,147,1708,8,147,1,148,1,148,1,149,1,149,3,149,1714,
		8,149,1,149,1,149,1,149,5,149,1719,8,149,10,149,12,149,1722,9,149,1,149,
		1,149,1,150,1,150,1,150,1,150,3,150,1730,8,150,1,151,1,151,1,151,5,151,
		1735,8,151,10,151,12,151,1738,9,151,1,151,1,151,1,151,3,151,1743,8,151,
		1,152,1,152,1,152,1,152,1,152,3,152,1750,8,152,1,153,1,153,3,153,1754,
		8,153,1,154,1,154,1,154,1,154,1,155,1,155,1,155,3,155,1763,8,155,1,155,
		1,155,3,155,1767,8,155,1,156,1,156,1,156,1,156,1,157,1,157,1,157,1,157,
		3,157,1777,8,157,1,157,1,157,3,157,1781,8,157,1,158,1,158,3,158,1785,8,
		158,1,158,5,158,1788,8,158,10,158,12,158,1791,9,158,1,158,1,158,1,159,
		1,159,1,159,1,159,1,159,1,159,1,159,1,160,1,160,1,160,1,160,1,160,1,160,
		1,160,3,160,1809,8,160,3,160,1811,8,160,1,161,1,161,1,162,1,162,1,162,
		5,162,1818,8,162,10,162,12,162,1821,9,162,1,162,1,162,1,163,1,163,1,163,
		1,163,3,163,1829,8,163,1,163,5,163,1832,8,163,10,163,12,163,1835,9,163,
		1,163,1,163,1,163,5,163,1840,8,163,10,163,12,163,1843,9,163,1,163,1,163,
		1,163,1,164,1,164,1,164,3,164,1851,8,164,1,165,1,165,3,165,1855,8,165,
		1,166,1,166,1,167,1,167,3,167,1861,8,167,1,167,1,167,5,167,1865,8,167,
		10,167,12,167,1868,9,167,1,167,1,167,3,167,1872,8,167,1,167,1,167,3,167,
		1876,8,167,1,167,1,167,5,167,1880,8,167,10,167,12,167,1883,9,167,1,167,
		5,167,1886,8,167,10,167,12,167,1889,9,167,1,167,1,167,1,168,1,168,1,169,
		1,169,1,169,5,169,1898,8,169,10,169,12,169,1901,9,169,1,169,1,169,1,170,
		1,170,1,171,1,171,1,171,5,171,1910,8,171,10,171,12,171,1913,9,171,1,171,
		1,171,5,171,1917,8,171,10,171,12,171,1920,9,171,1,172,1,172,1,172,5,172,
		1925,8,172,10,172,12,172,1928,9,172,1,172,1,172,3,172,1932,8,172,1,172,
		5,172,1935,8,172,10,172,12,172,1938,9,172,1,172,1,172,1,173,1,173,1,173,
		1,173,3,173,1946,8,173,1,173,5,173,1949,8,173,10,173,12,173,1952,9,173,
		1,173,1,173,1,174,1,174,1,174,3,174,1959,8,174,1,175,1,175,1,175,1,175,
		3,175,1965,8,175,1,176,1,176,1,176,5,176,1970,8,176,10,176,12,176,1973,
		9,176,1,177,1,177,1,178,1,178,1,178,5,178,1980,8,178,10,178,12,178,1983,
		9,178,1,178,1,178,1,179,1,179,1,180,1,180,1,181,1,181,3,181,1993,8,181,
		1,182,1,182,1,182,1,182,1,182,5,182,2000,8,182,10,182,12,182,2003,9,182,
		3,182,2005,8,182,1,182,1,182,1,183,3,183,2010,8,183,1,183,5,183,2013,8,
		183,10,183,12,183,2016,9,183,1,184,1,184,1,184,1,184,3,184,2022,8,184,
		1,185,1,185,1,185,1,185,1,185,1,185,3,185,2030,8,185,1,186,1,186,3,186,
		2034,8,186,1,186,1,186,1,186,1,186,3,186,2040,8,186,1,187,1,187,1,187,
		1,187,1,187,3,187,2047,8,187,1,187,1,187,3,187,2051,8,187,1,187,1,187,
		4,187,2055,8,187,11,187,12,187,2056,1,187,1,187,3,187,2061,8,187,1,187,
		1,187,1,187,1,187,5,187,2067,8,187,10,187,12,187,2070,9,187,3,187,2072,
		8,187,1,187,1,187,1,188,1,188,1,188,1,188,1,188,1,188,3,188,2082,8,188,
		1,189,1,189,1,189,3,189,2087,8,189,1,189,1,189,1,189,3,189,2092,8,189,
		1,189,1,189,1,189,1,189,3,189,2098,8,189,1,190,1,190,3,190,2102,8,190,
		1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,5,191,2113,8,191,
		10,191,12,191,2116,9,191,1,191,1,191,3,191,2120,8,191,1,191,1,191,1,192,
		1,192,1,192,1,192,4,192,2128,8,192,11,192,12,192,2129,1,192,1,192,3,192,
		2134,8,192,1,192,1,192,1,193,1,193,1,193,1,193,1,194,1,194,1,194,5,194,
		2145,8,194,10,194,12,194,2148,9,194,1,195,1,195,3,195,2152,8,195,1,196,
		1,196,1,196,1,196,1,196,3,196,2159,8,196,1,197,1,197,1,197,1,197,1,197,
		1,197,1,197,1,197,1,198,1,198,1,199,1,199,1,199,1,199,1,199,3,199,2176,
		8,199,1,200,1,200,1,200,1,200,1,200,1,200,1,201,1,201,1,201,1,201,1,201,
		1,201,1,202,1,202,1,202,5,202,2193,8,202,10,202,12,202,2196,9,202,1,203,
		1,203,1,204,1,204,1,204,5,204,2203,8,204,10,204,12,204,2206,9,204,1,205,
		1,205,1,205,5,205,2211,8,205,10,205,12,205,2214,9,205,1,206,1,206,1,206,
		5,206,2219,8,206,10,206,12,206,2222,9,206,1,207,1,207,1,207,5,207,2227,
		8,207,10,207,12,207,2230,9,207,1,208,1,208,1,208,5,208,2235,8,208,10,208,
		12,208,2238,9,208,1,209,1,209,1,209,1,209,1,209,5,209,2245,8,209,10,209,
		12,209,2248,9,209,1,210,1,210,1,210,5,210,2253,8,210,10,210,12,210,2256,
		9,210,1,211,1,211,1,211,3,211,2261,8,211,1,211,3,211,2264,8,211,1,212,
		1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,2275,8,212,1,213,
		1,213,1,213,1,213,1,213,3,213,2282,8,213,1,214,1,214,3,214,2286,8,214,
		1,215,1,215,1,215,3,215,2291,8,215,1,215,1,215,1,216,1,216,1,217,1,217,
		3,217,2299,8,217,1,218,1,218,1,219,1,219,1,220,1,220,1,220,3,220,2308,
		8,220,1,220,1,220,1,221,1,221,1,222,1,222,1,223,1,223,1,223,3,223,2319,
		8,223,1,223,1,223,1,224,1,224,1,225,1,225,1,226,1,226,1,226,3,226,2330,
		8,226,1,226,1,226,1,227,1,227,1,228,1,228,1,229,1,229,1,229,3,229,2341,
		8,229,1,229,1,229,1,230,1,230,1,231,1,231,1,232,1,232,1,232,1,232,3,232,
		2353,8,232,1,233,1,233,1,233,1,233,1,234,1,234,1,235,1,235,1,236,1,236,
		1,236,1,236,1,237,1,237,1,238,1,238,1,239,1,239,1,239,1,239,1,240,1,240,
		1,241,1,241,1,242,1,242,1,242,1,242,1,243,1,243,1,244,1,244,1,245,1,245,
		1,245,0,0,246,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
		90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
		128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
		164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
		200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
		236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
		272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
		308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
		344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
		380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,
		416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
		452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,
		488,490,0,26,1,0,129,130,1,0,94,95,1,0,44,45,2,0,35,35,45,45,1,0,105,106,
		1,0,67,68,2,0,94,95,98,98,2,0,94,94,98,98,1,0,117,120,2,0,15,15,140,140,
		1,0,16,17,1,0,18,21,1,0,22,23,1,0,44,48,1,0,50,53,1,0,54,57,1,0,45,48,
		1,0,60,63,1,0,58,59,2,0,45,45,49,49,1,0,37,38,1,0,67,70,2,0,26,27,71,72,
		2,0,28,29,73,74,2,0,30,31,75,76,2,0,32,33,77,78,2493,0,497,1,0,0,0,2,500,
		1,0,0,0,4,502,1,0,0,0,6,504,1,0,0,0,8,525,1,0,0,0,10,540,1,0,0,0,12,550,
		1,0,0,0,14,552,1,0,0,0,16,563,1,0,0,0,18,599,1,0,0,0,20,604,1,0,0,0,22,
		611,1,0,0,0,24,613,1,0,0,0,26,617,1,0,0,0,28,619,1,0,0,0,30,621,1,0,0,
		0,32,625,1,0,0,0,34,627,1,0,0,0,36,651,1,0,0,0,38,653,1,0,0,0,40,670,1,
		0,0,0,42,680,1,0,0,0,44,682,1,0,0,0,46,694,1,0,0,0,48,700,1,0,0,0,50,704,
		1,0,0,0,52,706,1,0,0,0,54,717,1,0,0,0,56,754,1,0,0,0,58,774,1,0,0,0,60,
		778,1,0,0,0,62,786,1,0,0,0,64,788,1,0,0,0,66,802,1,0,0,0,68,817,1,0,0,
		0,70,833,1,0,0,0,72,840,1,0,0,0,74,845,1,0,0,0,76,856,1,0,0,0,78,867,1,
		0,0,0,80,884,1,0,0,0,82,886,1,0,0,0,84,890,1,0,0,0,86,897,1,0,0,0,88,906,
		1,0,0,0,90,910,1,0,0,0,92,912,1,0,0,0,94,916,1,0,0,0,96,927,1,0,0,0,98,
		929,1,0,0,0,100,933,1,0,0,0,102,942,1,0,0,0,104,967,1,0,0,0,106,973,1,
		0,0,0,108,984,1,0,0,0,110,988,1,0,0,0,112,992,1,0,0,0,114,1012,1,0,0,0,
		116,1016,1,0,0,0,118,1018,1,0,0,0,120,1036,1,0,0,0,122,1042,1,0,0,0,124,
		1044,1,0,0,0,126,1050,1,0,0,0,128,1052,1,0,0,0,130,1057,1,0,0,0,132,1070,
		1,0,0,0,134,1085,1,0,0,0,136,1088,1,0,0,0,138,1091,1,0,0,0,140,1093,1,
		0,0,0,142,1104,1,0,0,0,144,1113,1,0,0,0,146,1120,1,0,0,0,148,1124,1,0,
		0,0,150,1130,1,0,0,0,152,1136,1,0,0,0,154,1143,1,0,0,0,156,1148,1,0,0,
		0,158,1152,1,0,0,0,160,1154,1,0,0,0,162,1163,1,0,0,0,164,1170,1,0,0,0,
		166,1176,1,0,0,0,168,1183,1,0,0,0,170,1188,1,0,0,0,172,1231,1,0,0,0,174,
		1233,1,0,0,0,176,1249,1,0,0,0,178,1251,1,0,0,0,180,1267,1,0,0,0,182,1272,
		1,0,0,0,184,1274,1,0,0,0,186,1289,1,0,0,0,188,1291,1,0,0,0,190,1315,1,
		0,0,0,192,1322,1,0,0,0,194,1329,1,0,0,0,196,1342,1,0,0,0,198,1347,1,0,
		0,0,200,1354,1,0,0,0,202,1359,1,0,0,0,204,1366,1,0,0,0,206,1371,1,0,0,
		0,208,1378,1,0,0,0,210,1383,1,0,0,0,212,1390,1,0,0,0,214,1395,1,0,0,0,
		216,1402,1,0,0,0,218,1407,1,0,0,0,220,1411,1,0,0,0,222,1422,1,0,0,0,224,
		1430,1,0,0,0,226,1432,1,0,0,0,228,1434,1,0,0,0,230,1441,1,0,0,0,232,1452,
		1,0,0,0,234,1454,1,0,0,0,236,1457,1,0,0,0,238,1459,1,0,0,0,240,1476,1,
		0,0,0,242,1489,1,0,0,0,244,1491,1,0,0,0,246,1495,1,0,0,0,248,1499,1,0,
		0,0,250,1507,1,0,0,0,252,1509,1,0,0,0,254,1513,1,0,0,0,256,1527,1,0,0,
		0,258,1531,1,0,0,0,260,1535,1,0,0,0,262,1546,1,0,0,0,264,1551,1,0,0,0,
		266,1558,1,0,0,0,268,1568,1,0,0,0,270,1584,1,0,0,0,272,1586,1,0,0,0,274,
		1600,1,0,0,0,276,1602,1,0,0,0,278,1610,1,0,0,0,280,1614,1,0,0,0,282,1618,
		1,0,0,0,284,1635,1,0,0,0,286,1650,1,0,0,0,288,1665,1,0,0,0,290,1671,1,
		0,0,0,292,1686,1,0,0,0,294,1700,1,0,0,0,296,1709,1,0,0,0,298,1711,1,0,
		0,0,300,1725,1,0,0,0,302,1742,1,0,0,0,304,1749,1,0,0,0,306,1753,1,0,0,
		0,308,1755,1,0,0,0,310,1759,1,0,0,0,312,1768,1,0,0,0,314,1772,1,0,0,0,
		316,1782,1,0,0,0,318,1794,1,0,0,0,320,1810,1,0,0,0,322,1812,1,0,0,0,324,
		1819,1,0,0,0,326,1824,1,0,0,0,328,1850,1,0,0,0,330,1854,1,0,0,0,332,1856,
		1,0,0,0,334,1858,1,0,0,0,336,1892,1,0,0,0,338,1899,1,0,0,0,340,1904,1,
		0,0,0,342,1911,1,0,0,0,344,1921,1,0,0,0,346,1941,1,0,0,0,348,1955,1,0,
		0,0,350,1964,1,0,0,0,352,1966,1,0,0,0,354,1974,1,0,0,0,356,1981,1,0,0,
		0,358,1986,1,0,0,0,360,1988,1,0,0,0,362,1990,1,0,0,0,364,1994,1,0,0,0,
		366,2014,1,0,0,0,368,2021,1,0,0,0,370,2029,1,0,0,0,372,2033,1,0,0,0,374,
		2060,1,0,0,0,376,2081,1,0,0,0,378,2097,1,0,0,0,380,2101,1,0,0,0,382,2103,
		1,0,0,0,384,2123,1,0,0,0,386,2137,1,0,0,0,388,2141,1,0,0,0,390,2151,1,
		0,0,0,392,2158,1,0,0,0,394,2160,1,0,0,0,396,2168,1,0,0,0,398,2170,1,0,
		0,0,400,2177,1,0,0,0,402,2183,1,0,0,0,404,2189,1,0,0,0,406,2197,1,0,0,
		0,408,2199,1,0,0,0,410,2207,1,0,0,0,412,2215,1,0,0,0,414,2223,1,0,0,0,
		416,2231,1,0,0,0,418,2239,1,0,0,0,420,2249,1,0,0,0,422,2263,1,0,0,0,424,
		2274,1,0,0,0,426,2281,1,0,0,0,428,2285,1,0,0,0,430,2290,1,0,0,0,432,2294,
		1,0,0,0,434,2298,1,0,0,0,436,2300,1,0,0,0,438,2302,1,0,0,0,440,2307,1,
		0,0,0,442,2311,1,0,0,0,444,2313,1,0,0,0,446,2318,1,0,0,0,448,2322,1,0,
		0,0,450,2324,1,0,0,0,452,2329,1,0,0,0,454,2333,1,0,0,0,456,2335,1,0,0,
		0,458,2340,1,0,0,0,460,2344,1,0,0,0,462,2346,1,0,0,0,464,2352,1,0,0,0,
		466,2354,1,0,0,0,468,2358,1,0,0,0,470,2360,1,0,0,0,472,2362,1,0,0,0,474,
		2366,1,0,0,0,476,2368,1,0,0,0,478,2370,1,0,0,0,480,2374,1,0,0,0,482,2376,
		1,0,0,0,484,2378,1,0,0,0,486,2382,1,0,0,0,488,2384,1,0,0,0,490,2386,1,
		0,0,0,492,496,3,6,3,0,493,496,3,68,34,0,494,496,3,66,33,0,495,492,1,0,
		0,0,495,493,1,0,0,0,495,494,1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,497,
		498,1,0,0,0,498,1,1,0,0,0,499,497,1,0,0,0,500,501,5,168,0,0,501,3,1,0,
		0,0,502,503,5,168,0,0,503,5,1,0,0,0,504,505,5,124,0,0,505,507,3,2,1,0,
		506,508,3,298,149,0,507,506,1,0,0,0,507,508,1,0,0,0,508,515,1,0,0,0,509,
		516,3,10,5,0,510,512,3,8,4,0,511,510,1,0,0,0,512,513,1,0,0,0,513,511,1,
		0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,509,1,0,0,0,515,511,1,0,0,0,
		516,518,1,0,0,0,517,519,3,14,7,0,518,517,1,0,0,0,518,519,1,0,0,0,519,521,
		1,0,0,0,520,522,3,52,26,0,521,520,1,0,0,0,521,522,1,0,0,0,522,523,1,0,
		0,0,523,524,5,125,0,0,524,7,1,0,0,0,525,526,5,126,0,0,526,527,3,12,6,0,
		527,528,5,127,0,0,528,530,3,4,2,0,529,531,3,298,149,0,530,529,1,0,0,0,
		530,531,1,0,0,0,531,532,1,0,0,0,532,533,3,10,5,0,533,534,5,128,0,0,534,
		9,1,0,0,0,535,536,3,30,15,0,536,537,5,1,0,0,537,539,1,0,0,0,538,535,1,
		0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,546,1,0,0,0,
		542,540,1,0,0,0,543,544,3,38,19,0,544,545,5,1,0,0,545,547,1,0,0,0,546,
		543,1,0,0,0,547,548,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,0,549,11,1,0,
		0,0,550,551,5,168,0,0,551,13,1,0,0,0,552,558,5,123,0,0,553,554,3,16,8,
		0,554,555,5,1,0,0,555,557,1,0,0,0,556,553,1,0,0,0,557,560,1,0,0,0,558,
		556,1,0,0,0,558,559,1,0,0,0,559,561,1,0,0,0,560,558,1,0,0,0,561,562,5,
		96,0,0,562,15,1,0,0,0,563,564,3,22,11,0,564,565,5,2,0,0,565,566,3,18,9,
		0,566,567,5,2,0,0,567,569,3,116,58,0,568,570,3,28,14,0,569,568,1,0,0,0,
		569,570,1,0,0,0,570,17,1,0,0,0,571,572,3,12,6,0,572,573,5,166,0,0,573,
		575,1,0,0,0,574,571,1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,600,3,
		490,245,0,577,578,3,12,6,0,578,579,5,166,0,0,579,581,1,0,0,0,580,577,1,
		0,0,0,580,581,1,0,0,0,581,585,1,0,0,0,582,583,3,26,13,0,583,584,5,166,
		0,0,584,586,1,0,0,0,585,582,1,0,0,0,585,586,1,0,0,0,586,595,1,0,0,0,587,
		590,3,266,133,0,588,590,3,342,171,0,589,587,1,0,0,0,589,588,1,0,0,0,590,
		591,1,0,0,0,591,592,5,166,0,0,592,594,1,0,0,0,593,589,1,0,0,0,594,597,
		1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,595,1,0,0,
		0,598,600,3,222,111,0,599,574,1,0,0,0,599,580,1,0,0,0,600,19,1,0,0,0,601,
		602,3,12,6,0,602,603,5,166,0,0,603,605,1,0,0,0,604,601,1,0,0,0,604,605,
		1,0,0,0,605,606,1,0,0,0,606,609,3,296,148,0,607,608,5,166,0,0,608,610,
		3,138,69,0,609,607,1,0,0,0,609,610,1,0,0,0,610,21,1,0,0,0,611,612,5,168,
		0,0,612,23,1,0,0,0,613,614,3,26,13,0,614,615,5,166,0,0,615,616,3,222,111,
		0,616,25,1,0,0,0,617,618,5,168,0,0,618,27,1,0,0,0,619,620,7,0,0,0,620,
		29,1,0,0,0,621,622,5,131,0,0,622,623,3,32,16,0,623,624,3,34,17,0,624,31,
		1,0,0,0,625,626,5,168,0,0,626,33,1,0,0,0,627,633,5,3,0,0,628,629,5,132,
		0,0,629,630,5,4,0,0,630,631,3,36,18,0,631,632,5,5,0,0,632,634,1,0,0,0,
		633,628,1,0,0,0,633,634,1,0,0,0,634,640,1,0,0,0,635,636,5,133,0,0,636,
		637,5,4,0,0,637,638,3,36,18,0,638,639,5,5,0,0,639,641,1,0,0,0,640,635,
		1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,643,5,134,0,0,643,644,5,4,
		0,0,644,645,5,45,0,0,645,646,5,6,0,0,646,35,1,0,0,0,647,652,3,426,213,
		0,648,652,3,20,10,0,649,652,3,24,12,0,650,652,3,490,245,0,651,647,1,0,
		0,0,651,648,1,0,0,0,651,649,1,0,0,0,651,650,1,0,0,0,652,37,1,0,0,0,653,
		655,5,121,0,0,654,656,7,1,0,0,655,654,1,0,0,0,655,656,1,0,0,0,656,657,
		1,0,0,0,657,660,3,26,13,0,658,659,5,135,0,0,659,661,3,32,16,0,660,658,
		1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,662,663,5,2,0,0,663,668,3,72,36,
		0,664,665,5,3,0,0,665,666,3,40,20,0,666,667,5,6,0,0,667,669,1,0,0,0,668,
		664,1,0,0,0,668,669,1,0,0,0,669,39,1,0,0,0,670,675,3,42,21,0,671,672,5,
		5,0,0,672,674,3,42,21,0,673,671,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,
		0,675,676,1,0,0,0,676,41,1,0,0,0,677,675,1,0,0,0,678,681,3,44,22,0,679,
		681,3,46,23,0,680,678,1,0,0,0,680,679,1,0,0,0,681,43,1,0,0,0,682,683,3,
		266,133,0,683,684,5,135,0,0,684,685,3,32,16,0,685,45,1,0,0,0,686,687,3,
		222,111,0,687,688,5,4,0,0,688,689,3,48,24,0,689,695,1,0,0,0,690,691,3,
		222,111,0,691,692,5,7,0,0,692,693,3,50,25,0,693,695,1,0,0,0,694,686,1,
		0,0,0,694,690,1,0,0,0,695,47,1,0,0,0,696,701,3,426,213,0,697,701,3,108,
		54,0,698,701,3,20,10,0,699,701,3,490,245,0,700,696,1,0,0,0,700,697,1,0,
		0,0,700,698,1,0,0,0,700,699,1,0,0,0,701,49,1,0,0,0,702,705,3,20,10,0,703,
		705,3,490,245,0,704,702,1,0,0,0,704,703,1,0,0,0,705,51,1,0,0,0,706,712,
		5,136,0,0,707,708,3,54,27,0,708,709,5,1,0,0,709,711,1,0,0,0,710,707,1,
		0,0,0,711,714,1,0,0,0,712,710,1,0,0,0,712,713,1,0,0,0,713,715,1,0,0,0,
		714,712,1,0,0,0,715,716,5,96,0,0,716,53,1,0,0,0,717,718,3,12,6,0,718,719,
		5,166,0,0,719,720,3,26,13,0,720,729,5,166,0,0,721,724,3,266,133,0,722,
		724,3,342,171,0,723,721,1,0,0,0,723,722,1,0,0,0,724,725,1,0,0,0,725,726,
		5,166,0,0,726,728,1,0,0,0,727,723,1,0,0,0,728,731,1,0,0,0,729,727,1,0,
		0,0,729,730,1,0,0,0,730,752,1,0,0,0,731,729,1,0,0,0,732,734,3,250,125,
		0,733,735,3,134,67,0,734,733,1,0,0,0,734,735,1,0,0,0,735,736,1,0,0,0,736,
		737,5,2,0,0,737,738,3,304,152,0,738,753,1,0,0,0,739,740,3,266,133,0,740,
		741,5,2,0,0,741,742,3,168,84,0,742,748,1,0,0,0,743,744,3,342,171,0,744,
		745,5,2,0,0,745,746,3,338,169,0,746,748,1,0,0,0,747,739,1,0,0,0,747,743,
		1,0,0,0,748,749,1,0,0,0,749,750,5,4,0,0,750,751,3,140,70,0,751,753,1,0,
		0,0,752,732,1,0,0,0,752,747,1,0,0,0,753,55,1,0,0,0,754,756,5,137,0,0,755,
		757,5,120,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,762,
		3,60,30,0,759,761,3,64,32,0,760,759,1,0,0,0,761,764,1,0,0,0,762,760,1,
		0,0,0,762,763,1,0,0,0,763,765,1,0,0,0,764,762,1,0,0,0,765,766,3,58,29,
		0,766,767,5,138,0,0,767,57,1,0,0,0,768,775,3,78,39,0,769,775,3,326,163,
		0,770,775,3,170,85,0,771,775,3,334,167,0,772,775,3,344,172,0,773,775,3,
		56,28,0,774,768,1,0,0,0,774,769,1,0,0,0,774,770,1,0,0,0,774,771,1,0,0,
		0,774,772,1,0,0,0,774,773,1,0,0,0,775,776,1,0,0,0,776,774,1,0,0,0,776,
		777,1,0,0,0,777,59,1,0,0,0,778,783,3,62,31,0,779,780,5,166,0,0,780,782,
		3,62,31,0,781,779,1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,
		0,0,784,61,1,0,0,0,785,783,1,0,0,0,786,787,5,168,0,0,787,63,1,0,0,0,788,
		789,5,139,0,0,789,794,3,60,30,0,790,791,5,5,0,0,791,793,3,60,30,0,792,
		790,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,794,795,1,0,0,0,795,797,1,
		0,0,0,796,794,1,0,0,0,797,798,5,1,0,0,798,65,1,0,0,0,799,801,3,64,32,0,
		800,799,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,813,
		1,0,0,0,804,802,1,0,0,0,805,814,3,298,149,0,806,814,3,78,39,0,807,814,
		3,14,7,0,808,814,3,326,163,0,809,814,3,170,85,0,810,814,3,334,167,0,811,
		814,3,344,172,0,812,814,3,56,28,0,813,805,1,0,0,0,813,806,1,0,0,0,813,
		807,1,0,0,0,813,808,1,0,0,0,813,809,1,0,0,0,813,810,1,0,0,0,813,811,1,
		0,0,0,813,812,1,0,0,0,814,815,1,0,0,0,815,813,1,0,0,0,815,816,1,0,0,0,
		816,67,1,0,0,0,817,818,5,121,0,0,818,827,3,70,35,0,819,826,3,328,164,0,
		820,826,3,330,165,0,821,826,3,290,145,0,822,826,3,182,91,0,823,826,3,286,
		143,0,824,826,3,74,37,0,825,819,1,0,0,0,825,820,1,0,0,0,825,821,1,0,0,
		0,825,822,1,0,0,0,825,823,1,0,0,0,825,824,1,0,0,0,826,829,1,0,0,0,827,
		825,1,0,0,0,827,828,1,0,0,0,828,830,1,0,0,0,829,827,1,0,0,0,830,831,3,
		186,93,0,831,832,5,122,0,0,832,69,1,0,0,0,833,834,5,168,0,0,834,71,1,0,
		0,0,835,836,3,62,31,0,836,837,5,166,0,0,837,839,1,0,0,0,838,835,1,0,0,
		0,839,842,1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,843,1,0,0,0,842,
		840,1,0,0,0,843,844,3,70,35,0,844,73,1,0,0,0,845,851,5,123,0,0,846,847,
		3,76,38,0,847,848,5,1,0,0,848,850,1,0,0,0,849,846,1,0,0,0,850,853,1,0,
		0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,854,1,0,0,0,853,851,1,0,0,0,854,
		855,5,96,0,0,855,75,1,0,0,0,856,857,3,22,11,0,857,858,5,2,0,0,858,860,
		3,222,111,0,859,861,3,136,68,0,860,859,1,0,0,0,860,861,1,0,0,0,861,862,
		1,0,0,0,862,863,5,2,0,0,863,865,3,116,58,0,864,866,3,28,14,0,865,864,1,
		0,0,0,865,866,1,0,0,0,866,77,1,0,0,0,867,871,5,79,0,0,868,869,3,80,40,
		0,869,870,5,1,0,0,870,872,1,0,0,0,871,868,1,0,0,0,872,873,1,0,0,0,873,
		871,1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,876,5,80,0,0,876,79,1,
		0,0,0,877,885,3,82,41,0,878,885,3,92,46,0,879,885,3,100,50,0,880,885,3,
		110,55,0,881,885,3,124,62,0,882,885,3,144,72,0,883,885,3,146,73,0,884,
		877,1,0,0,0,884,878,1,0,0,0,884,879,1,0,0,0,884,880,1,0,0,0,884,881,1,
		0,0,0,884,882,1,0,0,0,884,883,1,0,0,0,885,81,1,0,0,0,886,887,3,202,101,
		0,887,888,5,2,0,0,888,889,3,84,42,0,889,83,1,0,0,0,890,893,3,86,43,0,891,
		892,5,4,0,0,892,894,3,406,203,0,893,891,1,0,0,0,893,894,1,0,0,0,894,85,
		1,0,0,0,895,898,3,88,44,0,896,898,3,200,100,0,897,895,1,0,0,0,897,896,
		1,0,0,0,898,87,1,0,0,0,899,907,3,90,45,0,900,907,3,456,228,0,901,907,3,
		192,96,0,902,907,3,444,222,0,903,907,3,196,98,0,904,907,3,482,241,0,905,
		907,3,470,235,0,906,899,1,0,0,0,906,900,1,0,0,0,906,901,1,0,0,0,906,902,
		1,0,0,0,906,903,1,0,0,0,906,904,1,0,0,0,906,905,1,0,0,0,907,89,1,0,0,0,
		908,911,3,434,217,0,909,911,3,450,225,0,910,908,1,0,0,0,910,909,1,0,0,
		0,911,91,1,0,0,0,912,913,3,206,103,0,913,914,5,2,0,0,914,915,3,94,47,0,
		915,93,1,0,0,0,916,919,3,96,48,0,917,918,5,4,0,0,918,920,7,2,0,0,919,917,
		1,0,0,0,919,920,1,0,0,0,920,95,1,0,0,0,921,922,3,434,217,0,922,923,5,3,
		0,0,923,924,3,98,49,0,924,925,5,6,0,0,925,928,1,0,0,0,926,928,3,204,102,
		0,927,921,1,0,0,0,927,926,1,0,0,0,928,97,1,0,0,0,929,930,3,406,203,0,930,
		931,5,8,0,0,931,932,3,406,203,0,932,99,1,0,0,0,933,934,3,210,105,0,934,
		940,5,2,0,0,935,937,3,88,44,0,936,935,1,0,0,0,936,937,1,0,0,0,937,938,
		1,0,0,0,938,941,3,102,51,0,939,941,3,104,52,0,940,936,1,0,0,0,940,939,
		1,0,0,0,941,101,1,0,0,0,942,943,5,3,0,0,943,948,3,106,53,0,944,945,5,5,
		0,0,945,947,3,106,53,0,946,944,1,0,0,0,947,950,1,0,0,0,948,946,1,0,0,0,
		948,949,1,0,0,0,949,951,1,0,0,0,950,948,1,0,0,0,951,954,5,6,0,0,952,953,
		5,4,0,0,953,955,3,108,54,0,954,952,1,0,0,0,954,955,1,0,0,0,955,103,1,0,
		0,0,956,957,5,3,0,0,957,962,5,168,0,0,958,959,5,5,0,0,959,961,5,168,0,
		0,960,958,1,0,0,0,961,964,1,0,0,0,962,960,1,0,0,0,962,963,1,0,0,0,963,
		965,1,0,0,0,964,962,1,0,0,0,965,968,5,6,0,0,966,968,3,208,104,0,967,956,
		1,0,0,0,967,966,1,0,0,0,968,971,1,0,0,0,969,970,5,4,0,0,970,972,3,108,
		54,0,971,969,1,0,0,0,971,972,1,0,0,0,972,105,1,0,0,0,973,979,5,168,0,0,
		974,977,5,4,0,0,975,978,3,430,215,0,976,978,3,406,203,0,977,975,1,0,0,
		0,977,976,1,0,0,0,978,980,1,0,0,0,979,974,1,0,0,0,979,980,1,0,0,0,980,
		107,1,0,0,0,981,982,3,210,105,0,982,983,5,9,0,0,983,985,1,0,0,0,984,981,
		1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,987,5,168,0,0,987,109,1,0,
		0,0,988,989,3,214,107,0,989,990,5,2,0,0,990,991,3,112,56,0,991,111,1,0,
		0,0,992,995,3,114,57,0,993,994,5,4,0,0,994,996,3,118,59,0,995,993,1,0,
		0,0,995,996,1,0,0,0,996,113,1,0,0,0,997,1013,3,212,106,0,998,999,5,81,
		0,0,999,1000,5,10,0,0,1000,1005,3,98,49,0,1001,1002,5,5,0,0,1002,1004,
		3,98,49,0,1003,1001,1,0,0,0,1004,1007,1,0,0,0,1005,1003,1,0,0,0,1005,1006,
		1,0,0,0,1006,1008,1,0,0,0,1007,1005,1,0,0,0,1008,1009,5,11,0,0,1009,1010,
		5,82,0,0,1010,1011,3,116,58,0,1011,1013,1,0,0,0,1012,997,1,0,0,0,1012,
		998,1,0,0,0,1013,115,1,0,0,0,1014,1017,3,88,44,0,1015,1017,3,192,96,0,
		1016,1014,1,0,0,0,1016,1015,1,0,0,0,1017,117,1,0,0,0,1018,1019,5,10,0,
		0,1019,1024,3,120,60,0,1020,1021,5,5,0,0,1021,1023,3,120,60,0,1022,1020,
		1,0,0,0,1023,1026,1,0,0,0,1024,1022,1,0,0,0,1024,1025,1,0,0,0,1025,1027,
		1,0,0,0,1026,1024,1,0,0,0,1027,1028,5,11,0,0,1028,119,1,0,0,0,1029,1037,
		3,122,61,0,1030,1031,5,45,0,0,1031,1033,5,3,0,0,1032,1034,3,122,61,0,1033,
		1032,1,0,0,0,1033,1034,1,0,0,0,1034,1035,1,0,0,0,1035,1037,5,6,0,0,1036,
		1029,1,0,0,0,1036,1030,1,0,0,0,1037,121,1,0,0,0,1038,1043,3,406,203,0,
		1039,1043,3,108,54,0,1040,1043,3,140,70,0,1041,1043,3,118,59,0,1042,1038,
		1,0,0,0,1042,1039,1,0,0,0,1042,1040,1,0,0,0,1042,1041,1,0,0,0,1043,123,
		1,0,0,0,1044,1045,3,218,109,0,1045,1046,5,2,0,0,1046,1047,3,126,63,0,1047,
		125,1,0,0,0,1048,1051,3,130,65,0,1049,1051,3,128,64,0,1050,1048,1,0,0,
		0,1050,1049,1,0,0,0,1051,127,1,0,0,0,1052,1055,3,216,108,0,1053,1054,5,
		4,0,0,1054,1056,3,140,70,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,129,
		1,0,0,0,1057,1059,5,83,0,0,1058,1060,5,84,0,0,1059,1058,1,0,0,0,1059,1060,
		1,0,0,0,1060,1064,1,0,0,0,1061,1062,3,132,66,0,1062,1063,5,1,0,0,1063,
		1065,1,0,0,0,1064,1061,1,0,0,0,1065,1066,1,0,0,0,1066,1064,1,0,0,0,1066,
		1067,1,0,0,0,1067,1068,1,0,0,0,1068,1069,5,85,0,0,1069,131,1,0,0,0,1070,
		1075,3,138,69,0,1071,1073,3,134,67,0,1072,1074,3,136,68,0,1073,1072,1,
		0,0,0,1073,1074,1,0,0,0,1074,1076,1,0,0,0,1075,1071,1,0,0,0,1075,1076,
		1,0,0,0,1076,1077,1,0,0,0,1077,1083,5,2,0,0,1078,1084,3,84,42,0,1079,1084,
		3,94,47,0,1080,1084,3,104,52,0,1081,1084,3,112,56,0,1082,1084,3,128,64,
		0,1083,1078,1,0,0,0,1083,1079,1,0,0,0,1083,1080,1,0,0,0,1083,1081,1,0,
		0,0,1083,1082,1,0,0,0,1084,133,1,0,0,0,1085,1086,5,86,0,0,1086,1087,3,
		490,245,0,1087,135,1,0,0,0,1088,1089,5,166,0,0,1089,1090,7,3,0,0,1090,
		137,1,0,0,0,1091,1092,5,168,0,0,1092,139,1,0,0,0,1093,1094,5,3,0,0,1094,
		1099,3,142,71,0,1095,1096,5,5,0,0,1096,1098,3,142,71,0,1097,1095,1,0,0,
		0,1098,1101,1,0,0,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,1100,1102,1,0,
		0,0,1101,1099,1,0,0,0,1102,1103,5,6,0,0,1103,141,1,0,0,0,1104,1105,3,138,
		69,0,1105,1111,5,4,0,0,1106,1112,3,406,203,0,1107,1112,3,108,54,0,1108,
		1112,3,118,59,0,1109,1112,3,140,70,0,1110,1112,3,158,79,0,1111,1106,1,
		0,0,0,1111,1107,1,0,0,0,1111,1108,1,0,0,0,1111,1109,1,0,0,0,1111,1110,
		1,0,0,0,1112,143,1,0,0,0,1113,1114,3,196,98,0,1114,1115,5,2,0,0,1115,1118,
		3,196,98,0,1116,1117,5,4,0,0,1117,1119,3,460,230,0,1118,1116,1,0,0,0,1118,
		1119,1,0,0,0,1119,145,1,0,0,0,1120,1121,3,152,76,0,1121,1122,5,2,0,0,1122,
		1123,3,148,74,0,1123,147,1,0,0,0,1124,1127,3,150,75,0,1125,1126,5,4,0,
		0,1126,1128,3,158,79,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,149,1,
		0,0,0,1129,1131,5,87,0,0,1130,1129,1,0,0,0,1131,1132,1,0,0,0,1132,1130,
		1,0,0,0,1132,1133,1,0,0,0,1133,1134,1,0,0,0,1134,1135,3,116,58,0,1135,
		151,1,0,0,0,1136,1137,5,168,0,0,1137,153,1,0,0,0,1138,1139,3,62,31,0,1139,
		1140,5,166,0,0,1140,1142,1,0,0,0,1141,1138,1,0,0,0,1142,1145,1,0,0,0,1143,
		1141,1,0,0,0,1143,1144,1,0,0,0,1144,1146,1,0,0,0,1145,1143,1,0,0,0,1146,
		1147,3,152,76,0,1147,155,1,0,0,0,1148,1149,5,168,0,0,1149,157,1,0,0,0,
		1150,1153,3,160,80,0,1151,1153,5,89,0,0,1152,1150,1,0,0,0,1152,1151,1,
		0,0,0,1153,159,1,0,0,0,1154,1155,5,88,0,0,1155,1159,5,3,0,0,1156,1160,
		3,222,111,0,1157,1160,3,266,133,0,1158,1160,3,342,171,0,1159,1156,1,0,
		0,0,1159,1157,1,0,0,0,1159,1158,1,0,0,0,1160,1161,1,0,0,0,1161,1162,5,
		6,0,0,1162,161,1,0,0,0,1163,1164,3,156,78,0,1164,1168,5,4,0,0,1165,1169,
		3,156,78,0,1166,1169,3,164,82,0,1167,1169,3,158,79,0,1168,1165,1,0,0,0,
		1168,1166,1,0,0,0,1168,1167,1,0,0,0,1169,163,1,0,0,0,1170,1172,3,156,78,
		0,1171,1173,5,12,0,0,1172,1171,1,0,0,0,1173,1174,1,0,0,0,1174,1172,1,0,
		0,0,1174,1175,1,0,0,0,1175,165,1,0,0,0,1176,1177,5,168,0,0,1177,167,1,
		0,0,0,1178,1179,3,62,31,0,1179,1180,5,166,0,0,1180,1182,1,0,0,0,1181,1178,
		1,0,0,0,1182,1185,1,0,0,0,1183,1181,1,0,0,0,1183,1184,1,0,0,0,1184,1186,
		1,0,0,0,1185,1183,1,0,0,0,1186,1187,3,166,83,0,1187,169,1,0,0,0,1188,1190,
		5,104,0,0,1189,1191,7,4,0,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,1192,
		1,0,0,0,1192,1196,3,264,132,0,1193,1195,3,64,32,0,1194,1193,1,0,0,0,1195,
		1198,1,0,0,0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,1204,1,0,0,0,1198,
		1196,1,0,0,0,1199,1202,5,107,0,0,1200,1203,3,168,84,0,1201,1203,3,338,
		169,0,1202,1200,1,0,0,0,1202,1201,1,0,0,0,1203,1205,1,0,0,0,1204,1199,
		1,0,0,0,1204,1205,1,0,0,0,1205,1208,1,0,0,0,1206,1207,5,108,0,0,1207,1209,
		3,352,176,0,1208,1206,1,0,0,0,1208,1209,1,0,0,0,1209,1216,1,0,0,0,1210,
		1215,3,172,86,0,1211,1215,3,330,165,0,1212,1215,3,290,145,0,1213,1215,
		3,182,91,0,1214,1210,1,0,0,0,1214,1211,1,0,0,0,1214,1212,1,0,0,0,1214,
		1213,1,0,0,0,1215,1218,1,0,0,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,
		1222,1,0,0,0,1218,1216,1,0,0,0,1219,1221,3,188,94,0,1220,1219,1,0,0,0,
		1221,1224,1,0,0,0,1222,1220,1,0,0,0,1222,1223,1,0,0,0,1223,1225,1,0,0,
		0,1224,1222,1,0,0,0,1225,1226,3,186,93,0,1226,1227,5,109,0,0,1227,171,
		1,0,0,0,1228,1232,3,174,87,0,1229,1232,3,178,89,0,1230,1232,3,272,136,
		0,1231,1228,1,0,0,0,1231,1229,1,0,0,0,1231,1230,1,0,0,0,1232,173,1,0,0,
		0,1233,1235,5,91,0,0,1234,1236,7,1,0,0,1235,1234,1,0,0,0,1235,1236,1,0,
		0,0,1236,1242,1,0,0,0,1237,1238,3,176,88,0,1238,1239,5,1,0,0,1239,1241,
		1,0,0,0,1240,1237,1,0,0,0,1241,1244,1,0,0,0,1242,1240,1,0,0,0,1242,1243,
		1,0,0,0,1243,1245,1,0,0,0,1244,1242,1,0,0,0,1245,1246,5,96,0,0,1246,175,
		1,0,0,0,1247,1250,3,242,121,0,1248,1250,3,256,128,0,1249,1247,1,0,0,0,
		1249,1248,1,0,0,0,1250,177,1,0,0,0,1251,1253,5,92,0,0,1252,1254,7,1,0,
		0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,1260,1,0,0,0,1255,1256,3,180,
		90,0,1256,1257,5,1,0,0,1257,1259,1,0,0,0,1258,1255,1,0,0,0,1259,1262,1,
		0,0,0,1260,1258,1,0,0,0,1260,1261,1,0,0,0,1261,1263,1,0,0,0,1262,1260,
		1,0,0,0,1263,1264,5,96,0,0,1264,179,1,0,0,0,1265,1268,3,242,121,0,1266,
		1268,3,256,128,0,1267,1265,1,0,0,0,1267,1266,1,0,0,0,1268,181,1,0,0,0,
		1269,1273,3,284,142,0,1270,1273,3,184,92,0,1271,1273,3,316,158,0,1272,
		1269,1,0,0,0,1272,1270,1,0,0,0,1272,1271,1,0,0,0,1273,183,1,0,0,0,1274,
		1275,5,97,0,0,1275,1277,5,95,0,0,1276,1278,3,360,180,0,1277,1276,1,0,0,
		0,1277,1278,1,0,0,0,1278,1284,1,0,0,0,1279,1280,3,242,121,0,1280,1281,
		5,1,0,0,1281,1283,1,0,0,0,1282,1279,1,0,0,0,1283,1286,1,0,0,0,1284,1282,
		1,0,0,0,1284,1285,1,0,0,0,1285,1287,1,0,0,0,1286,1284,1,0,0,0,1287,1288,
		5,96,0,0,1288,185,1,0,0,0,1289,1290,3,366,183,0,1290,187,1,0,0,0,1291,
		1292,5,110,0,0,1292,1294,3,360,180,0,1293,1295,7,4,0,0,1294,1293,1,0,0,
		0,1294,1295,1,0,0,0,1295,1297,1,0,0,0,1296,1298,5,111,0,0,1297,1296,1,
		0,0,0,1297,1298,1,0,0,0,1298,1299,1,0,0,0,1299,1302,3,190,95,0,1300,1301,
		5,2,0,0,1301,1303,3,116,58,0,1302,1300,1,0,0,0,1302,1303,1,0,0,0,1303,
		1309,1,0,0,0,1304,1308,3,328,164,0,1305,1308,3,330,165,0,1306,1308,3,290,
		145,0,1307,1304,1,0,0,0,1307,1305,1,0,0,0,1307,1306,1,0,0,0,1308,1311,
		1,0,0,0,1309,1307,1,0,0,0,1309,1310,1,0,0,0,1310,1312,1,0,0,0,1311,1309,
		1,0,0,0,1312,1313,3,332,166,0,1313,1314,5,112,0,0,1314,189,1,0,0,0,1315,
		1316,5,168,0,0,1316,191,1,0,0,0,1317,1323,3,198,99,0,1318,1323,3,212,106,
		0,1319,1323,3,216,108,0,1320,1323,3,194,97,0,1321,1323,3,154,77,0,1322,
		1317,1,0,0,0,1322,1318,1,0,0,0,1322,1319,1,0,0,0,1322,1320,1,0,0,0,1322,
		1321,1,0,0,0,1323,193,1,0,0,0,1324,1325,3,62,31,0,1325,1326,5,166,0,0,
		1326,1328,1,0,0,0,1327,1324,1,0,0,0,1328,1331,1,0,0,0,1329,1327,1,0,0,
		0,1329,1330,1,0,0,0,1330,1332,1,0,0,0,1331,1329,1,0,0,0,1332,1333,3,196,
		98,0,1333,195,1,0,0,0,1334,1338,7,5,0,0,1335,1336,5,10,0,0,1336,1337,5,
		45,0,0,1337,1339,5,11,0,0,1338,1335,1,0,0,0,1338,1339,1,0,0,0,1339,1343,
		1,0,0,0,1340,1343,5,69,0,0,1341,1343,5,70,0,0,1342,1334,1,0,0,0,1342,1340,
		1,0,0,0,1342,1341,1,0,0,0,1343,197,1,0,0,0,1344,1348,3,200,100,0,1345,
		1348,3,204,102,0,1346,1348,3,208,104,0,1347,1344,1,0,0,0,1347,1345,1,0,
		0,0,1347,1346,1,0,0,0,1348,199,1,0,0,0,1349,1350,3,62,31,0,1350,1351,5,
		166,0,0,1351,1353,1,0,0,0,1352,1349,1,0,0,0,1353,1356,1,0,0,0,1354,1352,
		1,0,0,0,1354,1355,1,0,0,0,1355,1357,1,0,0,0,1356,1354,1,0,0,0,1357,1358,
		3,202,101,0,1358,201,1,0,0,0,1359,1360,5,168,0,0,1360,203,1,0,0,0,1361,
		1362,3,62,31,0,1362,1363,5,166,0,0,1363,1365,1,0,0,0,1364,1361,1,0,0,0,
		1365,1368,1,0,0,0,1366,1364,1,0,0,0,1366,1367,1,0,0,0,1367,1369,1,0,0,
		0,1368,1366,1,0,0,0,1369,1370,3,206,103,0,1370,205,1,0,0,0,1371,1372,5,
		168,0,0,1372,207,1,0,0,0,1373,1374,3,62,31,0,1374,1375,5,166,0,0,1375,
		1377,1,0,0,0,1376,1373,1,0,0,0,1377,1380,1,0,0,0,1378,1376,1,0,0,0,1378,
		1379,1,0,0,0,1379,1381,1,0,0,0,1380,1378,1,0,0,0,1381,1382,3,210,105,0,
		1382,209,1,0,0,0,1383,1384,5,168,0,0,1384,211,1,0,0,0,1385,1386,3,62,31,
		0,1386,1387,5,166,0,0,1387,1389,1,0,0,0,1388,1385,1,0,0,0,1389,1392,1,
		0,0,0,1390,1388,1,0,0,0,1390,1391,1,0,0,0,1391,1393,1,0,0,0,1392,1390,
		1,0,0,0,1393,1394,3,214,107,0,1394,213,1,0,0,0,1395,1396,5,168,0,0,1396,
		215,1,0,0,0,1397,1398,3,62,31,0,1398,1399,5,166,0,0,1399,1401,1,0,0,0,
		1400,1397,1,0,0,0,1401,1404,1,0,0,0,1402,1400,1,0,0,0,1402,1403,1,0,0,
		0,1403,1405,1,0,0,0,1404,1402,1,0,0,0,1405,1406,3,218,109,0,1406,217,1,
		0,0,0,1407,1408,5,168,0,0,1408,219,1,0,0,0,1409,1412,3,490,245,0,1410,
		1412,3,222,111,0,1411,1409,1,0,0,0,1411,1410,1,0,0,0,1412,221,1,0,0,0,
		1413,1414,5,90,0,0,1414,1423,5,166,0,0,1415,1416,3,62,31,0,1416,1417,5,
		166,0,0,1417,1419,1,0,0,0,1418,1415,1,0,0,0,1419,1420,1,0,0,0,1420,1418,
		1,0,0,0,1420,1421,1,0,0,0,1421,1423,1,0,0,0,1422,1413,1,0,0,0,1422,1418,
		1,0,0,0,1422,1423,1,0,0,0,1423,1426,1,0,0,0,1424,1427,3,224,112,0,1425,
		1427,3,228,114,0,1426,1424,1,0,0,0,1426,1425,1,0,0,0,1427,223,1,0,0,0,
		1428,1431,3,226,113,0,1429,1431,3,164,82,0,1430,1428,1,0,0,0,1430,1429,
		1,0,0,0,1431,225,1,0,0,0,1432,1433,5,168,0,0,1433,227,1,0,0,0,1434,1437,
		3,224,112,0,1435,1438,3,230,115,0,1436,1438,3,234,117,0,1437,1435,1,0,
		0,0,1437,1436,1,0,0,0,1438,1439,1,0,0,0,1439,1437,1,0,0,0,1439,1440,1,
		0,0,0,1440,229,1,0,0,0,1441,1442,5,10,0,0,1442,1447,3,232,116,0,1443,1444,
		5,5,0,0,1444,1446,3,232,116,0,1445,1443,1,0,0,0,1446,1449,1,0,0,0,1447,
		1445,1,0,0,0,1447,1448,1,0,0,0,1448,1450,1,0,0,0,1449,1447,1,0,0,0,1450,
		1451,5,11,0,0,1451,231,1,0,0,0,1452,1453,3,404,202,0,1453,233,1,0,0,0,
		1454,1455,5,166,0,0,1455,1456,3,236,118,0,1456,235,1,0,0,0,1457,1458,3,
		224,112,0,1458,237,1,0,0,0,1459,1461,5,91,0,0,1460,1462,7,1,0,0,1461,1460,
		1,0,0,0,1461,1462,1,0,0,0,1462,1468,1,0,0,0,1463,1464,3,240,120,0,1464,
		1465,5,1,0,0,1465,1467,1,0,0,0,1466,1463,1,0,0,0,1467,1470,1,0,0,0,1468,
		1466,1,0,0,0,1468,1469,1,0,0,0,1469,1471,1,0,0,0,1470,1468,1,0,0,0,1471,
		1472,5,96,0,0,1472,239,1,0,0,0,1473,1477,3,242,121,0,1474,1477,1,0,0,0,
		1475,1477,3,256,128,0,1476,1473,1,0,0,0,1476,1474,1,0,0,0,1476,1475,1,
		0,0,0,1477,241,1,0,0,0,1478,1479,3,248,124,0,1479,1483,5,2,0,0,1480,1484,
		3,84,42,0,1481,1484,3,306,153,0,1482,1484,3,148,74,0,1483,1480,1,0,0,0,
		1483,1481,1,0,0,0,1483,1482,1,0,0,0,1484,1490,1,0,0,0,1485,1490,3,252,
		126,0,1486,1490,3,258,129,0,1487,1490,3,262,131,0,1488,1490,3,348,174,
		0,1489,1478,1,0,0,0,1489,1485,1,0,0,0,1489,1486,1,0,0,0,1489,1487,1,0,
		0,0,1489,1488,1,0,0,0,1490,243,1,0,0,0,1491,1492,3,248,124,0,1492,1493,
		5,2,0,0,1493,1494,3,150,75,0,1494,245,1,0,0,0,1495,1496,3,248,124,0,1496,
		1497,5,2,0,0,1497,1498,3,356,178,0,1498,247,1,0,0,0,1499,1504,3,250,125,
		0,1500,1501,5,5,0,0,1501,1503,3,250,125,0,1502,1500,1,0,0,0,1503,1506,
		1,0,0,0,1504,1502,1,0,0,0,1504,1505,1,0,0,0,1505,249,1,0,0,0,1506,1504,
		1,0,0,0,1507,1508,5,168,0,0,1508,251,1,0,0,0,1509,1510,3,248,124,0,1510,
		1511,5,2,0,0,1511,1512,3,112,56,0,1512,253,1,0,0,0,1513,1514,5,81,0,0,
		1514,1515,5,10,0,0,1515,1520,5,13,0,0,1516,1517,5,5,0,0,1517,1519,5,13,
		0,0,1518,1516,1,0,0,0,1519,1522,1,0,0,0,1520,1518,1,0,0,0,1520,1521,1,
		0,0,0,1521,1523,1,0,0,0,1522,1520,1,0,0,0,1523,1524,5,11,0,0,1524,1525,
		5,82,0,0,1525,1526,3,116,58,0,1526,255,1,0,0,0,1527,1528,3,248,124,0,1528,
		1529,5,2,0,0,1529,1530,3,254,127,0,1530,257,1,0,0,0,1531,1532,3,248,124,
		0,1532,1533,5,2,0,0,1533,1534,3,128,64,0,1534,259,1,0,0,0,1535,1540,3,
		264,132,0,1536,1537,5,5,0,0,1537,1539,3,264,132,0,1538,1536,1,0,0,0,1539,
		1542,1,0,0,0,1540,1538,1,0,0,0,1540,1541,1,0,0,0,1541,1543,1,0,0,0,1542,
		1540,1,0,0,0,1543,1544,5,2,0,0,1544,1545,3,168,84,0,1545,261,1,0,0,0,1546,
		1549,3,260,130,0,1547,1548,5,4,0,0,1548,1550,3,140,70,0,1549,1547,1,0,
		0,0,1549,1550,1,0,0,0,1550,263,1,0,0,0,1551,1552,5,168,0,0,1552,265,1,
		0,0,0,1553,1554,3,62,31,0,1554,1555,5,166,0,0,1555,1557,1,0,0,0,1556,1553,
		1,0,0,0,1557,1560,1,0,0,0,1558,1556,1,0,0,0,1558,1559,1,0,0,0,1559,1561,
		1,0,0,0,1560,1558,1,0,0,0,1561,1565,3,264,132,0,1562,1564,5,12,0,0,1563,
		1562,1,0,0,0,1564,1567,1,0,0,0,1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,
		267,1,0,0,0,1567,1565,1,0,0,0,1568,1570,5,92,0,0,1569,1571,7,1,0,0,1570,
		1569,1,0,0,0,1570,1571,1,0,0,0,1571,1577,1,0,0,0,1572,1573,3,270,135,0,
		1573,1574,5,1,0,0,1574,1576,1,0,0,0,1575,1572,1,0,0,0,1576,1579,1,0,0,
		0,1577,1575,1,0,0,0,1577,1578,1,0,0,0,1578,1580,1,0,0,0,1579,1577,1,0,
		0,0,1580,1581,5,96,0,0,1581,269,1,0,0,0,1582,1585,3,242,121,0,1583,1585,
		3,256,128,0,1584,1582,1,0,0,0,1584,1583,1,0,0,0,1585,271,1,0,0,0,1586,
		1592,5,93,0,0,1587,1588,3,274,137,0,1588,1589,5,1,0,0,1589,1591,1,0,0,
		0,1590,1587,1,0,0,0,1591,1594,1,0,0,0,1592,1590,1,0,0,0,1592,1593,1,0,
		0,0,1593,1595,1,0,0,0,1594,1592,1,0,0,0,1595,1596,5,96,0,0,1596,273,1,
		0,0,0,1597,1601,3,276,138,0,1598,1601,3,256,128,0,1599,1601,3,260,130,
		0,1600,1597,1,0,0,0,1600,1598,1,0,0,0,1600,1599,1,0,0,0,1601,275,1,0,0,
		0,1602,1603,3,248,124,0,1603,1608,5,2,0,0,1604,1609,3,86,43,0,1605,1609,
		3,306,153,0,1606,1609,3,278,139,0,1607,1609,3,280,140,0,1608,1604,1,0,
		0,0,1608,1605,1,0,0,0,1608,1606,1,0,0,0,1608,1607,1,0,0,0,1609,277,1,0,
		0,0,1610,1611,3,248,124,0,1611,1612,5,2,0,0,1612,1613,3,114,57,0,1613,
		279,1,0,0,0,1614,1615,3,248,124,0,1615,1616,5,2,0,0,1616,1617,3,216,108,
		0,1617,281,1,0,0,0,1618,1620,5,97,0,0,1619,1621,5,98,0,0,1620,1619,1,0,
		0,0,1620,1621,1,0,0,0,1621,1623,1,0,0,0,1622,1624,3,360,180,0,1623,1622,
		1,0,0,0,1623,1624,1,0,0,0,1624,1630,1,0,0,0,1625,1626,3,242,121,0,1626,
		1627,5,1,0,0,1627,1629,1,0,0,0,1628,1625,1,0,0,0,1629,1632,1,0,0,0,1630,
		1628,1,0,0,0,1630,1631,1,0,0,0,1631,1633,1,0,0,0,1632,1630,1,0,0,0,1633,
		1634,5,96,0,0,1634,283,1,0,0,0,1635,1636,5,97,0,0,1636,1638,5,94,0,0,1637,
		1639,3,360,180,0,1638,1637,1,0,0,0,1638,1639,1,0,0,0,1639,1645,1,0,0,0,
		1640,1641,3,242,121,0,1641,1642,5,1,0,0,1642,1644,1,0,0,0,1643,1640,1,
		0,0,0,1644,1647,1,0,0,0,1645,1643,1,0,0,0,1645,1646,1,0,0,0,1646,1648,
		1,0,0,0,1647,1645,1,0,0,0,1648,1649,5,96,0,0,1649,285,1,0,0,0,1650,1652,
		5,97,0,0,1651,1653,7,6,0,0,1652,1651,1,0,0,0,1652,1653,1,0,0,0,1653,1659,
		1,0,0,0,1654,1655,3,288,144,0,1655,1656,5,1,0,0,1656,1658,1,0,0,0,1657,
		1654,1,0,0,0,1658,1661,1,0,0,0,1659,1657,1,0,0,0,1659,1660,1,0,0,0,1660,
		1662,1,0,0,0,1661,1659,1,0,0,0,1662,1663,5,96,0,0,1663,287,1,0,0,0,1664,
		1666,3,250,125,0,1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,0,0,
		1667,1668,3,134,67,0,1668,1669,5,2,0,0,1669,1670,3,304,152,0,1670,289,
		1,0,0,0,1671,1681,5,99,0,0,1672,1676,3,276,138,0,1673,1676,3,244,122,0,
		1674,1676,3,246,123,0,1675,1672,1,0,0,0,1675,1673,1,0,0,0,1675,1674,1,
		0,0,0,1676,1677,1,0,0,0,1677,1678,5,1,0,0,1678,1680,1,0,0,0,1679,1675,
		1,0,0,0,1680,1683,1,0,0,0,1681,1679,1,0,0,0,1681,1682,1,0,0,0,1682,1684,
		1,0,0,0,1683,1681,1,0,0,0,1684,1685,5,96,0,0,1685,291,1,0,0,0,1686,1688,
		5,100,0,0,1687,1689,5,98,0,0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,
		1695,1,0,0,0,1690,1691,3,294,147,0,1691,1692,5,1,0,0,1692,1694,1,0,0,0,
		1693,1690,1,0,0,0,1694,1697,1,0,0,0,1695,1693,1,0,0,0,1695,1696,1,0,0,
		0,1696,1698,1,0,0,0,1697,1695,1,0,0,0,1698,1699,5,96,0,0,1699,293,1,0,
		0,0,1700,1701,3,296,148,0,1701,1707,5,2,0,0,1702,1708,3,86,43,0,1703,1708,
		3,114,57,0,1704,1708,3,216,108,0,1705,1708,3,168,84,0,1706,1708,3,154,
		77,0,1707,1702,1,0,0,0,1707,1703,1,0,0,0,1707,1704,1,0,0,0,1707,1705,1,
		0,0,0,1707,1706,1,0,0,0,1708,295,1,0,0,0,1709,1710,5,168,0,0,1710,297,
		1,0,0,0,1711,1713,5,101,0,0,1712,1714,7,7,0,0,1713,1712,1,0,0,0,1713,1714,
		1,0,0,0,1714,1720,1,0,0,0,1715,1716,3,300,150,0,1716,1717,5,1,0,0,1717,
		1719,1,0,0,0,1718,1715,1,0,0,0,1719,1722,1,0,0,0,1720,1718,1,0,0,0,1720,
		1721,1,0,0,0,1721,1723,1,0,0,0,1722,1720,1,0,0,0,1723,1724,5,96,0,0,1724,
		299,1,0,0,0,1725,1726,3,302,151,0,1726,1729,5,2,0,0,1727,1730,3,304,152,
		0,1728,1730,3,168,84,0,1729,1727,1,0,0,0,1729,1728,1,0,0,0,1730,301,1,
		0,0,0,1731,1736,3,296,148,0,1732,1733,5,5,0,0,1733,1735,3,296,148,0,1734,
		1732,1,0,0,0,1735,1738,1,0,0,0,1736,1734,1,0,0,0,1736,1737,1,0,0,0,1737,
		1743,1,0,0,0,1738,1736,1,0,0,0,1739,1740,3,296,148,0,1740,1741,3,134,67,
		0,1741,1743,1,0,0,0,1742,1731,1,0,0,0,1742,1739,1,0,0,0,1743,303,1,0,0,
		0,1744,1750,3,84,42,0,1745,1750,3,112,56,0,1746,1750,3,128,64,0,1747,1750,
		3,310,155,0,1748,1750,3,314,157,0,1749,1744,1,0,0,0,1749,1745,1,0,0,0,
		1749,1746,1,0,0,0,1749,1747,1,0,0,0,1749,1748,1,0,0,0,1750,305,1,0,0,0,
		1751,1754,3,308,154,0,1752,1754,3,312,156,0,1753,1751,1,0,0,0,1753,1752,
		1,0,0,0,1754,307,1,0,0,0,1755,1756,3,248,124,0,1756,1757,5,2,0,0,1757,
		1758,3,310,155,0,1758,309,1,0,0,0,1759,1762,5,67,0,0,1760,1761,5,10,0,
		0,1761,1763,5,11,0,0,1762,1760,1,0,0,0,1762,1763,1,0,0,0,1763,1766,1,0,
		0,0,1764,1765,5,4,0,0,1765,1767,5,37,0,0,1766,1764,1,0,0,0,1766,1767,1,
		0,0,0,1767,311,1,0,0,0,1768,1769,3,248,124,0,1769,1770,5,2,0,0,1770,1771,
		3,314,157,0,1771,313,1,0,0,0,1772,1776,5,68,0,0,1773,1774,5,10,0,0,1774,
		1775,5,45,0,0,1775,1777,5,11,0,0,1776,1773,1,0,0,0,1776,1777,1,0,0,0,1777,
		1780,1,0,0,0,1778,1779,5,4,0,0,1779,1781,5,38,0,0,1780,1778,1,0,0,0,1780,
		1781,1,0,0,0,1781,315,1,0,0,0,1782,1784,5,97,0,0,1783,1785,7,1,0,0,1784,
		1783,1,0,0,0,1784,1785,1,0,0,0,1785,1789,1,0,0,0,1786,1788,3,318,159,0,
		1787,1786,1,0,0,0,1788,1791,1,0,0,0,1789,1787,1,0,0,0,1789,1790,1,0,0,
		0,1790,1792,1,0,0,0,1791,1789,1,0,0,0,1792,1793,5,96,0,0,1793,317,1,0,
		0,0,1794,1795,3,250,125,0,1795,1796,5,86,0,0,1796,1797,5,34,0,0,1797,1798,
		5,2,0,0,1798,1799,3,320,160,0,1799,1800,5,1,0,0,1800,319,1,0,0,0,1801,
		1811,3,86,43,0,1802,1811,3,114,57,0,1803,1811,3,216,108,0,1804,1808,7,
		5,0,0,1805,1806,5,10,0,0,1806,1807,5,45,0,0,1807,1809,5,11,0,0,1808,1805,
		1,0,0,0,1808,1809,1,0,0,0,1809,1811,1,0,0,0,1810,1801,1,0,0,0,1810,1802,
		1,0,0,0,1810,1803,1,0,0,0,1810,1804,1,0,0,0,1811,321,1,0,0,0,1812,1813,
		5,168,0,0,1813,323,1,0,0,0,1814,1815,3,62,31,0,1815,1816,5,166,0,0,1816,
		1818,1,0,0,0,1817,1814,1,0,0,0,1818,1821,1,0,0,0,1819,1817,1,0,0,0,1819,
		1820,1,0,0,0,1820,1822,1,0,0,0,1821,1819,1,0,0,0,1822,1823,3,322,161,0,
		1823,325,1,0,0,0,1824,1825,5,102,0,0,1825,1828,3,322,161,0,1826,1827,5,
		2,0,0,1827,1829,3,116,58,0,1828,1826,1,0,0,0,1828,1829,1,0,0,0,1829,1833,
		1,0,0,0,1830,1832,3,64,32,0,1831,1830,1,0,0,0,1832,1835,1,0,0,0,1833,1831,
		1,0,0,0,1833,1834,1,0,0,0,1834,1841,1,0,0,0,1835,1833,1,0,0,0,1836,1840,
		3,328,164,0,1837,1840,3,330,165,0,1838,1840,3,290,145,0,1839,1836,1,0,
		0,0,1839,1837,1,0,0,0,1839,1838,1,0,0,0,1840,1843,1,0,0,0,1841,1839,1,
		0,0,0,1841,1842,1,0,0,0,1842,1844,1,0,0,0,1843,1841,1,0,0,0,1844,1845,
		3,332,166,0,1845,1846,5,103,0,0,1846,327,1,0,0,0,1847,1851,3,238,119,0,
		1848,1851,3,268,134,0,1849,1851,3,272,136,0,1850,1847,1,0,0,0,1850,1848,
		1,0,0,0,1850,1849,1,0,0,0,1851,329,1,0,0,0,1852,1855,3,292,146,0,1853,
		1855,3,282,141,0,1854,1852,1,0,0,0,1854,1853,1,0,0,0,1855,331,1,0,0,0,
		1856,1857,3,366,183,0,1857,333,1,0,0,0,1858,1860,5,113,0,0,1859,1861,7,
		4,0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,0,0,1862,1866,
		3,336,168,0,1863,1865,3,64,32,0,1864,1863,1,0,0,0,1865,1868,1,0,0,0,1866,
		1864,1,0,0,0,1866,1867,1,0,0,0,1867,1871,1,0,0,0,1868,1866,1,0,0,0,1869,
		1870,5,107,0,0,1870,1872,3,338,169,0,1871,1869,1,0,0,0,1871,1872,1,0,0,
		0,1872,1875,1,0,0,0,1873,1874,5,108,0,0,1874,1876,3,352,176,0,1875,1873,
		1,0,0,0,1875,1876,1,0,0,0,1876,1881,1,0,0,0,1877,1880,3,330,165,0,1878,
		1880,3,182,91,0,1879,1877,1,0,0,0,1879,1878,1,0,0,0,1880,1883,1,0,0,0,
		1881,1879,1,0,0,0,1881,1882,1,0,0,0,1882,1887,1,0,0,0,1883,1881,1,0,0,
		0,1884,1886,3,188,94,0,1885,1884,1,0,0,0,1886,1889,1,0,0,0,1887,1885,1,
		0,0,0,1887,1888,1,0,0,0,1888,1890,1,0,0,0,1889,1887,1,0,0,0,1890,1891,
		5,114,0,0,1891,335,1,0,0,0,1892,1893,5,168,0,0,1893,337,1,0,0,0,1894,1895,
		3,62,31,0,1895,1896,5,166,0,0,1896,1898,1,0,0,0,1897,1894,1,0,0,0,1898,
		1901,1,0,0,0,1899,1897,1,0,0,0,1899,1900,1,0,0,0,1900,1902,1,0,0,0,1901,
		1899,1,0,0,0,1902,1903,3,336,168,0,1903,339,1,0,0,0,1904,1905,5,168,0,
		0,1905,341,1,0,0,0,1906,1907,3,62,31,0,1907,1908,5,166,0,0,1908,1910,1,
		0,0,0,1909,1906,1,0,0,0,1910,1913,1,0,0,0,1911,1909,1,0,0,0,1911,1912,
		1,0,0,0,1912,1914,1,0,0,0,1913,1911,1,0,0,0,1914,1918,3,340,170,0,1915,
		1917,5,12,0,0,1916,1915,1,0,0,0,1917,1920,1,0,0,0,1918,1916,1,0,0,0,1918,
		1919,1,0,0,0,1919,343,1,0,0,0,1920,1918,1,0,0,0,1921,1922,5,115,0,0,1922,
		1926,3,354,177,0,1923,1925,3,64,32,0,1924,1923,1,0,0,0,1925,1928,1,0,0,
		0,1926,1924,1,0,0,0,1926,1927,1,0,0,0,1927,1931,1,0,0,0,1928,1926,1,0,
		0,0,1929,1930,5,107,0,0,1930,1932,3,352,176,0,1931,1929,1,0,0,0,1931,1932,
		1,0,0,0,1932,1936,1,0,0,0,1933,1935,3,346,173,0,1934,1933,1,0,0,0,1935,
		1938,1,0,0,0,1936,1934,1,0,0,0,1936,1937,1,0,0,0,1937,1939,1,0,0,0,1938,
		1936,1,0,0,0,1939,1940,5,116,0,0,1940,345,1,0,0,0,1941,1942,5,110,0,0,
		1942,1945,3,190,95,0,1943,1944,5,2,0,0,1944,1946,3,116,58,0,1945,1943,
		1,0,0,0,1945,1946,1,0,0,0,1946,1950,1,0,0,0,1947,1949,3,328,164,0,1948,
		1947,1,0,0,0,1949,1952,1,0,0,0,1950,1948,1,0,0,0,1950,1951,1,0,0,0,1951,
		1953,1,0,0,0,1952,1950,1,0,0,0,1953,1954,5,112,0,0,1954,347,1,0,0,0,1955,
		1958,3,248,124,0,1956,1957,5,4,0,0,1957,1959,3,350,175,0,1958,1956,1,0,
		0,0,1958,1959,1,0,0,0,1959,349,1,0,0,0,1960,1965,3,222,111,0,1961,1965,
		3,266,133,0,1962,1965,3,342,171,0,1963,1965,5,89,0,0,1964,1960,1,0,0,0,
		1964,1961,1,0,0,0,1964,1962,1,0,0,0,1964,1963,1,0,0,0,1965,351,1,0,0,0,
		1966,1971,3,356,178,0,1967,1968,5,5,0,0,1968,1970,3,356,178,0,1969,1967,
		1,0,0,0,1970,1973,1,0,0,0,1971,1969,1,0,0,0,1971,1972,1,0,0,0,1972,353,
		1,0,0,0,1973,1971,1,0,0,0,1974,1975,5,168,0,0,1975,355,1,0,0,0,1976,1977,
		3,62,31,0,1977,1978,5,166,0,0,1978,1980,1,0,0,0,1979,1976,1,0,0,0,1980,
		1983,1,0,0,0,1981,1979,1,0,0,0,1981,1982,1,0,0,0,1982,1984,1,0,0,0,1983,
		1981,1,0,0,0,1984,1985,3,354,177,0,1985,357,1,0,0,0,1986,1987,5,168,0,
		0,1987,359,1,0,0,0,1988,1989,7,8,0,0,1989,361,1,0,0,0,1990,1992,3,220,
		110,0,1991,1993,3,136,68,0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,363,
		1,0,0,0,1994,1995,3,324,162,0,1995,2004,5,3,0,0,1996,2001,3,378,189,0,
		1997,1998,5,5,0,0,1998,2000,3,378,189,0,1999,1997,1,0,0,0,2000,2003,1,
		0,0,0,2001,1999,1,0,0,0,2001,2002,1,0,0,0,2002,2005,1,0,0,0,2003,2001,
		1,0,0,0,2004,1996,1,0,0,0,2004,2005,1,0,0,0,2005,2006,1,0,0,0,2006,2007,
		5,6,0,0,2007,365,1,0,0,0,2008,2010,3,368,184,0,2009,2008,1,0,0,0,2009,
		2010,1,0,0,0,2010,2011,1,0,0,0,2011,2013,5,1,0,0,2012,2009,1,0,0,0,2013,
		2016,1,0,0,0,2014,2012,1,0,0,0,2014,2015,1,0,0,0,2015,367,1,0,0,0,2016,
		2014,1,0,0,0,2017,2022,3,370,185,0,2018,2022,3,376,188,0,2019,2022,3,380,
		190,0,2020,2022,3,392,196,0,2021,2017,1,0,0,0,2021,2018,1,0,0,0,2021,2019,
		1,0,0,0,2021,2020,1,0,0,0,2022,369,1,0,0,0,2023,2024,3,220,110,0,2024,
		2025,5,4,0,0,2025,2026,3,404,202,0,2026,2030,1,0,0,0,2027,2030,3,162,81,
		0,2028,2030,3,372,186,0,2029,2023,1,0,0,0,2029,2027,1,0,0,0,2029,2028,
		1,0,0,0,2030,371,1,0,0,0,2031,2034,3,156,78,0,2032,2034,3,164,82,0,2033,
		2031,1,0,0,0,2033,2032,1,0,0,0,2034,2035,1,0,0,0,2035,2039,5,14,0,0,2036,
		2040,3,156,78,0,2037,2040,3,164,82,0,2038,2040,3,158,79,0,2039,2036,1,
		0,0,0,2039,2037,1,0,0,0,2039,2038,1,0,0,0,2040,373,1,0,0,0,2041,2061,3,
		266,133,0,2042,2061,3,190,95,0,2043,2061,5,90,0,0,2044,2045,5,90,0,0,2045,
		2047,5,166,0,0,2046,2044,1,0,0,0,2046,2047,1,0,0,0,2047,2054,1,0,0,0,2048,
		2051,3,266,133,0,2049,2051,3,342,171,0,2050,2048,1,0,0,0,2050,2049,1,0,
		0,0,2051,2052,1,0,0,0,2052,2053,5,166,0,0,2053,2055,1,0,0,0,2054,2050,
		1,0,0,0,2055,2056,1,0,0,0,2056,2054,1,0,0,0,2056,2057,1,0,0,0,2057,2058,
		1,0,0,0,2058,2059,3,190,95,0,2059,2061,1,0,0,0,2060,2041,1,0,0,0,2060,
		2042,1,0,0,0,2060,2043,1,0,0,0,2060,2046,1,0,0,0,2061,2062,1,0,0,0,2062,
		2071,5,3,0,0,2063,2068,3,378,189,0,2064,2065,5,5,0,0,2065,2067,3,378,189,
		0,2066,2064,1,0,0,0,2067,2070,1,0,0,0,2068,2066,1,0,0,0,2068,2069,1,0,
		0,0,2069,2072,1,0,0,0,2070,2068,1,0,0,0,2071,2063,1,0,0,0,2071,2072,1,
		0,0,0,2072,2073,1,0,0,0,2073,2074,5,6,0,0,2074,375,1,0,0,0,2075,2082,3,
		364,182,0,2076,2082,3,374,187,0,2077,2078,5,145,0,0,2078,2079,5,3,0,0,
		2079,2082,5,6,0,0,2080,2082,5,146,0,0,2081,2075,1,0,0,0,2081,2076,1,0,
		0,0,2081,2077,1,0,0,0,2081,2080,1,0,0,0,2082,377,1,0,0,0,2083,2084,3,250,
		125,0,2084,2085,5,4,0,0,2085,2087,1,0,0,0,2086,2083,1,0,0,0,2086,2087,
		1,0,0,0,2087,2088,1,0,0,0,2088,2098,3,404,202,0,2089,2098,3,162,81,0,2090,
		2092,5,143,0,0,2091,2090,1,0,0,0,2091,2092,1,0,0,0,2092,2093,1,0,0,0,2093,
		2094,3,250,125,0,2094,2095,5,7,0,0,2095,2096,3,220,110,0,2096,2098,1,0,
		0,0,2097,2086,1,0,0,0,2097,2089,1,0,0,0,2097,2091,1,0,0,0,2098,379,1,0,
		0,0,2099,2102,3,382,191,0,2100,2102,3,384,192,0,2101,2099,1,0,0,0,2101,
		2100,1,0,0,0,2102,381,1,0,0,0,2103,2104,5,147,0,0,2104,2105,3,404,202,
		0,2105,2106,5,148,0,0,2106,2114,3,366,183,0,2107,2108,5,149,0,0,2108,2109,
		3,404,202,0,2109,2110,5,148,0,0,2110,2111,3,366,183,0,2111,2113,1,0,0,
		0,2112,2107,1,0,0,0,2113,2116,1,0,0,0,2114,2112,1,0,0,0,2114,2115,1,0,
		0,0,2115,2119,1,0,0,0,2116,2114,1,0,0,0,2117,2118,5,150,0,0,2118,2120,
		3,366,183,0,2119,2117,1,0,0,0,2119,2120,1,0,0,0,2120,2121,1,0,0,0,2121,
		2122,5,151,0,0,2122,383,1,0,0,0,2123,2124,5,152,0,0,2124,2125,3,404,202,
		0,2125,2127,5,82,0,0,2126,2128,3,386,193,0,2127,2126,1,0,0,0,2128,2129,
		1,0,0,0,2129,2127,1,0,0,0,2129,2130,1,0,0,0,2130,2133,1,0,0,0,2131,2132,
		5,150,0,0,2132,2134,3,366,183,0,2133,2131,1,0,0,0,2133,2134,1,0,0,0,2134,
		2135,1,0,0,0,2135,2136,5,153,0,0,2136,385,1,0,0,0,2137,2138,3,388,194,
		0,2138,2139,5,2,0,0,2139,2140,3,366,183,0,2140,387,1,0,0,0,2141,2146,3,
		390,195,0,2142,2143,5,5,0,0,2143,2145,3,390,195,0,2144,2142,1,0,0,0,2145,
		2148,1,0,0,0,2146,2144,1,0,0,0,2146,2147,1,0,0,0,2147,389,1,0,0,0,2148,
		2146,1,0,0,0,2149,2152,3,98,49,0,2150,2152,3,406,203,0,2151,2149,1,0,0,
		0,2151,2150,1,0,0,0,2152,391,1,0,0,0,2153,2159,3,394,197,0,2154,2159,3,
		400,200,0,2155,2159,3,402,201,0,2156,2159,5,154,0,0,2157,2159,5,155,0,
		0,2158,2153,1,0,0,0,2158,2154,1,0,0,0,2158,2155,1,0,0,0,2158,2156,1,0,
		0,0,2158,2157,1,0,0,0,2159,393,1,0,0,0,2160,2161,5,156,0,0,2161,2162,3,
		396,198,0,2162,2163,5,4,0,0,2163,2164,3,398,199,0,2164,2165,5,159,0,0,
		2165,2166,3,366,183,0,2166,2167,5,160,0,0,2167,395,1,0,0,0,2168,2169,5,
		168,0,0,2169,397,1,0,0,0,2170,2171,3,404,202,0,2171,2172,5,157,0,0,2172,
		2175,3,404,202,0,2173,2174,5,158,0,0,2174,2176,3,404,202,0,2175,2173,1,
		0,0,0,2175,2176,1,0,0,0,2176,399,1,0,0,0,2177,2178,5,161,0,0,2178,2179,
		3,404,202,0,2179,2180,5,159,0,0,2180,2181,3,366,183,0,2181,2182,5,162,
		0,0,2182,401,1,0,0,0,2183,2184,5,163,0,0,2184,2185,3,366,183,0,2185,2186,
		5,164,0,0,2186,2187,3,404,202,0,2187,2188,5,165,0,0,2188,403,1,0,0,0,2189,
		2194,3,408,204,0,2190,2191,5,141,0,0,2191,2193,3,408,204,0,2192,2190,1,
		0,0,0,2193,2196,1,0,0,0,2194,2192,1,0,0,0,2194,2195,1,0,0,0,2195,405,1,
		0,0,0,2196,2194,1,0,0,0,2197,2198,3,404,202,0,2198,407,1,0,0,0,2199,2204,
		3,410,205,0,2200,2201,5,142,0,0,2201,2203,3,410,205,0,2202,2200,1,0,0,
		0,2203,2206,1,0,0,0,2204,2202,1,0,0,0,2204,2205,1,0,0,0,2205,409,1,0,0,
		0,2206,2204,1,0,0,0,2207,2212,3,412,206,0,2208,2209,7,9,0,0,2209,2211,
		3,412,206,0,2210,2208,1,0,0,0,2211,2214,1,0,0,0,2212,2210,1,0,0,0,2212,
		2213,1,0,0,0,2213,411,1,0,0,0,2214,2212,1,0,0,0,2215,2220,3,414,207,0,
		2216,2217,7,10,0,0,2217,2219,3,414,207,0,2218,2216,1,0,0,0,2219,2222,1,
		0,0,0,2220,2218,1,0,0,0,2220,2221,1,0,0,0,2221,413,1,0,0,0,2222,2220,1,
		0,0,0,2223,2228,3,416,208,0,2224,2225,7,11,0,0,2225,2227,3,416,208,0,2226,
		2224,1,0,0,0,2227,2230,1,0,0,0,2228,2226,1,0,0,0,2228,2229,1,0,0,0,2229,
		415,1,0,0,0,2230,2228,1,0,0,0,2231,2236,3,418,209,0,2232,2233,7,12,0,0,
		2233,2235,3,418,209,0,2234,2232,1,0,0,0,2235,2238,1,0,0,0,2236,2234,1,
		0,0,0,2236,2237,1,0,0,0,2237,417,1,0,0,0,2238,2236,1,0,0,0,2239,2246,3,
		420,210,0,2240,2245,5,13,0,0,2241,2245,5,24,0,0,2242,2243,5,144,0,0,2243,
		2245,3,420,210,0,2244,2240,1,0,0,0,2244,2241,1,0,0,0,2244,2242,1,0,0,0,
		2245,2248,1,0,0,0,2246,2244,1,0,0,0,2246,2247,1,0,0,0,2247,419,1,0,0,0,
		2248,2246,1,0,0,0,2249,2254,3,422,211,0,2250,2251,5,25,0,0,2251,2253,3,
		422,211,0,2252,2250,1,0,0,0,2253,2256,1,0,0,0,2254,2252,1,0,0,0,2254,2255,
		1,0,0,0,2255,421,1,0,0,0,2256,2254,1,0,0,0,2257,2264,5,23,0,0,2258,2264,
		5,22,0,0,2259,2261,5,143,0,0,2260,2259,1,0,0,0,2260,2261,1,0,0,0,2261,
		2262,1,0,0,0,2262,2264,3,424,212,0,2263,2257,1,0,0,0,2263,2258,1,0,0,0,
		2263,2260,1,0,0,0,2264,423,1,0,0,0,2265,2275,3,426,213,0,2266,2275,3,108,
		54,0,2267,2275,3,362,181,0,2268,2275,3,364,182,0,2269,2275,3,158,79,0,
		2270,2271,5,3,0,0,2271,2272,3,404,202,0,2272,2273,5,6,0,0,2273,2275,1,
		0,0,0,2274,2265,1,0,0,0,2274,2266,1,0,0,0,2274,2267,1,0,0,0,2274,2268,
		1,0,0,0,2274,2269,1,0,0,0,2274,2270,1,0,0,0,2275,425,1,0,0,0,2276,2282,
		3,428,214,0,2277,2282,3,458,229,0,2278,2282,3,464,232,0,2279,2282,3,440,
		220,0,2280,2282,3,452,226,0,2281,2276,1,0,0,0,2281,2277,1,0,0,0,2281,2278,
		1,0,0,0,2281,2279,1,0,0,0,2281,2280,1,0,0,0,2282,427,1,0,0,0,2283,2286,
		3,430,215,0,2284,2286,3,446,223,0,2285,2283,1,0,0,0,2285,2284,1,0,0,0,
		2286,429,1,0,0,0,2287,2288,3,434,217,0,2288,2289,5,9,0,0,2289,2291,1,0,
		0,0,2290,2287,1,0,0,0,2290,2291,1,0,0,0,2291,2292,1,0,0,0,2292,2293,3,
		432,216,0,2293,431,1,0,0,0,2294,2295,7,13,0,0,2295,433,1,0,0,0,2296,2299,
		3,436,218,0,2297,2299,3,438,219,0,2298,2296,1,0,0,0,2298,2297,1,0,0,0,
		2299,435,1,0,0,0,2300,2301,7,14,0,0,2301,437,1,0,0,0,2302,2303,7,15,0,
		0,2303,439,1,0,0,0,2304,2305,3,444,222,0,2305,2306,5,9,0,0,2306,2308,1,
		0,0,0,2307,2304,1,0,0,0,2307,2308,1,0,0,0,2308,2309,1,0,0,0,2309,2310,
		3,442,221,0,2310,441,1,0,0,0,2311,2312,7,16,0,0,2312,443,1,0,0,0,2313,
		2314,7,17,0,0,2314,445,1,0,0,0,2315,2316,3,450,225,0,2316,2317,5,9,0,0,
		2317,2319,1,0,0,0,2318,2315,1,0,0,0,2318,2319,1,0,0,0,2319,2320,1,0,0,
		0,2320,2321,3,448,224,0,2321,447,1,0,0,0,2322,2323,5,43,0,0,2323,449,1,
		0,0,0,2324,2325,7,18,0,0,2325,451,1,0,0,0,2326,2327,3,456,228,0,2327,2328,
		5,9,0,0,2328,2330,1,0,0,0,2329,2326,1,0,0,0,2329,2330,1,0,0,0,2330,2331,
		1,0,0,0,2331,2332,3,454,227,0,2332,453,1,0,0,0,2333,2334,7,19,0,0,2334,
		455,1,0,0,0,2335,2336,5,64,0,0,2336,457,1,0,0,0,2337,2338,3,462,231,0,
		2338,2339,5,9,0,0,2339,2341,1,0,0,0,2340,2337,1,0,0,0,2340,2341,1,0,0,
		0,2341,2342,1,0,0,0,2342,2343,3,460,230,0,2343,459,1,0,0,0,2344,2345,7,
		20,0,0,2345,461,1,0,0,0,2346,2347,7,21,0,0,2347,463,1,0,0,0,2348,2353,
		3,466,233,0,2349,2353,3,472,236,0,2350,2353,3,478,239,0,2351,2353,3,484,
		242,0,2352,2348,1,0,0,0,2352,2349,1,0,0,0,2352,2350,1,0,0,0,2352,2351,
		1,0,0,0,2353,465,1,0,0,0,2354,2355,3,470,235,0,2355,2356,5,9,0,0,2356,
		2357,3,468,234,0,2357,467,1,0,0,0,2358,2359,5,39,0,0,2359,469,1,0,0,0,
		2360,2361,7,22,0,0,2361,471,1,0,0,0,2362,2363,3,476,238,0,2363,2364,5,
		9,0,0,2364,2365,3,474,237,0,2365,473,1,0,0,0,2366,2367,5,42,0,0,2367,475,
		1,0,0,0,2368,2369,7,23,0,0,2369,477,1,0,0,0,2370,2371,3,482,241,0,2371,
		2372,5,9,0,0,2372,2373,3,480,240,0,2373,479,1,0,0,0,2374,2375,5,41,0,0,
		2375,481,1,0,0,0,2376,2377,7,24,0,0,2377,483,1,0,0,0,2378,2379,3,488,244,
		0,2379,2380,5,9,0,0,2380,2381,3,486,243,0,2381,485,1,0,0,0,2382,2383,5,
		40,0,0,2383,487,1,0,0,0,2384,2385,7,25,0,0,2385,489,1,0,0,0,2386,2387,
		5,36,0,0,2387,491,1,0,0,0,257,495,497,507,513,515,518,521,530,540,548,
		558,569,574,580,585,589,595,599,604,609,633,640,651,655,660,668,675,680,
		694,700,704,712,723,729,734,747,752,756,762,774,776,783,794,802,813,815,
		825,827,840,851,860,865,873,884,893,897,906,910,919,927,936,940,948,954,
		962,967,971,977,979,984,995,1005,1012,1016,1024,1033,1036,1042,1050,1055,
		1059,1066,1073,1075,1083,1099,1111,1118,1127,1132,1143,1152,1159,1168,
		1174,1183,1190,1196,1202,1204,1208,1214,1216,1222,1231,1235,1242,1249,
		1253,1260,1267,1272,1277,1284,1294,1297,1302,1307,1309,1322,1329,1338,
		1342,1347,1354,1366,1378,1390,1402,1411,1420,1422,1426,1430,1437,1439,
		1447,1461,1468,1476,1483,1489,1504,1520,1540,1549,1558,1565,1570,1577,
		1584,1592,1600,1608,1620,1623,1630,1638,1645,1652,1659,1665,1675,1681,
		1688,1695,1707,1713,1720,1729,1736,1742,1749,1753,1762,1766,1776,1780,
		1784,1789,1808,1810,1819,1828,1833,1839,1841,1850,1854,1860,1866,1871,
		1875,1879,1881,1887,1899,1911,1918,1926,1931,1936,1945,1950,1958,1964,
		1971,1981,1992,2001,2004,2009,2014,2021,2029,2033,2039,2046,2050,2056,
		2060,2068,2071,2081,2086,2091,2097,2101,2114,2119,2129,2133,2146,2151,
		2158,2175,2194,2204,2212,2220,2228,2236,2244,2246,2254,2260,2263,2274,
		2281,2285,2290,2298,2307,2318,2329,2340,2352
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
