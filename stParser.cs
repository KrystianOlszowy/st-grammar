//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/kryst/Desktop/Praca magisterska/st-grammar/st.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class stParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RELATIVE_ADDRESS=1, DIRECT_VARIABLE=2, SINGLE_BYTE_STRING=3, DOUBLE_BYTE_STRING=4, 
		DURATION=5, DATE_TIME_VALUE=6, DATE_VALUE=7, CLOCK_TIME=8, REAL_VALUE=9, 
		SIGNED_INT=10, UNSIGNED_INT=11, BINARY_INT=12, OCTAL_INT=13, HEX_INT=14, 
		BOOLEAN=15, USINT=16, UINT=17, UDINT=18, ULINT=19, SINT=20, INT=21, DINT=22, 
		LINT=23, REAL=24, LREAL=25, BYTE=26, WORD=27, DWORD=28, LWORD=29, BOOL=30, 
		FALSE=31, TRUE=32, STRING=33, WSTRING=34, CHAR=35, WCHAR=36, TIME=37, 
		LTIME=38, TIME_OF_DAY=39, LTIME_OF_DAY=40, DATE=41, LDATE=42, DATE_AND_TIME=43, 
		LDATE_AND_TIME=44, TYPE=45, END_TYPE=46, ARRAY=47, OF=48, STRUCT=49, OVERLAP=50, 
		END_STRUCT=51, AT=52, REF_TO=53, REF=54, NULL=55, THIS=56, VAR_INPUT=57, 
		VAR_OUTPUT=58, VAR_IN_OUT=59, RETAIN=60, NON_RETAIN=61, END_VAR=62, VAR=63, 
		CONSTANT=64, VAR_TEMP=65, VAR_EXTERNAL=66, VAR_GLOBAL=67, FUNCTION=68, 
		END_FUNCTION=69, FUNCTION_BLOCK=70, FINAL=71, ABSTRACT=72, EXTENDS=73, 
		IMPLEMENTS=74, END_FUNCTION_BLOCK=75, METHOD=76, OVERRIDE=77, END_METHOD=78, 
		CLASS=79, END_CLASS=80, INTERFACE=81, END_INTERFACE=82, PUBLIC=83, PROTECTED=84, 
		PRIVATE=85, INTERNAL=86, SUPER=87, RETURN=88, PROGRAM=89, END_PROGRAM=90, 
		VAR_ACCESS=91, CONFIGURATION=92, END_CONFIGURATION=93, RESOURCE=94, ON=95, 
		END_RESOURCE=96, READ_WRITE=97, READ_ONLY=98, TASK=99, SINGLE=100, INTERVAL=101, 
		PRIORITY=102, WITH=103, VAR_CONFIG=104, NAMESPACE=105, END_NAMESPACE=106, 
		USING=107, IF=108, THEN=109, ELSIF=110, ELSE=111, END_IF=112, CASE=113, 
		END_CASE=114, EXIT=115, CONTINUE=116, FOR=117, TO=118, BY=119, DO=120, 
		END_FOR=121, WHILE=122, END_WHILE=123, REPEAT=124, UNTIL=125, END_REPEAT=126, 
		PLUS=127, MINUS=128, ASTERISK=129, POWER=130, SLASH=131, MOD=132, EQUAL=133, 
		NOT_EQUAL=134, LESS=135, LESS_EQUAL=136, GREATER=137, GREATER_EQUAL=138, 
		AND=139, OR=140, NOT=141, XOR=142, AMPERSAND=143, ASSIGN=144, ASSIGN_OUT=145, 
		ATTEMPT_ASSIGN=146, LEFT_PAREN=147, RIGHT_PAREN=148, LEFT_BRACKET=149, 
		RIGHT_BRACKET=150, COMMA=151, COLON=152, SEMICOLON=153, DOT=154, RANGE=155, 
		HASH=156, CARET=157, PERCENT=158, UNDERSCORE=159, IDENTIFIER=160, PRAGMA=161, 
		LINE_COMMENT=162, SLASH_COMMENT=163, BRACE_COMMENT=164, WHITESPACE=165;
	public const int
		RULE_file = 0, RULE_pouDeclaration = 1, RULE_namespaceDeclaration = 2, 
		RULE_namespaceElements = 3, RULE_namespaceAccess = 4, RULE_namespaceName = 5, 
		RULE_usingDirective = 6, RULE_programDeclaration = 7, RULE_programName = 8, 
		RULE_programNameAccess = 9, RULE_dataTypeDeclaration = 10, RULE_typeDeclaration = 11, 
		RULE_simpleTypeDeclaration = 12, RULE_simpleTypeName = 13, RULE_simpleSpecificationInit = 14, 
		RULE_simpleInit = 15, RULE_simpleSpecification = 16, RULE_elementaryTypeName = 17, 
		RULE_simpleTypeAccess = 18, RULE_stringTypeName = 19, RULE_stringSize = 20, 
		RULE_subrangeTypeDeclaration = 21, RULE_subrangeTypeName = 22, RULE_subrangeSpecificationInit = 23, 
		RULE_subrangeSpecification = 24, RULE_subrangeInit = 25, RULE_subrangeTypeAccess = 26, 
		RULE_subrange = 27, RULE_subrangeBegin = 28, RULE_subrangeEnd = 29, RULE_enumTypeDeclaration = 30, 
		RULE_enumTypeName = 31, RULE_enumNamedSpecificationInit = 32, RULE_enumElementSpecificationInit = 33, 
		RULE_enumElementName = 34, RULE_enumElementValue = 35, RULE_enumValue = 36, 
		RULE_enumSpecificationInit = 37, RULE_enumTypeAccess = 38, RULE_arrayTypeDeclaration = 39, 
		RULE_arrayTypeName = 40, RULE_arraySpecificationInit = 41, RULE_arraySpecification = 42, 
		RULE_arrayTypeAccess = 43, RULE_arrayInit = 44, RULE_arrayElementInit = 45, 
		RULE_arrayElementMultiplier = 46, RULE_arrayElementInitValue = 47, RULE_arrayConformDeclaration = 48, 
		RULE_arrayConformand = 49, RULE_arrayVarDeclarationInit = 50, RULE_structTypeDeclaration = 51, 
		RULE_structTypeName = 52, RULE_structTypeSpecification = 53, RULE_structDeclaration = 54, 
		RULE_structElementDeclaration = 55, RULE_structElementName = 56, RULE_locatedAt = 57, 
		RULE_relativeAddress = 58, RULE_partlySpecifiedAddress = 59, RULE_multibitPartAccess = 60, 
		RULE_structSpecificationInit = 61, RULE_structSpecification = 62, RULE_structTypeAccess = 63, 
		RULE_structInit = 64, RULE_structElementInit = 65, RULE_structVarDeclarationInit = 66, 
		RULE_stringTypeDeclaration = 67, RULE_stringDerivedTypeName = 68, RULE_stringTypeAccess = 69, 
		RULE_referenceTypeDeclaration = 70, RULE_referenceTypeName = 71, RULE_referenceSpecificationInit = 72, 
		RULE_referenceSpecification = 73, RULE_referenceValue = 74, RULE_referenceAddress = 75, 
		RULE_referenceTypeAccess = 76, RULE_referenceAssign = 77, RULE_referenceName = 78, 
		RULE_dereference = 79, RULE_functionBlockDeclaration = 80, RULE_functionBlockName = 81, 
		RULE_functionBlockInstanceName = 82, RULE_functionBlockTypeAccess = 83, 
		RULE_functionBlockTypeName = 84, RULE_functionBlockBody = 85, RULE_functionBlockVarDeclarationInit = 86, 
		RULE_functionBlockVarSpecificationInit = 87, RULE_methodDeclaration = 88, 
		RULE_methodName = 89, RULE_dataTypeAccess = 90, RULE_derivedTypeAccess = 91, 
		RULE_variable = 92, RULE_symbolicVariable = 93, RULE_variableAccess = 94, 
		RULE_variableName = 95, RULE_multiElementVariable = 96, RULE_subscriptList = 97, 
		RULE_subscript = 98, RULE_structElementSelect = 99, RULE_structElementVariable = 100, 
		RULE_ioVarDeclarations = 101, RULE_inputVarDeclarations = 102, RULE_inputVarDeclaration = 103, 
		RULE_varDeclarationInit = 104, RULE_variableList = 105, RULE_outputVarDeclarations = 106, 
		RULE_outputVarDeclaration = 107, RULE_inOutVarDeclarations = 108, RULE_inOutVarDeclaration = 109, 
		RULE_normalVarDeclarations = 110, RULE_otherVarDeclarations = 111, RULE_nonRetainVarDeclarations = 112, 
		RULE_retainVarDeclarations = 113, RULE_locVarDeclarations = 114, RULE_locVarDeclaration = 115, 
		RULE_tempVarDeclarations = 116, RULE_externalVarDeclarations = 117, RULE_externalDeclaration = 118, 
		RULE_globalVarName = 119, RULE_globalVarDeclarations = 120, RULE_globalVarDeclaration = 121, 
		RULE_globalVarSpecification = 122, RULE_locVarSpecificationInit = 123, 
		RULE_strVarDeclaration = 124, RULE_sByteStrVarDecl = 125, RULE_sByteStrSpecification = 126, 
		RULE_dByteStrVarDeclaration = 127, RULE_dByteStrSpecification = 128, RULE_locPartlyVarDeclaration = 129, 
		RULE_locPartlyVar = 130, RULE_varSpecification = 131, RULE_functionDeclaration = 132, 
		RULE_functionBody = 133, RULE_classDeclaration = 134, RULE_classTypeName = 135, 
		RULE_classTypeAccess = 136, RULE_className = 137, RULE_classInstanceName = 138, 
		RULE_accessSpecification = 139, RULE_interfaceDeclaration = 140, RULE_interfaceName = 141, 
		RULE_interfaceTypeList = 142, RULE_interfaceTypeAccess = 143, RULE_methodPrototype = 144, 
		RULE_interfaceSpecificationInit = 145, RULE_interfaceValue = 146, RULE_statementList = 147, 
		RULE_statement = 148, RULE_assignStatement = 149, RULE_assignmentAttempt = 150, 
		RULE_subprogControlStatement = 151, RULE_functionCall = 152, RULE_functionAccess = 153, 
		RULE_functionName = 154, RULE_invocation = 155, RULE_parameterAssign = 156, 
		RULE_selectionStatement = 157, RULE_ifStatement = 158, RULE_caseStatement = 159, 
		RULE_caseSelection = 160, RULE_caseList = 161, RULE_caseListElement = 162, 
		RULE_loopStatement = 163, RULE_forStatement = 164, RULE_controlVariable = 165, 
		RULE_forRange = 166, RULE_whileStatement = 167, RULE_repeatStatement = 168, 
		RULE_expression = 169, RULE_exitStatement = 170, RULE_continueStatement = 171, 
		RULE_variableValue = 172, RULE_literalValue = 173, RULE_intLiteral = 174, 
		RULE_intLiteralValue = 175, RULE_intTypeName = 176, RULE_multibitsLiteral = 177, 
		RULE_multibitsLiteralValue = 178, RULE_multibitsTypeName = 179, RULE_realLiteral = 180, 
		RULE_realLiteralValue = 181, RULE_realTypeName = 182, RULE_boolLiteral = 183, 
		RULE_boolLiteralValue = 184, RULE_boolTypeName = 185, RULE_charLiteral = 186, 
		RULE_charString = 187, RULE_charStringTypeName = 188, RULE_timeLiteral = 189, 
		RULE_durationLiteral = 190, RULE_durationLiteralValue = 191, RULE_durationTypeName = 192, 
		RULE_timeOfDayLiteral = 193, RULE_timeOfDayLiteralValue = 194, RULE_timeOfDayTypeName = 195, 
		RULE_dateLiteral = 196, RULE_dateLiteralValue = 197, RULE_dateTypeName = 198, 
		RULE_dateAndTimeLiteral = 199, RULE_dateAndTimeLiteralValue = 200, RULE_dateAndTimeTypeName = 201, 
		RULE_directVariable = 202;
	public static readonly string[] ruleNames = {
		"file", "pouDeclaration", "namespaceDeclaration", "namespaceElements", 
		"namespaceAccess", "namespaceName", "usingDirective", "programDeclaration", 
		"programName", "programNameAccess", "dataTypeDeclaration", "typeDeclaration", 
		"simpleTypeDeclaration", "simpleTypeName", "simpleSpecificationInit", 
		"simpleInit", "simpleSpecification", "elementaryTypeName", "simpleTypeAccess", 
		"stringTypeName", "stringSize", "subrangeTypeDeclaration", "subrangeTypeName", 
		"subrangeSpecificationInit", "subrangeSpecification", "subrangeInit", 
		"subrangeTypeAccess", "subrange", "subrangeBegin", "subrangeEnd", "enumTypeDeclaration", 
		"enumTypeName", "enumNamedSpecificationInit", "enumElementSpecificationInit", 
		"enumElementName", "enumElementValue", "enumValue", "enumSpecificationInit", 
		"enumTypeAccess", "arrayTypeDeclaration", "arrayTypeName", "arraySpecificationInit", 
		"arraySpecification", "arrayTypeAccess", "arrayInit", "arrayElementInit", 
		"arrayElementMultiplier", "arrayElementInitValue", "arrayConformDeclaration", 
		"arrayConformand", "arrayVarDeclarationInit", "structTypeDeclaration", 
		"structTypeName", "structTypeSpecification", "structDeclaration", "structElementDeclaration", 
		"structElementName", "locatedAt", "relativeAddress", "partlySpecifiedAddress", 
		"multibitPartAccess", "structSpecificationInit", "structSpecification", 
		"structTypeAccess", "structInit", "structElementInit", "structVarDeclarationInit", 
		"stringTypeDeclaration", "stringDerivedTypeName", "stringTypeAccess", 
		"referenceTypeDeclaration", "referenceTypeName", "referenceSpecificationInit", 
		"referenceSpecification", "referenceValue", "referenceAddress", "referenceTypeAccess", 
		"referenceAssign", "referenceName", "dereference", "functionBlockDeclaration", 
		"functionBlockName", "functionBlockInstanceName", "functionBlockTypeAccess", 
		"functionBlockTypeName", "functionBlockBody", "functionBlockVarDeclarationInit", 
		"functionBlockVarSpecificationInit", "methodDeclaration", "methodName", 
		"dataTypeAccess", "derivedTypeAccess", "variable", "symbolicVariable", 
		"variableAccess", "variableName", "multiElementVariable", "subscriptList", 
		"subscript", "structElementSelect", "structElementVariable", "ioVarDeclarations", 
		"inputVarDeclarations", "inputVarDeclaration", "varDeclarationInit", "variableList", 
		"outputVarDeclarations", "outputVarDeclaration", "inOutVarDeclarations", 
		"inOutVarDeclaration", "normalVarDeclarations", "otherVarDeclarations", 
		"nonRetainVarDeclarations", "retainVarDeclarations", "locVarDeclarations", 
		"locVarDeclaration", "tempVarDeclarations", "externalVarDeclarations", 
		"externalDeclaration", "globalVarName", "globalVarDeclarations", "globalVarDeclaration", 
		"globalVarSpecification", "locVarSpecificationInit", "strVarDeclaration", 
		"sByteStrVarDecl", "sByteStrSpecification", "dByteStrVarDeclaration", 
		"dByteStrSpecification", "locPartlyVarDeclaration", "locPartlyVar", "varSpecification", 
		"functionDeclaration", "functionBody", "classDeclaration", "classTypeName", 
		"classTypeAccess", "className", "classInstanceName", "accessSpecification", 
		"interfaceDeclaration", "interfaceName", "interfaceTypeList", "interfaceTypeAccess", 
		"methodPrototype", "interfaceSpecificationInit", "interfaceValue", "statementList", 
		"statement", "assignStatement", "assignmentAttempt", "subprogControlStatement", 
		"functionCall", "functionAccess", "functionName", "invocation", "parameterAssign", 
		"selectionStatement", "ifStatement", "caseStatement", "caseSelection", 
		"caseList", "caseListElement", "loopStatement", "forStatement", "controlVariable", 
		"forRange", "whileStatement", "repeatStatement", "expression", "exitStatement", 
		"continueStatement", "variableValue", "literalValue", "intLiteral", "intLiteralValue", 
		"intTypeName", "multibitsLiteral", "multibitsLiteralValue", "multibitsTypeName", 
		"realLiteral", "realLiteralValue", "realTypeName", "boolLiteral", "boolLiteralValue", 
		"boolTypeName", "charLiteral", "charString", "charStringTypeName", "timeLiteral", 
		"durationLiteral", "durationLiteralValue", "durationTypeName", "timeOfDayLiteral", 
		"timeOfDayLiteralValue", "timeOfDayTypeName", "dateLiteral", "dateLiteralValue", 
		"dateTypeName", "dateAndTimeLiteral", "dateAndTimeLiteralValue", "dateAndTimeTypeName", 
		"directVariable"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'USINT'", "'UINT'", "'UDINT'", "'ULINT'", "'SINT'", 
		"'INT'", "'DINT'", "'LINT'", "'REAL'", "'LREAL'", "'BYTE'", "'WORD'", 
		"'DWORD'", "'LWORD'", "'BOOL'", "'FALSE'", "'TRUE'", "'STRING'", "'WSTRING'", 
		"'CHAR'", "'WCHAR'", null, null, null, null, null, null, null, null, "'TYPE'", 
		"'END_TYPE'", "'ARRAY'", "'OF'", "'STRUCT'", "'OVERLAP'", "'END_STRUCT'", 
		"'AT'", "'REF_TO'", "'REF'", "'NULL'", "'THIS'", "'VAR_INPUT'", "'VAR_OUTPUT'", 
		"'VAR_IN_OUT'", "'RETAIN'", "'NON_RETAIN'", "'END_VAR'", "'VAR'", "'CONSTANT'", 
		"'VAR_TEMP'", "'VAR_EXTERNAL'", "'VAR_GLOBAL'", "'FUNCTION'", "'END_FUNCTION'", 
		"'FUNCTION_BLOCK'", "'FINAL'", "'ABSTRACT'", "'EXTENDS'", "'IMPLEMENTS'", 
		"'END_FUNCTION_BLOCK'", "'METHOD'", "'OVERRIDE'", "'END_METHOD'", "'CLASS'", 
		"'END_CLASS'", "'INTERFACE'", "'END_INTERFACE'", "'PUBLIC'", "'PROTECTED'", 
		"'PRIVATE'", "'INTERAL'", "'SUPER'", "'RETURN'", "'PROGRAM'", "'END_PROGRAM'", 
		"'VAR_ACCESS'", "'CONFIGURATION'", "'END_CONFIGURATION'", "'RESOURCE'", 
		"'ON'", "'END_RESOURCE'", "'READ_WRITE'", "'READ_ONLY'", "'TASK'", "'SINGLE'", 
		"'INTERVAL'", "'PRIORITY'", "'WITH'", "'VAR_CONFIG'", "'NAMESPACE'", "'END_NAMESPACE'", 
		"'USING'", "'IF'", "'THEN'", "'ELSIF'", "'ELSE'", "'END_IF'", "'CASE'", 
		"'END_CASE'", "'EXIT'", "'CONTINUE'", "'FOR'", "'TO'", "'BY'", "'DO'", 
		"'END_FOR'", "'WHILE'", "'END_WHILE'", "'REPEAT'", "'UNTIL'", "'END_REPEAT'", 
		"'+'", "'-'", "'*'", "'**'", "'/'", "'MOD'", "'='", "'<>'", "'<'", "'<='", 
		"'>'", "'>='", "'AND'", "'OR'", "'NOT'", "'XOR'", "'&'", "':='", "'=>'", 
		"'?='", "'('", "')'", "'['", "']'", "','", "':'", "';'", "'.'", "'..'", 
		"'#'", "'^'", "'%'", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RELATIVE_ADDRESS", "DIRECT_VARIABLE", "SINGLE_BYTE_STRING", "DOUBLE_BYTE_STRING", 
		"DURATION", "DATE_TIME_VALUE", "DATE_VALUE", "CLOCK_TIME", "REAL_VALUE", 
		"SIGNED_INT", "UNSIGNED_INT", "BINARY_INT", "OCTAL_INT", "HEX_INT", "BOOLEAN", 
		"USINT", "UINT", "UDINT", "ULINT", "SINT", "INT", "DINT", "LINT", "REAL", 
		"LREAL", "BYTE", "WORD", "DWORD", "LWORD", "BOOL", "FALSE", "TRUE", "STRING", 
		"WSTRING", "CHAR", "WCHAR", "TIME", "LTIME", "TIME_OF_DAY", "LTIME_OF_DAY", 
		"DATE", "LDATE", "DATE_AND_TIME", "LDATE_AND_TIME", "TYPE", "END_TYPE", 
		"ARRAY", "OF", "STRUCT", "OVERLAP", "END_STRUCT", "AT", "REF_TO", "REF", 
		"NULL", "THIS", "VAR_INPUT", "VAR_OUTPUT", "VAR_IN_OUT", "RETAIN", "NON_RETAIN", 
		"END_VAR", "VAR", "CONSTANT", "VAR_TEMP", "VAR_EXTERNAL", "VAR_GLOBAL", 
		"FUNCTION", "END_FUNCTION", "FUNCTION_BLOCK", "FINAL", "ABSTRACT", "EXTENDS", 
		"IMPLEMENTS", "END_FUNCTION_BLOCK", "METHOD", "OVERRIDE", "END_METHOD", 
		"CLASS", "END_CLASS", "INTERFACE", "END_INTERFACE", "PUBLIC", "PROTECTED", 
		"PRIVATE", "INTERNAL", "SUPER", "RETURN", "PROGRAM", "END_PROGRAM", "VAR_ACCESS", 
		"CONFIGURATION", "END_CONFIGURATION", "RESOURCE", "ON", "END_RESOURCE", 
		"READ_WRITE", "READ_ONLY", "TASK", "SINGLE", "INTERVAL", "PRIORITY", "WITH", 
		"VAR_CONFIG", "NAMESPACE", "END_NAMESPACE", "USING", "IF", "THEN", "ELSIF", 
		"ELSE", "END_IF", "CASE", "END_CASE", "EXIT", "CONTINUE", "FOR", "TO", 
		"BY", "DO", "END_FOR", "WHILE", "END_WHILE", "REPEAT", "UNTIL", "END_REPEAT", 
		"PLUS", "MINUS", "ASTERISK", "POWER", "SLASH", "MOD", "EQUAL", "NOT_EQUAL", 
		"LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", "AND", "OR", "NOT", 
		"XOR", "AMPERSAND", "ASSIGN", "ASSIGN_OUT", "ATTEMPT_ASSIGN", "LEFT_PAREN", 
		"RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA", "COLON", "SEMICOLON", 
		"DOT", "RANGE", "HASH", "CARET", "PERCENT", "UNDERSCORE", "IDENTIFIER", 
		"PRAGMA", "LINE_COMMENT", "SLASH_COMMENT", "BRACE_COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "st.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static stParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public stParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public stParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PouDeclarationContext[] pouDeclaration() {
			return GetRuleContexts<PouDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PouDeclarationContext pouDeclaration(int i) {
			return GetRuleContext<PouDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext[] globalVarDeclarations() {
			return GetRuleContexts<GlobalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext globalVarDeclarations(int i) {
			return GetRuleContext<GlobalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext[] dataTypeDeclaration() {
			return GetRuleContexts<DataTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext dataTypeDeclaration(int i) {
			return GetRuleContext<DataTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext[] interfaceDeclaration() {
			return GetRuleContexts<InterfaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration(int i) {
			return GetRuleContext<InterfaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 420;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 406;
					pouDeclaration();
					}
					break;
				case 2:
					{
					State = 410;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==USING) {
						{
						{
						State = 407;
						usingDirective();
						}
						}
						State = 412;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 418;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NAMESPACE:
						{
						State = 413;
						namespaceDeclaration();
						}
						break;
					case VAR_GLOBAL:
						{
						State = 414;
						globalVarDeclarations();
						}
						break;
					case TYPE:
						{
						State = 415;
						dataTypeDeclaration();
						}
						break;
					case CLASS:
						{
						State = 416;
						classDeclaration();
						}
						break;
					case INTERFACE:
						{
						State = 417;
						interfaceDeclaration();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 5764625201165762561L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PouDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockDeclarationContext functionBlockDeclaration() {
			return GetRuleContext<FunctionBlockDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramDeclarationContext programDeclaration() {
			return GetRuleContext<ProgramDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public PouDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pouDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPouDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PouDeclarationContext pouDeclaration() {
		PouDeclarationContext _localctx = new PouDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_pouDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 424;
				usingDirective();
				}
				}
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 433;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNCTION:
				{
				State = 430;
				functionDeclaration();
				}
				break;
			case FUNCTION_BLOCK:
				{
				State = 431;
				functionBlockDeclaration();
				}
				break;
			case PROGRAM:
				{
				State = 432;
				programDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(stParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext namespaceAccess() {
			return GetRuleContext<NamespaceAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceElementsContext namespaceElements() {
			return GetRuleContext<NamespaceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_NAMESPACE() { return GetToken(stParser.END_NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(stParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(NAMESPACE);
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERNAL) {
				{
				State = 436;
				Match(INTERNAL);
				}
			}

			State = 439;
			namespaceAccess();
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 440;
				usingDirective();
				}
				}
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 446;
			namespaceElements();
			State = 447;
			Match(END_NAMESPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext[] dataTypeDeclaration() {
			return GetRuleContexts<DataTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext dataTypeDeclaration(int i) {
			return GetRuleContext<DataTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockDeclarationContext[] functionBlockDeclaration() {
			return GetRuleContexts<FunctionBlockDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockDeclarationContext functionBlockDeclaration(int i) {
			return GetRuleContext<FunctionBlockDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext[] interfaceDeclaration() {
			return GetRuleContexts<InterfaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration(int i) {
			return GetRuleContext<InterfaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public NamespaceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceElementsContext namespaceElements() {
		NamespaceElementsContext _localctx = new NamespaceElementsContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 455;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TYPE:
					{
					State = 449;
					dataTypeDeclaration();
					}
					break;
				case FUNCTION:
					{
					State = 450;
					functionDeclaration();
					}
					break;
				case FUNCTION_BLOCK:
					{
					State = 451;
					functionBlockDeclaration();
					}
					break;
				case CLASS:
					{
					State = 452;
					classDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 453;
					interfaceDeclaration();
					}
					break;
				case NAMESPACE:
					{
					State = 454;
					namespaceDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 1152921590548135937L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public NamespaceAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceAccessContext namespaceAccess() {
		NamespaceAccessContext _localctx = new NamespaceAccessContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespaceAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			namespaceName();
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 460;
				Match(DOT);
				State = 461;
				namespaceName();
				}
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(stParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext[] namespaceAccess() {
			return GetRuleContexts<NamespaceAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext namespaceAccess(int i) {
			return GetRuleContext<NamespaceAccessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(stParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(USING);
			State = 470;
			namespaceAccess();
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 471;
				Match(COMMA);
				State = 472;
				namespaceAccess();
				}
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 478;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(stParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramNameContext programName() {
			return GetRuleContext<ProgramNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_PROGRAM() { return GetToken(stParser.END_PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationsContext[] locVarDeclarations() {
			return GetRuleContexts<LocVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationsContext locVarDeclarations(int i) {
			return GetRuleContext<LocVarDeclarationsContext>(i);
		}
		public ProgramDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramDeclarationContext programDeclaration() {
		ProgramDeclarationContext _localctx = new ProgramDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_programDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			Match(PROGRAM);
			State = 481;
			programName();
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 839L) != 0)) {
				{
				State = 488;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 482;
					ioVarDeclarations();
					}
					break;
				case 2:
					{
					State = 483;
					externalVarDeclarations();
					}
					break;
				case 3:
					{
					State = 484;
					normalVarDeclarations();
					}
					break;
				case 4:
					{
					State = 485;
					tempVarDeclarations();
					}
					break;
				case 5:
					{
					State = 486;
					otherVarDeclarations();
					}
					break;
				case 6:
					{
					State = 487;
					locVarDeclarations();
					}
					break;
				}
				}
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 493;
			statementList();
			State = 494;
			Match(END_PROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ProgramNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramNameContext programName() {
		ProgramNameContext _localctx = new ProgramNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_programName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramNameAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramNameContext programName() {
			return GetRuleContext<ProgramNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ProgramNameAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programNameAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramNameAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramNameAccessContext programNameAccess() {
		ProgramNameAccessContext _localctx = new ProgramNameAccessContext(Context, State);
		EnterRule(_localctx, 18, RULE_programNameAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 498;
					namespaceName();
					State = 499;
					Match(DOT);
					}
					} 
				}
				State = 505;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 506;
			programName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(stParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_TYPE() { return GetToken(stParser.END_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public DataTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeDeclarationContext dataTypeDeclaration() {
		DataTypeDeclarationContext _localctx = new DataTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_dataTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			Match(TYPE);
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 509;
				typeDeclaration();
				State = 510;
				Match(SEMICOLON);
				}
				}
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 516;
			Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeDeclarationContext simpleTypeDeclaration() {
			return GetRuleContext<SimpleTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeDeclarationContext subrangeTypeDeclaration() {
			return GetRuleContext<SubrangeTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeDeclarationContext enumTypeDeclaration() {
			return GetRuleContext<EnumTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeDeclarationContext arrayTypeDeclaration() {
			return GetRuleContext<ArrayTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeDeclarationContext structTypeDeclaration() {
			return GetRuleContext<StructTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeDeclarationContext stringTypeDeclaration() {
			return GetRuleContext<StringTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeDeclarationContext referenceTypeDeclaration() {
			return GetRuleContext<ReferenceTypeDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeDeclaration);
		try {
			State = 525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 518;
				simpleTypeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519;
				subrangeTypeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 520;
				enumTypeDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 521;
				arrayTypeDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 522;
				structTypeDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 523;
				stringTypeDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 524;
				referenceTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		public SimpleTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeDeclarationContext simpleTypeDeclaration() {
		SimpleTypeDeclarationContext _localctx = new SimpleTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_simpleTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			simpleTypeName();
			State = 528;
			Match(COLON);
			State = 529;
			simpleSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleInitContext simpleInit() {
			return GetRuleContext<SimpleInitContext>(0);
		}
		public SimpleSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSpecificationInitContext simpleSpecificationInit() {
		SimpleSpecificationInitContext _localctx = new SimpleSpecificationInitContext(Context, State);
		EnterRule(_localctx, 28, RULE_simpleSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			simpleSpecification();
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 534;
				Match(ASSIGN);
				State = 535;
				simpleInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleInitContext simpleInit() {
		SimpleInitContext _localctx = new SimpleInitContext(Context, State);
		EnterRule(_localctx, 30, RULE_simpleInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeAccessContext simpleTypeAccess() {
			return GetRuleContext<SimpleTypeAccessContext>(0);
		}
		public SimpleSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSpecificationContext simpleSpecification() {
		SimpleSpecificationContext _localctx = new SimpleSpecificationContext(Context, State);
		EnterRule(_localctx, 32, RULE_simpleSpecification);
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
			case REAL:
			case LREAL:
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
			case BOOL:
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
			case TIME:
			case LTIME:
			case DATE:
			case LDATE:
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 540;
				elementaryTypeName();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 541;
				simpleTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementaryTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeNameContext realTypeName() {
			return GetRuleContext<RealTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTypeNameContext boolTypeName() {
			return GetRuleContext<BoolTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsTypeNameContext multibitsTypeName() {
			return GetRuleContext<MultibitsTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext stringTypeName() {
			return GetRuleContext<StringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTypeNameContext dateTypeName() {
			return GetRuleContext<DateTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeTypeNameContext dateAndTimeTypeName() {
			return GetRuleContext<DateAndTimeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationTypeNameContext durationTypeName() {
			return GetRuleContext<DurationTypeNameContext>(0);
		}
		public ElementaryTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementaryTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementaryTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementaryTypeNameContext elementaryTypeName() {
		ElementaryTypeNameContext _localctx = new ElementaryTypeNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_elementaryTypeName);
		try {
			State = 552;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 544;
				intTypeName();
				}
				break;
			case REAL:
			case LREAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 545;
				realTypeName();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 546;
				boolTypeName();
				}
				break;
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 547;
				multibitsTypeName();
				}
				break;
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 548;
				stringTypeName();
				}
				break;
			case DATE:
			case LDATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 549;
				dateTypeName();
				}
				break;
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 550;
				dateAndTimeTypeName();
				}
				break;
			case TIME:
			case LTIME:
				EnterOuterAlt(_localctx, 8);
				{
				State = 551;
				durationTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public SimpleTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeAccessContext simpleTypeAccess() {
		SimpleTypeAccessContext _localctx = new SimpleTypeAccessContext(Context, State);
		EnterRule(_localctx, 36, RULE_simpleTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 554;
					namespaceName();
					State = 555;
					Match(DOT);
					}
					} 
				}
				State = 561;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 562;
			simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringSizeContext stringSize() {
			return GetRuleContext<StringSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(stParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WCHAR() { return GetToken(stParser.WCHAR, 0); }
		public StringTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeNameContext stringTypeName() {
		StringTypeNameContext _localctx = new StringTypeNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_stringTypeName);
		int _la;
		try {
			State = 573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case WSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 564;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==WSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 565;
					Match(LEFT_BRACKET);
					State = 566;
					stringSize();
					State = 567;
					Match(RIGHT_BRACKET);
					}
				}

				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571;
				Match(CHAR);
				}
				break;
			case WCHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 572;
				Match(WCHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public StringSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringSizeContext stringSize() {
		StringSizeContext _localctx = new StringSizeContext(Context, State);
		EnterRule(_localctx, 40, RULE_stringSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			Match(UNSIGNED_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeNameContext subrangeTypeName() {
			return GetRuleContext<SubrangeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationInitContext subrangeSpecificationInit() {
			return GetRuleContext<SubrangeSpecificationInitContext>(0);
		}
		public SubrangeTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeDeclarationContext subrangeTypeDeclaration() {
		SubrangeTypeDeclarationContext _localctx = new SubrangeTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_subrangeTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			subrangeTypeName();
			State = 578;
			Match(COLON);
			State = 579;
			subrangeSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public SubrangeTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeNameContext subrangeTypeName() {
		SubrangeTypeNameContext _localctx = new SubrangeTypeNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_subrangeTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationContext subrangeSpecification() {
			return GetRuleContext<SubrangeSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeInitContext subrangeInit() {
			return GetRuleContext<SubrangeInitContext>(0);
		}
		public SubrangeSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeSpecificationInitContext subrangeSpecificationInit() {
		SubrangeSpecificationInitContext _localctx = new SubrangeSpecificationInitContext(Context, State);
		EnterRule(_localctx, 46, RULE_subrangeSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			subrangeSpecification();
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 584;
				Match(ASSIGN);
				State = 585;
				subrangeInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeAccessContext subrangeTypeAccess() {
			return GetRuleContext<SubrangeTypeAccessContext>(0);
		}
		public SubrangeSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeSpecificationContext subrangeSpecification() {
		SubrangeSpecificationContext _localctx = new SubrangeSpecificationContext(Context, State);
		EnterRule(_localctx, 48, RULE_subrangeSpecification);
		try {
			State = 594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 588;
				intTypeName();
				State = 589;
				Match(LEFT_PAREN);
				State = 590;
				subrange();
				State = 591;
				Match(RIGHT_PAREN);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593;
				subrangeTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_INT() { return GetToken(stParser.SIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public SubrangeInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeInitContext subrangeInit() {
		SubrangeInitContext _localctx = new SubrangeInitContext(Context, State);
		EnterRule(_localctx, 50, RULE_subrangeInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			_la = TokenStream.LA(1);
			if ( !(_la==SIGNED_INT || _la==UNSIGNED_INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeNameContext subrangeTypeName() {
			return GetRuleContext<SubrangeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public SubrangeTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeAccessContext subrangeTypeAccess() {
		SubrangeTypeAccessContext _localctx = new SubrangeTypeAccessContext(Context, State);
		EnterRule(_localctx, 52, RULE_subrangeTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 598;
					namespaceName();
					State = 599;
					Match(DOT);
					}
					} 
				}
				State = 605;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 606;
			subrangeTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeBeginContext subrangeBegin() {
			return GetRuleContext<SubrangeBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(stParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeEndContext subrangeEnd() {
			return GetRuleContext<SubrangeEndContext>(0);
		}
		public SubrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeContext subrange() {
		SubrangeContext _localctx = new SubrangeContext(Context, State);
		EnterRule(_localctx, 54, RULE_subrange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			subrangeBegin();
			State = 609;
			Match(RANGE);
			State = 610;
			subrangeEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubrangeBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeBeginContext subrangeBegin() {
		SubrangeBeginContext _localctx = new SubrangeBeginContext(Context, State);
		EnterRule(_localctx, 56, RULE_subrangeBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubrangeEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeEndContext subrangeEnd() {
		SubrangeEndContext _localctx = new SubrangeEndContext(Context, State);
		EnterRule(_localctx, 58, RULE_subrangeEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumNamedSpecificationInitContext enumNamedSpecificationInit() {
			return GetRuleContext<EnumNamedSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecificationInitContext enumSpecificationInit() {
			return GetRuleContext<EnumSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		public EnumTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeDeclarationContext enumTypeDeclaration() {
		EnumTypeDeclarationContext _localctx = new EnumTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_enumTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			enumTypeName();
			State = 617;
			Match(COLON);
			State = 623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33528662130688L) != 0)) {
					{
					State = 618;
					elementaryTypeName();
					}
				}

				State = 621;
				enumNamedSpecificationInit();
				}
				break;
			case 2:
				{
				State = 622;
				enumSpecificationInit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public EnumTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeNameContext enumTypeName() {
		EnumTypeNameContext _localctx = new EnumTypeNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_enumTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNamedSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementSpecificationInitContext[] enumElementSpecificationInit() {
			return GetRuleContexts<EnumElementSpecificationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementSpecificationInitContext enumElementSpecificationInit(int i) {
			return GetRuleContext<EnumElementSpecificationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public EnumNamedSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumNamedSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumNamedSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNamedSpecificationInitContext enumNamedSpecificationInit() {
		EnumNamedSpecificationInitContext _localctx = new EnumNamedSpecificationInitContext(Context, State);
		EnterRule(_localctx, 64, RULE_enumNamedSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			Match(LEFT_PAREN);
			State = 628;
			enumElementSpecificationInit();
			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 629;
				Match(COMMA);
				State = 630;
				enumElementSpecificationInit();
				}
				}
				State = 635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 636;
			Match(RIGHT_PAREN);
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 637;
				Match(ASSIGN);
				State = 638;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementValueContext enumElementValue() {
			return GetRuleContext<EnumElementValueContext>(0);
		}
		public EnumElementSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementSpecificationInitContext enumElementSpecificationInit() {
		EnumElementSpecificationInitContext _localctx = new EnumElementSpecificationInitContext(Context, State);
		EnterRule(_localctx, 66, RULE_enumElementSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			enumElementName();
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 642;
				Match(ASSIGN);
				State = 643;
				enumElementValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public EnumElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementNameContext enumElementName() {
		EnumElementNameContext _localctx = new EnumElementNameContext(Context, State);
		EnterRule(_localctx, 68, RULE_enumElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementValueContext enumElementValue() {
		EnumElementValueContext _localctx = new EnumElementValueContext(Context, State);
		EnterRule(_localctx, 70, RULE_enumElementValue);
		try {
			State = 650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 648;
				intLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 649;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 72, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 652;
				enumTypeName();
				State = 653;
				Match(HASH);
				}
				break;
			}
			State = 657;
			enumElementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext[] enumElementName() {
			return GetRuleContexts<EnumElementNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName(int i) {
			return GetRuleContext<EnumElementNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeAccessContext enumTypeAccess() {
			return GetRuleContext<EnumTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public EnumSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecificationInitContext enumSpecificationInit() {
		EnumSpecificationInitContext _localctx = new EnumSpecificationInitContext(Context, State);
		EnterRule(_localctx, 74, RULE_enumSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				State = 659;
				Match(LEFT_PAREN);
				State = 660;
				enumElementName();
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 661;
					Match(COMMA);
					State = 662;
					enumElementName();
					}
					}
					State = 667;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 668;
				Match(RIGHT_PAREN);
				}
				break;
			case IDENTIFIER:
				{
				State = 670;
				enumTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 673;
				Match(ASSIGN);
				State = 674;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public EnumTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeAccessContext enumTypeAccess() {
		EnumTypeAccessContext _localctx = new EnumTypeAccessContext(Context, State);
		EnterRule(_localctx, 76, RULE_enumTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 677;
					namespaceName();
					State = 678;
					Match(DOT);
					}
					} 
				}
				State = 684;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 685;
			enumTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeNameContext arrayTypeName() {
			return GetRuleContext<ArrayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		public ArrayTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeDeclarationContext arrayTypeDeclaration() {
		ArrayTypeDeclarationContext _localctx = new ArrayTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_arrayTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			arrayTypeName();
			State = 688;
			Match(COLON);
			State = 689;
			arraySpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ArrayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeNameContext arrayTypeName() {
		ArrayTypeNameContext _localctx = new ArrayTypeNameContext(Context, State);
		EnterRule(_localctx, 80, RULE_arrayTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArraySpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySpecificationInitContext arraySpecificationInit() {
		ArraySpecificationInitContext _localctx = new ArraySpecificationInitContext(Context, State);
		EnterRule(_localctx, 82, RULE_arraySpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			arraySpecification();
			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 694;
				Match(ASSIGN);
				State = 695;
				arrayInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeAccessContext arrayTypeAccess() {
			return GetRuleContext<ArrayTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(stParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext[] subrange() {
			return GetRuleContexts<SubrangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange(int i) {
			return GetRuleContext<SubrangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArraySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySpecificationContext arraySpecification() {
		ArraySpecificationContext _localctx = new ArraySpecificationContext(Context, State);
		EnterRule(_localctx, 84, RULE_arraySpecification);
		int _la;
		try {
			State = 713;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 698;
				arrayTypeAccess();
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 699;
				Match(ARRAY);
				State = 700;
				Match(LEFT_BRACKET);
				State = 701;
				subrange();
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 702;
					Match(COMMA);
					State = 703;
					subrange();
					}
					}
					State = 708;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 709;
				Match(RIGHT_BRACKET);
				State = 710;
				Match(OF);
				State = 711;
				dataTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeNameContext arrayTypeName() {
			return GetRuleContext<ArrayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ArrayTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeAccessContext arrayTypeAccess() {
		ArrayTypeAccessContext _localctx = new ArrayTypeAccessContext(Context, State);
		EnterRule(_localctx, 86, RULE_arrayTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 715;
					namespaceName();
					State = 716;
					Match(DOT);
					}
					} 
				}
				State = 722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 723;
			arrayTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitContext[] arrayElementInit() {
			return GetRuleContexts<ArrayElementInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitContext arrayElementInit(int i) {
			return GetRuleContext<ArrayElementInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArrayInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitContext arrayInit() {
		ArrayInitContext _localctx = new ArrayInitContext(Context, State);
		EnterRule(_localctx, 88, RULE_arrayInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			Match(LEFT_BRACKET);
			State = 726;
			arrayElementInit();
			State = 731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 727;
				Match(COMMA);
				State = 728;
				arrayElementInit();
				}
				}
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 734;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitValueContext arrayElementInitValue() {
			return GetRuleContext<ArrayElementInitValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementMultiplierContext arrayElementMultiplier() {
			return GetRuleContext<ArrayElementMultiplierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		public ArrayElementInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementInitContext arrayElementInit() {
		ArrayElementInitContext _localctx = new ArrayElementInitContext(Context, State);
		EnterRule(_localctx, 90, RULE_arrayElementInit);
		int _la;
		try {
			State = 744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736;
				arrayElementInitValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737;
				arrayElementMultiplier();
				State = 738;
				Match(LEFT_PAREN);
				State = 740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 126135967496011292L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 8595193859L) != 0)) {
					{
					State = 739;
					arrayElementInitValue();
					}
				}

				State = 742;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementMultiplierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public ArrayElementMultiplierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementMultiplier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementMultiplier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementMultiplierContext arrayElementMultiplier() {
		ArrayElementMultiplierContext _localctx = new ArrayElementMultiplierContext(Context, State);
		EnterRule(_localctx, 92, RULE_arrayElementMultiplier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746;
			Match(UNSIGNED_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementInitValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArrayElementInitValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementInitValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementInitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementInitValueContext arrayElementInitValue() {
		ArrayElementInitValueContext _localctx = new ArrayElementInitValueContext(Context, State);
		EnterRule(_localctx, 94, RULE_arrayElementInitValue);
		try {
			State = 752;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 748;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 749;
				enumValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 750;
				structInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 751;
				arrayInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConformDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformandContext arrayConformand() {
			return GetRuleContext<ArrayConformandContext>(0);
		}
		public ArrayConformDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayConformDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConformDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConformDeclarationContext arrayConformDeclaration() {
		ArrayConformDeclarationContext _localctx = new ArrayConformDeclarationContext(Context, State);
		EnterRule(_localctx, 96, RULE_arrayConformDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			variableList();
			State = 755;
			Match(COLON);
			State = 756;
			arrayConformand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConformandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(stParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASTERISK() { return GetTokens(stParser.ASTERISK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK(int i) {
			return GetToken(stParser.ASTERISK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArrayConformandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayConformand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConformand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConformandContext arrayConformand() {
		ArrayConformandContext _localctx = new ArrayConformandContext(Context, State);
		EnterRule(_localctx, 98, RULE_arrayConformand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			Match(ARRAY);
			State = 759;
			Match(LEFT_BRACKET);
			State = 760;
			Match(ASTERISK);
			State = 765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 761;
				Match(COMMA);
				State = 762;
				Match(ASTERISK);
				}
				}
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 768;
			Match(RIGHT_BRACKET);
			State = 769;
			Match(OF);
			State = 770;
			dataTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		public ArrayVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayVarDeclarationInitContext arrayVarDeclarationInit() {
		ArrayVarDeclarationInitContext _localctx = new ArrayVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 100, RULE_arrayVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			variableList();
			State = 773;
			Match(COLON);
			State = 774;
			arraySpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeSpecificationContext structTypeSpecification() {
			return GetRuleContext<StructTypeSpecificationContext>(0);
		}
		public StructTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeDeclarationContext structTypeDeclaration() {
		StructTypeDeclarationContext _localctx = new StructTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 102, RULE_structTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			structTypeName();
			State = 777;
			Match(COLON);
			State = 778;
			structTypeSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StructTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeNameContext structTypeName() {
		StructTypeNameContext _localctx = new StructTypeNameContext(Context, State);
		EnterRule(_localctx, 104, RULE_structTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		public StructTypeSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeSpecificationContext structTypeSpecification() {
		StructTypeSpecificationContext _localctx = new StructTypeSpecificationContext(Context, State);
		EnterRule(_localctx, 106, RULE_structTypeSpecification);
		try {
			State = 784;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRUCT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 782;
				structDeclaration();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 783;
				structSpecificationInit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(stParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_STRUCT() { return GetToken(stParser.END_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAP() { return GetToken(stParser.OVERLAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementDeclarationContext[] structElementDeclaration() {
			return GetRuleContexts<StructElementDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementDeclarationContext structElementDeclaration(int i) {
			return GetRuleContext<StructElementDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			Match(STRUCT);
			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERLAP) {
				{
				State = 787;
				Match(OVERLAP);
				}
			}

			State = 793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 790;
				structElementDeclaration();
				State = 791;
				Match(SEMICOLON);
				}
				}
				State = 795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 797;
			Match(END_STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructElementNameContext structElementName() {
			return GetRuleContext<StructElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationInitContext subrangeSpecificationInit() {
			return GetRuleContext<SubrangeSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecificationInitContext enumSpecificationInit() {
			return GetRuleContext<EnumSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitPartAccessContext multibitPartAccess() {
			return GetRuleContext<MultibitPartAccessContext>(0);
		}
		public StructElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementDeclarationContext structElementDeclaration() {
		StructElementDeclarationContext _localctx = new StructElementDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_structElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			structElementName();
			State = 804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 800;
				locatedAt();
				State = 802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 801;
					multibitPartAccess();
					}
				}

				}
			}

			State = 806;
			Match(COLON);
			State = 812;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 807;
				simpleSpecificationInit();
				}
				break;
			case 2:
				{
				State = 808;
				subrangeSpecificationInit();
				}
				break;
			case 3:
				{
				State = 809;
				enumSpecificationInit();
				}
				break;
			case 4:
				{
				State = 810;
				arraySpecificationInit();
				}
				break;
			case 5:
				{
				State = 811;
				structSpecificationInit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StructElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementNameContext structElementName() {
		StructElementNameContext _localctx = new StructElementNameContext(Context, State);
		EnterRule(_localctx, 112, RULE_structElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedAtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(stParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelativeAddressContext relativeAddress() {
			return GetRuleContext<RelativeAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartlySpecifiedAddressContext partlySpecifiedAddress() {
			return GetRuleContext<PartlySpecifiedAddressContext>(0);
		}
		public LocatedAtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedAt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedAt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedAtContext locatedAt() {
		LocatedAtContext _localctx = new LocatedAtContext(Context, State);
		EnterRule(_localctx, 114, RULE_locatedAt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			Match(AT);
			State = 819;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RELATIVE_ADDRESS:
				{
				State = 817;
				relativeAddress();
				}
				break;
			case DIRECT_VARIABLE:
				{
				State = 818;
				partlySpecifiedAddress();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelativeAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		public RelativeAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relativeAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelativeAddressContext relativeAddress() {
		RelativeAddressContext _localctx = new RelativeAddressContext(Context, State);
		EnterRule(_localctx, 116, RULE_relativeAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			Match(RELATIVE_ADDRESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartlySpecifiedAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_VARIABLE() { return GetToken(stParser.DIRECT_VARIABLE, 0); }
		public PartlySpecifiedAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partlySpecifiedAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartlySpecifiedAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartlySpecifiedAddressContext partlySpecifiedAddress() {
		PartlySpecifiedAddressContext _localctx = new PartlySpecifiedAddressContext(Context, State);
		EnterRule(_localctx, 118, RULE_partlySpecifiedAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(DIRECT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitPartAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(stParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		public MultibitPartAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitPartAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitPartAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitPartAccessContext multibitPartAccess() {
		MultibitPartAccessContext _localctx = new MultibitPartAccessContext(Context, State);
		EnterRule(_localctx, 120, RULE_multibitPartAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			Match(DOT);
			State = 826;
			_la = TokenStream.LA(1);
			if ( !(_la==RELATIVE_ADDRESS || _la==UNSIGNED_INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationContext structSpecification() {
			return GetRuleContext<StructSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		public StructSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecificationInitContext structSpecificationInit() {
		StructSpecificationInitContext _localctx = new StructSpecificationInitContext(Context, State);
		EnterRule(_localctx, 122, RULE_structSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 828;
			structSpecification();
			State = 831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 829;
				Match(ASSIGN);
				State = 830;
				structInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		public StructSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecificationContext structSpecification() {
		StructSpecificationContext _localctx = new StructSpecificationContext(Context, State);
		EnterRule(_localctx, 124, RULE_structSpecification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			structTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public StructTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeAccessContext structTypeAccess() {
		StructTypeAccessContext _localctx = new StructTypeAccessContext(Context, State);
		EnterRule(_localctx, 126, RULE_structTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 835;
					namespaceName();
					State = 836;
					Match(DOT);
					}
					} 
				}
				State = 842;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			State = 843;
			structTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementInitContext[] structElementInit() {
			return GetRuleContexts<StructElementInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementInitContext structElementInit(int i) {
			return GetRuleContext<StructElementInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public StructInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructInitContext structInit() {
		StructInitContext _localctx = new StructInitContext(Context, State);
		EnterRule(_localctx, 128, RULE_structInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845;
			Match(LEFT_PAREN);
			State = 846;
			structElementInit();
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 847;
				Match(COMMA);
				State = 848;
				structElementInit();
				}
				}
				State = 853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 854;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructElementNameContext structElementName() {
			return GetRuleContext<StructElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public StructElementInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementInitContext structElementInit() {
		StructElementInitContext _localctx = new StructElementInitContext(Context, State);
		EnterRule(_localctx, 130, RULE_structElementInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			structElementName();
			State = 857;
			Match(ASSIGN);
			State = 863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 858;
				expression(0);
				}
				break;
			case 2:
				{
				State = 859;
				enumValue();
				}
				break;
			case 3:
				{
				State = 860;
				arrayInit();
				}
				break;
			case 4:
				{
				State = 861;
				structInit();
				}
				break;
			case 5:
				{
				State = 862;
				referenceValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		public StructVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructVarDeclarationInitContext structVarDeclarationInit() {
		StructVarDeclarationInitContext _localctx = new StructVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 132, RULE_structVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865;
			variableList();
			State = 866;
			Match(COLON);
			State = 867;
			structSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringDerivedTypeNameContext stringDerivedTypeName() {
			return GetRuleContext<StringDerivedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext stringTypeName() {
			return GetRuleContext<StringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharStringContext charString() {
			return GetRuleContext<CharStringContext>(0);
		}
		public StringTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeDeclarationContext stringTypeDeclaration() {
		StringTypeDeclarationContext _localctx = new StringTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 134, RULE_stringTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			stringDerivedTypeName();
			State = 870;
			Match(COLON);
			State = 871;
			stringTypeName();
			State = 874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 872;
				Match(ASSIGN);
				State = 873;
				charString();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringDerivedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StringDerivedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringDerivedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDerivedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringDerivedTypeNameContext stringDerivedTypeName() {
		StringDerivedTypeNameContext _localctx = new StringDerivedTypeNameContext(Context, State);
		EnterRule(_localctx, 136, RULE_stringDerivedTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringDerivedTypeNameContext stringDerivedTypeName() {
			return GetRuleContext<StringDerivedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public StringTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeAccessContext stringTypeAccess() {
		StringTypeAccessContext _localctx = new StringTypeAccessContext(Context, State);
		EnterRule(_localctx, 138, RULE_stringTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 878;
					namespaceName();
					State = 879;
					Match(DOT);
					}
					} 
				}
				State = 885;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			State = 886;
			stringDerivedTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeNameContext referenceTypeName() {
			return GetRuleContext<ReferenceTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationInitContext referenceSpecificationInit() {
			return GetRuleContext<ReferenceSpecificationInitContext>(0);
		}
		public ReferenceTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeDeclarationContext referenceTypeDeclaration() {
		ReferenceTypeDeclarationContext _localctx = new ReferenceTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 140, RULE_referenceTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			referenceTypeName();
			State = 889;
			Match(COLON);
			State = 890;
			referenceSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ReferenceTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeNameContext referenceTypeName() {
		ReferenceTypeNameContext _localctx = new ReferenceTypeNameContext(Context, State);
		EnterRule(_localctx, 142, RULE_referenceTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationContext referenceSpecification() {
			return GetRuleContext<ReferenceSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public ReferenceSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceSpecificationInitContext referenceSpecificationInit() {
		ReferenceSpecificationInitContext _localctx = new ReferenceSpecificationInitContext(Context, State);
		EnterRule(_localctx, 144, RULE_referenceSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			referenceSpecification();
			State = 897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 895;
				Match(ASSIGN);
				State = 896;
				referenceValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REF_TO() { return GetTokens(stParser.REF_TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF_TO(int i) {
			return GetToken(stParser.REF_TO, i);
		}
		public ReferenceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceSpecificationContext referenceSpecification() {
		ReferenceSpecificationContext _localctx = new ReferenceSpecificationContext(Context, State);
		EnterRule(_localctx, 146, RULE_referenceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 899;
				Match(REF_TO);
				}
				}
				State = 902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==REF_TO );
			State = 904;
			dataTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceAddressContext referenceAddress() {
			return GetRuleContext<ReferenceAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(stParser.NULL, 0); }
		public ReferenceValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceValueContext referenceValue() {
		ReferenceValueContext _localctx = new ReferenceValueContext(Context, State);
		EnterRule(_localctx, 148, RULE_referenceValue);
		try {
			State = 908;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 906;
				referenceAddress();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 907;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(stParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext functionBlockInstanceName() {
			return GetRuleContext<FunctionBlockInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName() {
			return GetRuleContext<ClassInstanceNameContext>(0);
		}
		public ReferenceAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceAddressContext referenceAddress() {
		ReferenceAddressContext _localctx = new ReferenceAddressContext(Context, State);
		EnterRule(_localctx, 150, RULE_referenceAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910;
			Match(REF);
			State = 911;
			Match(LEFT_PAREN);
			State = 915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 912;
				symbolicVariable();
				}
				break;
			case 2:
				{
				State = 913;
				functionBlockInstanceName();
				}
				break;
			case 3:
				{
				State = 914;
				classInstanceName();
				}
				break;
			}
			State = 917;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeNameContext referenceTypeName() {
			return GetRuleContext<ReferenceTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ReferenceTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeAccessContext referenceTypeAccess() {
		ReferenceTypeAccessContext _localctx = new ReferenceTypeAccessContext(Context, State);
		EnterRule(_localctx, 152, RULE_referenceTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 919;
					namespaceName();
					State = 920;
					Match(DOT);
					}
					} 
				}
				State = 926;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			State = 927;
			referenceTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext[] referenceName() {
			return GetRuleContexts<ReferenceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext referenceName(int i) {
			return GetRuleContext<ReferenceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public ReferenceAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceAssignContext referenceAssign() {
		ReferenceAssignContext _localctx = new ReferenceAssignContext(Context, State);
		EnterRule(_localctx, 154, RULE_referenceAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			referenceName();
			State = 930;
			Match(ASSIGN);
			State = 934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 931;
				referenceName();
				}
				break;
			case 2:
				{
				State = 932;
				dereference();
				}
				break;
			case 3:
				{
				State = 933;
				referenceValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ReferenceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceNameContext referenceName() {
		ReferenceNameContext _localctx = new ReferenceNameContext(Context, State);
		EnterRule(_localctx, 156, RULE_referenceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext referenceName() {
			return GetRuleContext<ReferenceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public DereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DereferenceContext dereference() {
		DereferenceContext _localctx = new DereferenceContext(Context, State);
		EnterRule(_localctx, 158, RULE_dereference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			referenceName();
			State = 940;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 939;
					Match(CARET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 942;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_BLOCK() { return GetToken(stParser.FUNCTION_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockNameContext functionBlockName() {
			return GetRuleContext<FunctionBlockNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockBodyContext functionBlockBody() {
			return GetRuleContext<FunctionBlockBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FUNCTION_BLOCK() { return GetToken(stParser.END_FUNCTION_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(stParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockTypeAccessContext functionBlockTypeAccess() {
			return GetRuleContext<FunctionBlockTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		public FunctionBlockDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockDeclarationContext functionBlockDeclaration() {
		FunctionBlockDeclarationContext _localctx = new FunctionBlockDeclarationContext(Context, State);
		EnterRule(_localctx, 160, RULE_functionBlockDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944;
			Match(FUNCTION_BLOCK);
			State = 946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 945;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 948;
			functionBlockName();
			State = 952;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 949;
				usingDirective();
				}
				}
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 955;
				Match(EXTENDS);
				State = 958;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 956;
					functionBlockTypeAccess();
					}
					break;
				case 2:
					{
					State = 957;
					classTypeAccess();
					}
					break;
				}
				}
			}

			State = 964;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 962;
				Match(IMPLEMENTS);
				State = 963;
				interfaceTypeList();
				}
			}

			State = 973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 839L) != 0)) {
				{
				State = 971;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 966;
					ioVarDeclarations();
					}
					break;
				case 2:
					{
					State = 967;
					externalVarDeclarations();
					}
					break;
				case 3:
					{
					State = 968;
					normalVarDeclarations();
					}
					break;
				case 4:
					{
					State = 969;
					tempVarDeclarations();
					}
					break;
				case 5:
					{
					State = 970;
					otherVarDeclarations();
					}
					break;
				}
				}
				State = 975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 976;
				methodDeclaration();
				}
				}
				State = 981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 982;
			functionBlockBody();
			State = 983;
			Match(END_FUNCTION_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FunctionBlockNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockNameContext functionBlockName() {
		FunctionBlockNameContext _localctx = new FunctionBlockNameContext(Context, State);
		EnterRule(_localctx, 162, RULE_functionBlockName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockInstanceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockNameContext functionBlockName() {
			return GetRuleContext<FunctionBlockNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public FunctionBlockInstanceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockInstanceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockInstanceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockInstanceNameContext functionBlockInstanceName() {
		FunctionBlockInstanceNameContext _localctx = new FunctionBlockInstanceNameContext(Context, State);
		EnterRule(_localctx, 164, RULE_functionBlockInstanceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 992;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 987;
					namespaceName();
					State = 988;
					Match(COMMA);
					}
					} 
				}
				State = 994;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			State = 995;
			functionBlockName();
			State = 999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 996;
				Match(CARET);
				}
				}
				State = 1001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockTypeNameContext functionBlockTypeName() {
			return GetRuleContext<FunctionBlockTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public FunctionBlockTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockTypeAccessContext functionBlockTypeAccess() {
		FunctionBlockTypeAccessContext _localctx = new FunctionBlockTypeAccessContext(Context, State);
		EnterRule(_localctx, 166, RULE_functionBlockTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1002;
					namespaceName();
					State = 1003;
					Match(COMMA);
					}
					} 
				}
				State = 1009;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			State = 1010;
			functionBlockTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FunctionBlockTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockTypeNameContext functionBlockTypeName() {
		FunctionBlockTypeNameContext _localctx = new FunctionBlockTypeNameContext(Context, State);
		EnterRule(_localctx, 168, RULE_functionBlockTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FunctionBlockBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockBodyContext functionBlockBody() {
		FunctionBlockBodyContext _localctx = new FunctionBlockBodyContext(Context, State);
		EnterRule(_localctx, 170, RULE_functionBlockBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockVarSpecificationInitContext functionBlockVarSpecificationInit() {
			return GetRuleContext<FunctionBlockVarSpecificationInitContext>(0);
		}
		public FunctionBlockVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockVarDeclarationInitContext functionBlockVarDeclarationInit() {
		FunctionBlockVarDeclarationInitContext _localctx = new FunctionBlockVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 172, RULE_functionBlockVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1016;
			variableList();
			State = 1017;
			Match(COLON);
			State = 1018;
			functionBlockVarSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockVarSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockTypeAccessContext functionBlockTypeAccess() {
			return GetRuleContext<FunctionBlockTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		public FunctionBlockVarSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockVarSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockVarSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockVarSpecificationInitContext functionBlockVarSpecificationInit() {
		FunctionBlockVarSpecificationInitContext _localctx = new FunctionBlockVarSpecificationInitContext(Context, State);
		EnterRule(_localctx, 174, RULE_functionBlockVarSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			functionBlockTypeAccess();
			State = 1023;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1021;
				Match(ASSIGN);
				State = 1022;
				structInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(stParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_METHOD() { return GetToken(stParser.END_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(stParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 176, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1025;
			Match(METHOD);
			State = 1026;
			accessSpecification();
			State = 1028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 1027;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERRIDE) {
				{
				State = 1030;
				Match(OVERRIDE);
				}
			}

			State = 1033;
			methodName();
			State = 1036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1034;
				Match(COLON);
				State = 1035;
				dataTypeAccess();
				}
			}

			State = 1044;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 839L) != 0)) {
				{
				State = 1042;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR_INPUT:
				case VAR_OUTPUT:
				case VAR_IN_OUT:
					{
					State = 1038;
					ioVarDeclarations();
					}
					break;
				case VAR_EXTERNAL:
					{
					State = 1039;
					externalVarDeclarations();
					}
					break;
				case VAR:
					{
					State = 1040;
					normalVarDeclarations();
					}
					break;
				case VAR_TEMP:
					{
					State = 1041;
					tempVarDeclarations();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1047;
			functionBody();
			State = 1048;
			Match(END_METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 178, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1050;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		public DataTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeAccessContext dataTypeAccess() {
		DataTypeAccessContext _localctx = new DataTypeAccessContext(Context, State);
		EnterRule(_localctx, 180, RULE_dataTypeAccess);
		try {
			State = 1054;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
			case REAL:
			case LREAL:
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
			case BOOL:
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
			case TIME:
			case LTIME:
			case DATE:
			case LDATE:
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1052;
				elementaryTypeName();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1053;
				derivedTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeAccessContext simpleTypeAccess() {
			return GetRuleContext<SimpleTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeAccessContext subrangeTypeAccess() {
			return GetRuleContext<SubrangeTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeAccessContext enumTypeAccess() {
			return GetRuleContext<EnumTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeAccessContext arrayTypeAccess() {
			return GetRuleContext<ArrayTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeAccessContext stringTypeAccess() {
			return GetRuleContext<StringTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeAccessContext referenceTypeAccess() {
			return GetRuleContext<ReferenceTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext interfaceTypeAccess() {
			return GetRuleContext<InterfaceTypeAccessContext>(0);
		}
		public DerivedTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTypeAccessContext derivedTypeAccess() {
		DerivedTypeAccessContext _localctx = new DerivedTypeAccessContext(Context, State);
		EnterRule(_localctx, 182, RULE_derivedTypeAccess);
		try {
			State = 1065;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1056;
				simpleTypeAccess();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1057;
				subrangeTypeAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1058;
				enumTypeAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1059;
				arrayTypeAccess();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1060;
				structTypeAccess();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1061;
				stringTypeAccess();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1062;
				classTypeAccess();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1063;
				referenceTypeAccess();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1064;
				interfaceTypeAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectVariableContext directVariable() {
			return GetRuleContext<DirectVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 184, RULE_variable);
		try {
			State = 1069;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIRECT_VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1067;
				directVariable();
				}
				break;
			case THIS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1068;
				symbolicVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolicVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiElementVariableContext multiElementVariable() {
			return GetRuleContext<MultiElementVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(stParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		public SymbolicVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolicVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolicVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolicVariableContext symbolicVariable() {
		SymbolicVariableContext _localctx = new SymbolicVariableContext(Context, State);
		EnterRule(_localctx, 186, RULE_symbolicVariable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1080;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				{
				State = 1071;
				Match(THIS);
				State = 1072;
				Match(COMMA);
				}
				}
				break;
			case 2:
				{
				State = 1076;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1073;
						namespaceName();
						State = 1074;
						Match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1078;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 1084;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 1082;
				variableAccess();
				}
				break;
			case 2:
				{
				State = 1083;
				multiElementVariable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		public VariableAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAccessContext variableAccess() {
		VariableAccessContext _localctx = new VariableAccessContext(Context, State);
		EnterRule(_localctx, 188, RULE_variableAccess);
		try {
			State = 1088;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1086;
				variableName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1087;
				dereference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 190, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1090;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiElementVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptListContext[] subscriptList() {
			return GetRuleContexts<SubscriptListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptListContext subscriptList(int i) {
			return GetRuleContext<SubscriptListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementSelectContext[] structElementSelect() {
			return GetRuleContexts<StructElementSelectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementSelectContext structElementSelect(int i) {
			return GetRuleContext<StructElementSelectContext>(i);
		}
		public MultiElementVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiElementVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiElementVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiElementVariableContext multiElementVariable() {
		MultiElementVariableContext _localctx = new MultiElementVariableContext(Context, State);
		EnterRule(_localctx, 192, RULE_multiElementVariable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			variableAccess();
			State = 1095;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 1095;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LEFT_BRACKET:
						{
						State = 1093;
						subscriptList();
						}
						break;
					case COMMA:
						{
						State = 1094;
						structElementSelect();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1097;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public SubscriptListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptListContext subscriptList() {
		SubscriptListContext _localctx = new SubscriptListContext(Context, State);
		EnterRule(_localctx, 194, RULE_subscriptList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099;
			Match(LEFT_BRACKET);
			State = 1100;
			subscript();
			State = 1105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1101;
				Match(COMMA);
				State = 1102;
				subscript();
				}
				}
				State = 1107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1108;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 196, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1110;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementSelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(stParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementVariableContext structElementVariable() {
			return GetRuleContext<StructElementVariableContext>(0);
		}
		public StructElementSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementSelect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementSelectContext structElementSelect() {
		StructElementSelectContext _localctx = new StructElementSelectContext(Context, State);
		EnterRule(_localctx, 198, RULE_structElementSelect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			Match(COMMA);
			State = 1113;
			structElementVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		public StructElementVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementVariableContext structElementVariable() {
		StructElementVariableContext _localctx = new StructElementVariableContext(Context, State);
		EnterRule(_localctx, 200, RULE_structElementVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115;
			variableAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IoVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDeclarationsContext inputVarDeclarations() {
			return GetRuleContext<InputVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputVarDeclarationsContext outputVarDeclarations() {
			return GetRuleContext<OutputVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationsContext inOutVarDeclarations() {
			return GetRuleContext<InOutVarDeclarationsContext>(0);
		}
		public IoVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ioVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIoVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IoVarDeclarationsContext ioVarDeclarations() {
		IoVarDeclarationsContext _localctx = new IoVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 202, RULE_ioVarDeclarations);
		try {
			State = 1120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_INPUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1117;
				inputVarDeclarations();
				}
				break;
			case VAR_OUTPUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1118;
				outputVarDeclarations();
				}
				break;
			case VAR_IN_OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1119;
				inOutVarDeclarations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_INPUT() { return GetToken(stParser.VAR_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDeclarationContext[] inputVarDeclaration() {
			return GetRuleContexts<InputVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDeclarationContext inputVarDeclaration(int i) {
			return GetRuleContext<InputVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public InputVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVarDeclarationsContext inputVarDeclarations() {
		InputVarDeclarationsContext _localctx = new InputVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 204, RULE_inputVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1122;
			Match(VAR_INPUT);
			State = 1124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1123;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1126;
				inputVarDeclaration();
				State = 1127;
				Match(SEMICOLON);
				}
				}
				State = 1133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1134;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public InputVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVarDeclarationContext inputVarDeclaration() {
		InputVarDeclarationContext _localctx = new InputVarDeclarationContext(Context, State);
		EnterRule(_localctx, 206, RULE_inputVarDeclaration);
		try {
			State = 1138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1136;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1137;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrVarDeclarationContext strVarDeclaration() {
			return GetRuleContext<StrVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationInitContext referenceSpecificationInit() {
			return GetRuleContext<ReferenceSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayVarDeclarationInitContext arrayVarDeclarationInit() {
			return GetRuleContext<ArrayVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructVarDeclarationInitContext structVarDeclarationInit() {
			return GetRuleContext<StructVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockVarDeclarationInitContext functionBlockVarDeclarationInit() {
			return GetRuleContext<FunctionBlockVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceSpecificationInitContext interfaceSpecificationInit() {
			return GetRuleContext<InterfaceSpecificationInitContext>(0);
		}
		public VarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationInitContext varDeclarationInit() {
		VarDeclarationInitContext _localctx = new VarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 208, RULE_varDeclarationInit);
		try {
			State = 1151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1140;
				variableList();
				State = 1141;
				Match(COLON);
				State = 1145;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 1142;
					simpleSpecificationInit();
					}
					break;
				case 2:
					{
					State = 1143;
					strVarDeclaration();
					}
					break;
				case 3:
					{
					State = 1144;
					referenceSpecificationInit();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1147;
				arrayVarDeclarationInit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1148;
				structVarDeclarationInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1149;
				functionBlockVarDeclarationInit();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1150;
				interfaceSpecificationInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext[] variableName() {
			return GetRuleContexts<VariableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName(int i) {
			return GetRuleContext<VariableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public VariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListContext variableList() {
		VariableListContext _localctx = new VariableListContext(Context, State);
		EnterRule(_localctx, 210, RULE_variableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1153;
			variableName();
			State = 1158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1154;
				Match(COMMA);
				State = 1155;
				variableName();
				}
				}
				State = 1160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_OUTPUT() { return GetToken(stParser.VAR_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputVarDeclarationContext[] outputVarDeclaration() {
			return GetRuleContexts<OutputVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputVarDeclarationContext outputVarDeclaration(int i) {
			return GetRuleContext<OutputVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public OutputVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputVarDeclarationsContext outputVarDeclarations() {
		OutputVarDeclarationsContext _localctx = new OutputVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 212, RULE_outputVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1161;
			Match(VAR_OUTPUT);
			State = 1163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1162;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1165;
				outputVarDeclaration();
				State = 1166;
				Match(SEMICOLON);
				}
				}
				State = 1172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1173;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public OutputVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputVarDeclarationContext outputVarDeclaration() {
		OutputVarDeclarationContext _localctx = new OutputVarDeclarationContext(Context, State);
		EnterRule(_localctx, 214, RULE_outputVarDeclaration);
		try {
			State = 1177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1175;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1176;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOutVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_IN_OUT() { return GetToken(stParser.VAR_IN_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationContext[] inOutVarDeclaration() {
			return GetRuleContexts<InOutVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationContext inOutVarDeclaration(int i) {
			return GetRuleContext<InOutVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public InOutVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOutVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOutVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOutVarDeclarationsContext inOutVarDeclarations() {
		InOutVarDeclarationsContext _localctx = new InOutVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 216, RULE_inOutVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1179;
			Match(VAR_IN_OUT);
			State = 1185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1180;
				inOutVarDeclaration();
				State = 1181;
				Match(SEMICOLON);
				}
				}
				State = 1187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1188;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOutVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public InOutVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOutVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOutVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOutVarDeclarationContext inOutVarDeclaration() {
		InOutVarDeclarationContext _localctx = new InOutVarDeclarationContext(Context, State);
		EnterRule(_localctx, 218, RULE_inOutVarDeclaration);
		try {
			State = 1192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1190;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1191;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public NormalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalVarDeclarationsContext normalVarDeclarations() {
		NormalVarDeclarationsContext _localctx = new NormalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 220, RULE_normalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1194;
			Match(VAR);
			State = 1196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1195;
				Match(CONSTANT);
				}
			}

			State = 1199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 15L) != 0)) {
				{
				State = 1198;
				accessSpecification();
				}
			}

			State = 1206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1201;
				varDeclarationInit();
				State = 1202;
				Match(SEMICOLON);
				}
				}
				State = 1208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1209;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RetainVarDeclarationsContext retainVarDeclarations() {
			return GetRuleContext<RetainVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonRetainVarDeclarationsContext nonRetainVarDeclarations() {
			return GetRuleContext<NonRetainVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocPartlyVarDeclarationContext locPartlyVarDeclaration() {
			return GetRuleContext<LocPartlyVarDeclarationContext>(0);
		}
		public OtherVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherVarDeclarationsContext otherVarDeclarations() {
		OtherVarDeclarationsContext _localctx = new OtherVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 222, RULE_otherVarDeclarations);
		try {
			State = 1214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1211;
				retainVarDeclarations();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1212;
				nonRetainVarDeclarations();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1213;
				locPartlyVarDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonRetainVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public NonRetainVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonRetainVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonRetainVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonRetainVarDeclarationsContext nonRetainVarDeclarations() {
		NonRetainVarDeclarationsContext _localctx = new NonRetainVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 224, RULE_nonRetainVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1216;
			Match(VAR);
			State = 1217;
			Match(NON_RETAIN);
			State = 1219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 15L) != 0)) {
				{
				State = 1218;
				accessSpecification();
				}
			}

			State = 1226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1221;
				varDeclarationInit();
				State = 1222;
				Match(SEMICOLON);
				}
				}
				State = 1228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1229;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetainVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public RetainVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retainVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetainVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetainVarDeclarationsContext retainVarDeclarations() {
		RetainVarDeclarationsContext _localctx = new RetainVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 226, RULE_retainVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1231;
			Match(VAR);
			State = 1232;
			Match(RETAIN);
			State = 1234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 15L) != 0)) {
				{
				State = 1233;
				accessSpecification();
				}
			}

			State = 1241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1236;
				varDeclarationInit();
				State = 1237;
				Match(SEMICOLON);
				}
				}
				State = 1243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1244;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationContext[] locVarDeclaration() {
			return GetRuleContexts<LocVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocVarDeclarationContext locVarDeclaration(int i) {
			return GetRuleContext<LocVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public LocVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocVarDeclarationsContext locVarDeclarations() {
		LocVarDeclarationsContext _localctx = new LocVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 228, RULE_locVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246;
			Match(VAR);
			State = 1248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 19L) != 0)) {
				{
				State = 1247;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 19L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==IDENTIFIER) {
				{
				{
				State = 1250;
				locVarDeclaration();
				State = 1251;
				Match(SEMICOLON);
				}
				}
				State = 1257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1258;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocVarSpecificationInitContext locVarSpecificationInit() {
			return GetRuleContext<LocVarSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public LocVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocVarDeclarationContext locVarDeclaration() {
		LocVarDeclarationContext _localctx = new LocVarDeclarationContext(Context, State);
		EnterRule(_localctx, 230, RULE_locVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 1260;
				variableName();
				}
			}

			State = 1263;
			locatedAt();
			State = 1264;
			Match(COLON);
			State = 1265;
			locVarSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_TEMP() { return GetToken(stParser.VAR_TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		public TempVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempVarDeclarationsContext tempVarDeclarations() {
		TempVarDeclarationsContext _localctx = new TempVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 232, RULE_tempVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267;
			Match(VAR_TEMP);
			State = 1273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				{
				State = 1268;
				varDeclarationInit();
				}
				State = 1269;
				Match(SEMICOLON);
				}
				}
				State = 1275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1276;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_EXTERNAL() { return GetToken(stParser.VAR_EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext[] externalDeclaration() {
			return GetRuleContexts<ExternalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext externalDeclaration(int i) {
			return GetRuleContext<ExternalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public ExternalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalVarDeclarationsContext externalVarDeclarations() {
		ExternalVarDeclarationsContext _localctx = new ExternalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 234, RULE_externalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278;
			Match(VAR_EXTERNAL);
			State = 1280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1279;
				Match(CONSTANT);
				}
			}

			State = 1287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1282;
				externalDeclaration();
				State = 1283;
				Match(SEMICOLON);
				}
				}
				State = 1289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1290;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext globalVarName() {
			return GetRuleContext<GlobalVarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockTypeAccessContext functionBlockTypeAccess() {
			return GetRuleContext<FunctionBlockTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeAccessContext referenceTypeAccess() {
			return GetRuleContext<ReferenceTypeAccessContext>(0);
		}
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 236, RULE_externalDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1292;
			globalVarName();
			State = 1293;
			Match(COLON);
			State = 1299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 1294;
				simpleSpecification();
				}
				break;
			case 2:
				{
				State = 1295;
				arraySpecification();
				}
				break;
			case 3:
				{
				State = 1296;
				structTypeAccess();
				}
				break;
			case 4:
				{
				State = 1297;
				functionBlockTypeAccess();
				}
				break;
			case 5:
				{
				State = 1298;
				referenceTypeAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public GlobalVarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarNameContext globalVarName() {
		GlobalVarNameContext _localctx = new GlobalVarNameContext(Context, State);
		EnterRule(_localctx, 238, RULE_globalVarName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_GLOBAL() { return GetToken(stParser.VAR_GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationContext[] globalVarDeclaration() {
			return GetRuleContexts<GlobalVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationContext globalVarDeclaration(int i) {
			return GetRuleContext<GlobalVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		public GlobalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclarationsContext globalVarDeclarations() {
		GlobalVarDeclarationsContext _localctx = new GlobalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 240, RULE_globalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			Match(VAR_GLOBAL);
			State = 1305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==CONSTANT) {
				{
				State = 1304;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==CONSTANT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1307;
				globalVarDeclaration();
				State = 1308;
				Match(SEMICOLON);
				}
				}
				State = 1314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1315;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarSpecificationContext globalVarSpecification() {
			return GetRuleContext<GlobalVarSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocVarSpecificationInitContext locVarSpecificationInit() {
			return GetRuleContext<LocVarSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockTypeAccessContext functionBlockTypeAccess() {
			return GetRuleContext<FunctionBlockTypeAccessContext>(0);
		}
		public GlobalVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclarationContext globalVarDeclaration() {
		GlobalVarDeclarationContext _localctx = new GlobalVarDeclarationContext(Context, State);
		EnterRule(_localctx, 242, RULE_globalVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1317;
			globalVarSpecification();
			State = 1318;
			Match(COLON);
			State = 1321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1319;
				locVarSpecificationInit();
				}
				break;
			case 2:
				{
				State = 1320;
				functionBlockTypeAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext[] globalVarName() {
			return GetRuleContexts<GlobalVarNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext globalVarName(int i) {
			return GetRuleContext<GlobalVarNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		public GlobalVarSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarSpecificationContext globalVarSpecification() {
		GlobalVarSpecificationContext _localctx = new GlobalVarSpecificationContext(Context, State);
		EnterRule(_localctx, 244, RULE_globalVarSpecification);
		int _la;
		try {
			State = 1334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1323;
				globalVarName();
				State = 1328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1324;
					Match(COMMA);
					State = 1325;
					globalVarName();
					}
					}
					State = 1330;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1331;
				globalVarName();
				State = 1332;
				locatedAt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocVarSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SByteStrSpecificationContext sByteStrSpecification() {
			return GetRuleContext<SByteStrSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DByteStrSpecificationContext dByteStrSpecification() {
			return GetRuleContext<DByteStrSpecificationContext>(0);
		}
		public LocVarSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locVarSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocVarSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocVarSpecificationInitContext locVarSpecificationInit() {
		LocVarSpecificationInitContext _localctx = new LocVarSpecificationInitContext(Context, State);
		EnterRule(_localctx, 246, RULE_locVarSpecificationInit);
		try {
			State = 1341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1336;
				simpleSpecificationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1337;
				arraySpecificationInit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1338;
				structSpecificationInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1339;
				sByteStrSpecification();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1340;
				dByteStrSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SByteStrVarDeclContext sByteStrVarDecl() {
			return GetRuleContext<SByteStrVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DByteStrVarDeclarationContext dByteStrVarDeclaration() {
			return GetRuleContext<DByteStrVarDeclarationContext>(0);
		}
		public StrVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrVarDeclarationContext strVarDeclaration() {
		StrVarDeclarationContext _localctx = new StrVarDeclarationContext(Context, State);
		EnterRule(_localctx, 248, RULE_strVarDeclaration);
		try {
			State = 1345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1343;
				sByteStrVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1344;
				dByteStrVarDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SByteStrVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SByteStrSpecificationContext sByteStrSpecification() {
			return GetRuleContext<SByteStrSpecificationContext>(0);
		}
		public SByteStrVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sByteStrVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSByteStrVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SByteStrVarDeclContext sByteStrVarDecl() {
		SByteStrVarDeclContext _localctx = new SByteStrVarDeclContext(Context, State);
		EnterRule(_localctx, 250, RULE_sByteStrVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1347;
			variableList();
			State = 1348;
			Match(COLON);
			State = 1349;
			sByteStrSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SByteStrSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BYTE_STRING() { return GetToken(stParser.SINGLE_BYTE_STRING, 0); }
		public SByteStrSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sByteStrSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSByteStrSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SByteStrSpecificationContext sByteStrSpecification() {
		SByteStrSpecificationContext _localctx = new SByteStrSpecificationContext(Context, State);
		EnterRule(_localctx, 252, RULE_sByteStrSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1351;
			Match(STRING);
			State = 1355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 1352;
				Match(LEFT_BRACKET);
				State = 1353;
				Match(UNSIGNED_INT);
				State = 1354;
				Match(RIGHT_BRACKET);
				}
			}

			State = 1359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1357;
				Match(ASSIGN);
				State = 1358;
				Match(SINGLE_BYTE_STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DByteStrVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DByteStrSpecificationContext dByteStrSpecification() {
			return GetRuleContext<DByteStrSpecificationContext>(0);
		}
		public DByteStrVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dByteStrVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDByteStrVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DByteStrVarDeclarationContext dByteStrVarDeclaration() {
		DByteStrVarDeclarationContext _localctx = new DByteStrVarDeclarationContext(Context, State);
		EnterRule(_localctx, 254, RULE_dByteStrVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1361;
			variableList();
			State = 1362;
			Match(COLON);
			State = 1363;
			dByteStrSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DByteStrSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BYTE_STRING() { return GetToken(stParser.DOUBLE_BYTE_STRING, 0); }
		public DByteStrSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dByteStrSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDByteStrSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DByteStrSpecificationContext dByteStrSpecification() {
		DByteStrSpecificationContext _localctx = new DByteStrSpecificationContext(Context, State);
		EnterRule(_localctx, 256, RULE_dByteStrSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365;
			Match(WSTRING);
			State = 1369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 1366;
				Match(LEFT_BRACKET);
				State = 1367;
				Match(UNSIGNED_INT);
				State = 1368;
				Match(RIGHT_BRACKET);
				}
			}

			State = 1373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1371;
				Match(ASSIGN);
				State = 1372;
				Match(DOUBLE_BYTE_STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocPartlyVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocPartlyVarContext[] locPartlyVar() {
			return GetRuleContexts<LocPartlyVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocPartlyVarContext locPartlyVar(int i) {
			return GetRuleContext<LocPartlyVarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public LocPartlyVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locPartlyVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocPartlyVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocPartlyVarDeclarationContext locPartlyVarDeclaration() {
		LocPartlyVarDeclarationContext _localctx = new LocPartlyVarDeclarationContext(Context, State);
		EnterRule(_localctx, 258, RULE_locPartlyVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			Match(VAR);
			State = 1377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1376;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1379;
				locPartlyVar();
				}
				}
				State = 1384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1385;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocPartlyVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(stParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecificationContext varSpecification() {
			return GetRuleContext<VarSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(stParser.SEMICOLON, 0); }
		public LocPartlyVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locPartlyVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocPartlyVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocPartlyVarContext locPartlyVar() {
		LocPartlyVarContext _localctx = new LocPartlyVarContext(Context, State);
		EnterRule(_localctx, 260, RULE_locPartlyVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1387;
			variableName();
			State = 1388;
			Match(AT);
			State = 1389;
			Match(RELATIVE_ADDRESS);
			State = 1390;
			Match(COLON);
			State = 1391;
			varSpecification();
			State = 1392;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		public VarSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSpecificationContext varSpecification() {
		VarSpecificationContext _localctx = new VarSpecificationContext(Context, State);
		EnterRule(_localctx, 262, RULE_varSpecification);
		int _la;
		try {
			State = 1403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1394;
				simpleSpecification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1395;
				arraySpecification();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1396;
				structTypeAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1397;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==WSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 1398;
					Match(LEFT_BRACKET);
					State = 1399;
					Match(UNSIGNED_INT);
					State = 1400;
					Match(RIGHT_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(stParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FUNCTION() { return GetToken(stParser.END_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 264, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1405;
			Match(FUNCTION);
			State = 1406;
			functionName();
			State = 1409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1407;
				Match(COLON);
				State = 1408;
				dataTypeAccess();
				}
			}

			State = 1414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1411;
				usingDirective();
				}
				}
				State = 1416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 839L) != 0)) {
				{
				State = 1421;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR_INPUT:
				case VAR_OUTPUT:
				case VAR_IN_OUT:
					{
					State = 1417;
					ioVarDeclarations();
					}
					break;
				case VAR_EXTERNAL:
					{
					State = 1418;
					externalVarDeclarations();
					}
					break;
				case VAR:
					{
					State = 1419;
					normalVarDeclarations();
					}
					break;
				case VAR_TEMP:
					{
					State = 1420;
					tempVarDeclarations();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1426;
			functionBody();
			State = 1427;
			Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 266, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1429;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(stParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CLASS() { return GetToken(stParser.END_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(stParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 268, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1431;
			Match(CLASS);
			State = 1433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 1432;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1435;
			classTypeName();
			State = 1439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1436;
				usingDirective();
				}
				}
				State = 1441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1442;
				Match(EXTENDS);
				State = 1443;
				classTypeAccess();
				}
			}

			State = 1448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1446;
				Match(IMPLEMENTS);
				State = 1447;
				interfaceTypeList();
				}
			}

			State = 1455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VAR || _la==VAR_EXTERNAL) {
				{
				State = 1453;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
				case 1:
					{
					State = 1450;
					externalVarDeclarations();
					}
					break;
				case 2:
					{
					State = 1451;
					normalVarDeclarations();
					}
					break;
				case 3:
					{
					State = 1452;
					otherVarDeclarations();
					}
					break;
				}
				}
				State = 1457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 1458;
				methodDeclaration();
				}
				}
				State = 1463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1464;
			Match(END_CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ClassTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeNameContext classTypeName() {
		ClassTypeNameContext _localctx = new ClassTypeNameContext(Context, State);
		EnterRule(_localctx, 270, RULE_classTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ClassTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeAccessContext classTypeAccess() {
		ClassTypeAccessContext _localctx = new ClassTypeAccessContext(Context, State);
		EnterRule(_localctx, 272, RULE_classTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1473;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1468;
					namespaceName();
					State = 1469;
					Match(DOT);
					}
					} 
				}
				State = 1475;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			}
			State = 1476;
			classTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 274, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1478;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public ClassInstanceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceNameContext classInstanceName() {
		ClassInstanceNameContext _localctx = new ClassInstanceNameContext(Context, State);
		EnterRule(_localctx, 276, RULE_classInstanceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1485;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1480;
					namespaceName();
					State = 1481;
					Match(DOT);
					}
					} 
				}
				State = 1487;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			}
			State = 1488;
			className();
			State = 1492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 1489;
				Match(CARET);
				}
				}
				State = 1494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(stParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(stParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(stParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(stParser.INTERNAL, 0); }
		public AccessSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecificationContext accessSpecification() {
		AccessSpecificationContext _localctx = new AccessSpecificationContext(Context, State);
		EnterRule(_localctx, 278, RULE_accessSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1495;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(stParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceNameContext interfaceName() {
			return GetRuleContext<InterfaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_INTERFACE() { return GetToken(stParser.END_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodPrototypeContext[] methodPrototype() {
			return GetRuleContexts<MethodPrototypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodPrototypeContext methodPrototype(int i) {
			return GetRuleContext<MethodPrototypeContext>(i);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 280, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497;
			Match(INTERFACE);
			State = 1498;
			interfaceName();
			State = 1502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1499;
				usingDirective();
				}
				}
				State = 1504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1505;
				Match(EXTENDS);
				State = 1506;
				interfaceTypeList();
				}
			}

			State = 1512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 1509;
				methodPrototype();
				}
				}
				State = 1514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1515;
			Match(END_INTERFACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public InterfaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceNameContext interfaceName() {
		InterfaceNameContext _localctx = new InterfaceNameContext(Context, State);
		EnterRule(_localctx, 282, RULE_interfaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext[] interfaceTypeAccess() {
			return GetRuleContexts<InterfaceTypeAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext interfaceTypeAccess(int i) {
			return GetRuleContext<InterfaceTypeAccessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(stParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(stParser.COLON, i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext interfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 284, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1519;
			interfaceTypeAccess();
			State = 1524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 1520;
				Match(COLON);
				State = 1521;
				interfaceTypeAccess();
				}
				}
				State = 1526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceNameContext interfaceName() {
			return GetRuleContext<InterfaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public InterfaceTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeAccessContext interfaceTypeAccess() {
		InterfaceTypeAccessContext _localctx = new InterfaceTypeAccessContext(Context, State);
		EnterRule(_localctx, 286, RULE_interfaceTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1532;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1527;
					namespaceName();
					State = 1528;
					Match(DOT);
					}
					} 
				}
				State = 1534;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			State = 1535;
			interfaceName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodPrototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(stParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_METHOD() { return GetToken(stParser.END_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		public MethodPrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodPrototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodPrototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodPrototypeContext methodPrototype() {
		MethodPrototypeContext _localctx = new MethodPrototypeContext(Context, State);
		EnterRule(_localctx, 288, RULE_methodPrototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1537;
			Match(METHOD);
			State = 1538;
			methodName();
			State = 1541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1539;
				Match(COLON);
				State = 1540;
				dataTypeAccess();
				}
			}

			State = 1546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1008806316530991104L) != 0)) {
				{
				{
				State = 1543;
				ioVarDeclarations();
				}
				}
				State = 1548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1549;
			Match(END_METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceValueContext interfaceValue() {
			return GetRuleContext<InterfaceValueContext>(0);
		}
		public InterfaceSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceSpecificationInitContext interfaceSpecificationInit() {
		InterfaceSpecificationInitContext _localctx = new InterfaceSpecificationInitContext(Context, State);
		EnterRule(_localctx, 290, RULE_interfaceSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1551;
			variableList();
			State = 1554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1552;
				Match(ASSIGN);
				State = 1553;
				interfaceValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext functionBlockInstanceName() {
			return GetRuleContext<FunctionBlockInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName() {
			return GetRuleContext<ClassInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(stParser.NULL, 0); }
		public InterfaceValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceValueContext interfaceValue() {
		InterfaceValueContext _localctx = new InterfaceValueContext(Context, State);
		EnterRule(_localctx, 292, RULE_interfaceValue);
		try {
			State = 1560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1556;
				symbolicVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1557;
				functionBlockInstanceName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1558;
				classInstanceName();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1559;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 294, RULE_statementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1568;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1563;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DIRECT_VARIABLE || _la==THIS || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 173746946051L) != 0) || _la==IDENTIFIER) {
						{
						State = 1562;
						statement();
						}
					}

					State = 1565;
					Match(SEMICOLON);
					}
					} 
				}
				State = 1570;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogControlStatementContext subprogControlStatement() {
			return GetRuleContext<SubprogControlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 296, RULE_statement);
		try {
			State = 1575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1571;
				assignStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1572;
				subprogControlStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1573;
				selectionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1574;
				loopStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceAssignContext referenceAssign() {
			return GetRuleContext<ReferenceAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentAttemptContext assignmentAttempt() {
			return GetRuleContext<AssignmentAttemptContext>(0);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 298, RULE_assignStatement);
		try {
			State = 1583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1577;
				variable();
				State = 1578;
				Match(ASSIGN);
				State = 1579;
				expression(0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1581;
				referenceAssign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1582;
				assignmentAttempt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentAttemptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTEMPT_ASSIGN() { return GetToken(stParser.ATTEMPT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext[] referenceName() {
			return GetRuleContexts<ReferenceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext referenceName(int i) {
			return GetRuleContext<ReferenceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext[] dereference() {
			return GetRuleContexts<DereferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference(int i) {
			return GetRuleContext<DereferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public AssignmentAttemptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentAttempt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentAttempt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentAttemptContext assignmentAttempt() {
		AssignmentAttemptContext _localctx = new AssignmentAttemptContext(Context, State);
		EnterRule(_localctx, 300, RULE_assignmentAttempt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 1585;
				referenceName();
				}
				break;
			case 2:
				{
				State = 1586;
				dereference();
				}
				break;
			}
			State = 1589;
			Match(ATTEMPT_ASSIGN);
			State = 1593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 1590;
				referenceName();
				}
				break;
			case 2:
				{
				State = 1591;
				dereference();
				}
				break;
			case 3:
				{
				State = 1592;
				referenceValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogControlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(stParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(stParser.RETURN, 0); }
		public SubprogControlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogControlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogControlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogControlStatementContext subprogControlStatement() {
		SubprogControlStatementContext _localctx = new SubprogControlStatementContext(Context, State);
		EnterRule(_localctx, 302, RULE_subprogControlStatement);
		try {
			State = 1601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1595;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1596;
				invocation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1597;
				Match(SUPER);
				State = 1598;
				Match(LEFT_PAREN);
				State = 1599;
				Match(RIGHT_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1600;
				Match(RETURN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionAccessContext functionAccess() {
			return GetRuleContext<FunctionAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext[] parameterAssign() {
			return GetRuleContexts<ParameterAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext parameterAssign(int i) {
			return GetRuleContext<ParameterAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 304, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1603;
			functionAccess();
			State = 1604;
			Match(LEFT_BRACKET);
			State = 1613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 126135967496011292L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 8590999555L) != 0)) {
				{
				State = 1605;
				parameterAssign();
				State = 1610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1606;
					Match(COMMA);
					State = 1607;
					parameterAssign();
					}
					}
					State = 1612;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1615;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public FunctionAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionAccessContext functionAccess() {
		FunctionAccessContext _localctx = new FunctionAccessContext(Context, State);
		EnterRule(_localctx, 306, RULE_functionAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1617;
					namespaceName();
					State = 1618;
					Match(DOT);
					}
					} 
				}
				State = 1624;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			}
			State = 1625;
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 308, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext[] functionBlockInstanceName() {
			return GetRuleContexts<FunctionBlockInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext functionBlockInstanceName(int i) {
			return GetRuleContext<FunctionBlockInstanceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext[] parameterAssign() {
			return GetRuleContexts<ParameterAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext parameterAssign(int i) {
			return GetRuleContext<ParameterAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(stParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext[] classInstanceName() {
			return GetRuleContexts<ClassInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName(int i) {
			return GetRuleContext<ClassInstanceNameContext>(i);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 310, RULE_invocation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 1629;
				functionBlockInstanceName();
				}
				break;
			case 2:
				{
				State = 1632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THIS) {
					{
					State = 1630;
					Match(THIS);
					State = 1631;
					Match(DOT);
					}
				}

				{
				State = 1640;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1636;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
						case 1:
							{
							State = 1634;
							functionBlockInstanceName();
							}
							break;
						case 2:
							{
							State = 1635;
							classInstanceName();
							}
							break;
						}
						State = 1638;
						Match(DOT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1642;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				State = 1644;
				methodName();
				}
				break;
			}
			State = 1648;
			Match(LEFT_PAREN);
			State = 1657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 126135967496011292L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 8590999555L) != 0)) {
				{
				State = 1649;
				parameterAssign();
				State = 1654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1650;
					Match(COMMA);
					State = 1651;
					parameterAssign();
					}
					}
					State = 1656;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1659;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceAssignContext referenceAssign() {
			return GetRuleContext<ReferenceAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OUT() { return GetToken(stParser.ASSIGN_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(stParser.NOT, 0); }
		public ParameterAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterAssignContext parameterAssign() {
		ParameterAssignContext _localctx = new ParameterAssignContext(Context, State);
		EnterRule(_localctx, 312, RULE_parameterAssign);
		int _la;
		try {
			State = 1675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1664;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
				case 1:
					{
					State = 1661;
					variableName();
					State = 1662;
					Match(ASSIGN);
					}
					break;
				}
				State = 1666;
				expression(0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1667;
				referenceAssign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1668;
					Match(NOT);
					}
				}

				State = 1671;
				variableName();
				State = 1672;
				Match(ASSIGN_OUT);
				State = 1673;
				variable();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 314, RULE_selectionStatement);
		try {
			State = 1679;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1677;
				ifStatement();
				}
				break;
			case CASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1678;
				caseStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(stParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(stParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(stParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_IF() { return GetToken(stParser.END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSIF() { return GetTokens(stParser.ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF(int i) {
			return GetToken(stParser.ELSIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(stParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 316, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681;
			Match(IF);
			State = 1682;
			expression(0);
			State = 1683;
			Match(THEN);
			State = 1684;
			statementList();
			State = 1692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 1685;
				Match(ELSIF);
				State = 1686;
				expression(0);
				State = 1687;
				Match(THEN);
				State = 1688;
				statementList();
				}
				}
				State = 1694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1695;
				Match(ELSE);
				State = 1696;
				statementList();
				}
			}

			State = 1699;
			Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(stParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CASE() { return GetToken(stParser.END_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseSelectionContext[] caseSelection() {
			return GetRuleContexts<CaseSelectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseSelectionContext caseSelection(int i) {
			return GetRuleContext<CaseSelectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(stParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 318, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1701;
			Match(CASE);
			State = 1702;
			expression(0);
			State = 1703;
			Match(OF);
			State = 1705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1704;
				caseSelection();
				}
				}
				State = 1707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 126135967496011292L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 8590999555L) != 0) );
			State = 1711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1709;
				Match(ELSE);
				State = 1710;
				statementList();
				}
			}

			State = 1713;
			Match(END_CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseSelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseListContext caseList() {
			return GetRuleContext<CaseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseSelection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseSelectionContext caseSelection() {
		CaseSelectionContext _localctx = new CaseSelectionContext(Context, State);
		EnterRule(_localctx, 320, RULE_caseSelection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1715;
			caseList();
			State = 1716;
			Match(COLON);
			State = 1717;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext[] caseListElement() {
			return GetRuleContexts<CaseListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext caseListElement(int i) {
			return GetRuleContext<CaseListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public CaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListContext caseList() {
		CaseListContext _localctx = new CaseListContext(Context, State);
		EnterRule(_localctx, 322, RULE_caseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1719;
			caseListElement();
			State = 1724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1720;
				Match(COMMA);
				State = 1721;
				caseListElement();
				}
				}
				State = 1726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListElementContext caseListElement() {
		CaseListElementContext _localctx = new CaseListElementContext(Context, State);
		EnterRule(_localctx, 324, RULE_caseListElement);
		try {
			State = 1729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1727;
				subrange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1728;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStatementContext exitStatement() {
			return GetRuleContext<ExitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 326, RULE_loopStatement);
		try {
			State = 1736;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1731;
				forStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1732;
				whileStatement();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1733;
				repeatStatement();
				}
				break;
			case EXIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1734;
				exitStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1735;
				continueStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(stParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ControlVariableContext controlVariable() {
			return GetRuleContext<ControlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForRangeContext forRange() {
			return GetRuleContext<ForRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(stParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FOR() { return GetToken(stParser.END_FOR, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 328, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738;
			Match(FOR);
			State = 1739;
			controlVariable();
			State = 1740;
			Match(ASSIGN);
			State = 1741;
			forRange();
			State = 1742;
			Match(DO);
			State = 1743;
			statementList();
			State = 1744;
			Match(END_FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ControlVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlVariableContext controlVariable() {
		ControlVariableContext _localctx = new ControlVariableContext(Context, State);
		EnterRule(_localctx, 330, RULE_controlVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1746;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(stParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(stParser.BY, 0); }
		public ForRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeContext forRange() {
		ForRangeContext _localctx = new ForRangeContext(Context, State);
		EnterRule(_localctx, 332, RULE_forRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1748;
			expression(0);
			State = 1749;
			Match(TO);
			State = 1750;
			expression(0);
			State = 1753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 1751;
				Match(BY);
				State = 1752;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(stParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(stParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_WHILE() { return GetToken(stParser.END_WHILE, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 334, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			Match(WHILE);
			State = 1756;
			expression(0);
			State = 1757;
			Match(DO);
			State = 1758;
			statementList();
			State = 1759;
			Match(END_WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(stParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(stParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_REPEAT() { return GetToken(stParser.END_REPEAT, 0); }
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 336, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1761;
			Match(REPEAT);
			State = 1762;
			statementList();
			State = 1763;
			Match(UNTIL);
			State = 1764;
			expression(0);
			State = 1765;
			Match(END_REPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableValueContext variableValue() {
			return GetRuleContext<VariableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(stParser.OR, 0); }
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(stParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(stParser.AND, 0); }
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(stParser.POWER, 0); }
		public ExponentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(stParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(stParser.MINUS, 0); }
		public AddSubExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(stParser.XOR, 0); }
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(stParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(stParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(stParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(stParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(stParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(stParser.NOT_EQUAL, 0); }
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		public BracketedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DerefExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		public DerefExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(stParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(stParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(stParser.NOT, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FuncCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultDivModExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(stParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(stParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(stParser.MOD, 0); }
		public MultDivModExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultDivModExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 338;
		EnterRecursionRule(_localctx, 338, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1772;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
				case 1:
					{
					State = 1768;
					literalValue();
					}
					break;
				case 2:
					{
					State = 1769;
					variableValue();
					}
					break;
				case 3:
					{
					State = 1770;
					enumValue();
					}
					break;
				case 4:
					{
					State = 1771;
					referenceValue();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new BracketedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1774;
				Match(LEFT_PAREN);
				State = 1775;
				expression(0);
				State = 1776;
				Match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new FuncCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1778;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new DerefExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1779;
				dereference();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1780;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 16387L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1781;
				expression(8);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1807;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1805;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
					case 1:
						{
						_localctx = new ExponentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1784;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1785;
						Match(POWER);
						State = 1786;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new MultDivModExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1787;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1788;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 13L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1789;
						expression(7);
						}
						break;
					case 3:
						{
						_localctx = new AddSubExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1790;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1791;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1792;
						expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1793;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1794;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 63L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1795;
						expression(5);
						}
						break;
					case 5:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1796;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1797;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==AMPERSAND) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1798;
						expression(4);
						}
						break;
					case 6:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1799;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1800;
						Match(XOR);
						State = 1801;
						expression(3);
						}
						break;
					case 7:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1802;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1803;
						Match(OR);
						State = 1804;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 1809;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(stParser.EXIT, 0); }
		public ExitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStatementContext exitStatement() {
		ExitStatementContext _localctx = new ExitStatementContext(Context, State);
		EnterRule(_localctx, 340, RULE_exitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810;
			Match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(stParser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 342, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitPartAccessContext multibitPartAccess() {
			return GetRuleContext<MultibitPartAccessContext>(0);
		}
		public VariableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableValueContext variableValue() {
		VariableValueContext _localctx = new VariableValueContext(Context, State);
		EnterRule(_localctx, 344, RULE_variableValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1814;
			variable();
			State = 1816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				{
				State = 1815;
				multibitPartAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralContext realLiteral() {
			return GetRuleContext<RealLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeLiteralContext timeLiteral() {
			return GetRuleContext<TimeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsLiteralContext multibitsLiteral() {
			return GetRuleContext<MultibitsLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 346, RULE_literalValue);
		try {
			State = 1824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1818;
				intLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1819;
				realLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1820;
				charLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1821;
				timeLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1822;
				multibitsLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1823;
				boolLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralValueContext intLiteralValue() {
			return GetRuleContext<IntLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public IntLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralContext intLiteral() {
		IntLiteralContext _localctx = new IntLiteralContext(Context, State);
		EnterRule(_localctx, 348, RULE_intLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16711680L) != 0)) {
				{
				State = 1826;
				intTypeName();
				State = 1827;
				Match(HASH);
				}
			}

			State = 1831;
			intLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_INT() { return GetToken(stParser.SIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_INT() { return GetToken(stParser.BINARY_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_INT() { return GetToken(stParser.OCTAL_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INT() { return GetToken(stParser.HEX_INT, 0); }
		public IntLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralValueContext intLiteralValue() {
		IntLiteralValueContext _localctx = new IntLiteralValueContext(Context, State);
		EnterRule(_localctx, 350, RULE_intLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1833;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 31744L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USINT() { return GetToken(stParser.USINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(stParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDINT() { return GetToken(stParser.UDINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULINT() { return GetToken(stParser.ULINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT() { return GetToken(stParser.SINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(stParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DINT() { return GetToken(stParser.DINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINT() { return GetToken(stParser.LINT, 0); }
		public IntTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntTypeNameContext intTypeName() {
		IntTypeNameContext _localctx = new IntTypeNameContext(Context, State);
		EnterRule(_localctx, 352, RULE_intTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1835;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16711680L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsLiteralValueContext multibitsLiteralValue() {
			return GetRuleContext<MultibitsLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsTypeNameContext multibitsTypeName() {
			return GetRuleContext<MultibitsTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public MultibitsLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsLiteralContext multibitsLiteral() {
		MultibitsLiteralContext _localctx = new MultibitsLiteralContext(Context, State);
		EnterRule(_localctx, 354, RULE_multibitsLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) {
				{
				State = 1837;
				multibitsTypeName();
				State = 1838;
				Match(HASH);
				}
			}

			State = 1842;
			multibitsLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_INT() { return GetToken(stParser.BINARY_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_INT() { return GetToken(stParser.OCTAL_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INT() { return GetToken(stParser.HEX_INT, 0); }
		public MultibitsLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsLiteralValueContext multibitsLiteralValue() {
		MultibitsLiteralValueContext _localctx = new MultibitsLiteralValueContext(Context, State);
		EnterRule(_localctx, 356, RULE_multibitsLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1844;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(stParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(stParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DWORD() { return GetToken(stParser.DWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LWORD() { return GetToken(stParser.LWORD, 0); }
		public MultibitsTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsTypeNameContext multibitsTypeName() {
		MultibitsTypeNameContext _localctx = new MultibitsTypeNameContext(Context, State);
		EnterRule(_localctx, 358, RULE_multibitsTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1846;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralValueContext realLiteralValue() {
			return GetRuleContext<RealLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeNameContext realTypeName() {
			return GetRuleContext<RealTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public RealLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralContext realLiteral() {
		RealLiteralContext _localctx = new RealLiteralContext(Context, State);
		EnterRule(_localctx, 360, RULE_realLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REAL || _la==LREAL) {
				{
				State = 1848;
				realTypeName();
				State = 1849;
				Match(HASH);
				}
			}

			State = 1853;
			realLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_VALUE() { return GetToken(stParser.REAL_VALUE, 0); }
		public RealLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralValueContext realLiteralValue() {
		RealLiteralValueContext _localctx = new RealLiteralValueContext(Context, State);
		EnterRule(_localctx, 362, RULE_realLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1855;
			Match(REAL_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(stParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LREAL() { return GetToken(stParser.LREAL, 0); }
		public RealTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealTypeNameContext realTypeName() {
		RealTypeNameContext _localctx = new RealTypeNameContext(Context, State);
		EnterRule(_localctx, 364, RULE_realTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857;
			_la = TokenStream.LA(1);
			if ( !(_la==REAL || _la==LREAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralValueContext boolLiteralValue() {
			return GetRuleContext<BoolLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTypeNameContext boolTypeName() {
			return GetRuleContext<BoolTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 366, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BOOL) {
				{
				State = 1859;
				boolTypeName();
				State = 1860;
				Match(HASH);
				}
			}

			State = 1864;
			boolLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(stParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public BoolLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralValueContext boolLiteralValue() {
		BoolLiteralValueContext _localctx = new BoolLiteralValueContext(Context, State);
		EnterRule(_localctx, 368, RULE_boolLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1866;
			_la = TokenStream.LA(1);
			if ( !(_la==UNSIGNED_INT || _la==BOOLEAN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(stParser.BOOL, 0); }
		public BoolTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolTypeNameContext boolTypeName() {
		BoolTypeNameContext _localctx = new BoolTypeNameContext(Context, State);
		EnterRule(_localctx, 370, RULE_boolTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1868;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharStringContext charString() {
			return GetRuleContext<CharStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharStringTypeNameContext charStringTypeName() {
			return GetRuleContext<CharStringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 372, RULE_charLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 128849018880L) != 0)) {
				{
				State = 1870;
				charStringTypeName();
				State = 1871;
				Match(HASH);
				}
			}

			State = 1875;
			charString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BYTE_STRING() { return GetToken(stParser.SINGLE_BYTE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BYTE_STRING() { return GetToken(stParser.DOUBLE_BYTE_STRING, 0); }
		public CharStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharStringContext charString() {
		CharStringContext _localctx = new CharStringContext(Context, State);
		EnterRule(_localctx, 374, RULE_charString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1877;
			_la = TokenStream.LA(1);
			if ( !(_la==SINGLE_BYTE_STRING || _la==DOUBLE_BYTE_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharStringTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(stParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WCHAR() { return GetToken(stParser.WCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		public CharStringTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charStringTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharStringTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharStringTypeNameContext charStringTypeName() {
		CharStringTypeNameContext _localctx = new CharStringTypeNameContext(Context, State);
		EnterRule(_localctx, 376, RULE_charStringTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1879;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 128849018880L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationLiteralContext durationLiteral() {
			return GetRuleContext<DurationLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayLiteralContext timeOfDayLiteral() {
			return GetRuleContext<TimeOfDayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeLiteralContext dateAndTimeLiteral() {
			return GetRuleContext<DateAndTimeLiteralContext>(0);
		}
		public TimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeLiteralContext timeLiteral() {
		TimeLiteralContext _localctx = new TimeLiteralContext(Context, State);
		EnterRule(_localctx, 378, RULE_timeLiteral);
		try {
			State = 1885;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TIME:
			case LTIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1881;
				durationLiteral();
				}
				break;
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1882;
				timeOfDayLiteral();
				}
				break;
			case DATE:
			case LDATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1883;
				dateLiteral();
				}
				break;
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1884;
				dateAndTimeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DurationLiteralValueContext durationLiteralValue() {
			return GetRuleContext<DurationLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationTypeNameContext durationTypeName() {
			return GetRuleContext<DurationTypeNameContext>(0);
		}
		public DurationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationLiteralContext durationLiteral() {
		DurationLiteralContext _localctx = new DurationLiteralContext(Context, State);
		EnterRule(_localctx, 380, RULE_durationLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1887;
			durationTypeName();
			}
			State = 1888;
			Match(HASH);
			State = 1889;
			durationLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DURATION() { return GetToken(stParser.DURATION, 0); }
		public DurationLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationLiteralValueContext durationLiteralValue() {
		DurationLiteralValueContext _localctx = new DurationLiteralValueContext(Context, State);
		EnterRule(_localctx, 382, RULE_durationLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1891;
			Match(DURATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(stParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTIME() { return GetToken(stParser.LTIME, 0); }
		public DurationTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationTypeNameContext durationTypeName() {
		DurationTypeNameContext _localctx = new DurationTypeNameContext(Context, State);
		EnterRule(_localctx, 384, RULE_durationTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1893;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME || _la==LTIME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayTypeNameContext timeOfDayTypeName() {
			return GetRuleContext<TimeOfDayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayLiteralValueContext timeOfDayLiteralValue() {
			return GetRuleContext<TimeOfDayLiteralValueContext>(0);
		}
		public TimeOfDayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayLiteralContext timeOfDayLiteral() {
		TimeOfDayLiteralContext _localctx = new TimeOfDayLiteralContext(Context, State);
		EnterRule(_localctx, 386, RULE_timeOfDayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1895;
			timeOfDayTypeName();
			State = 1896;
			Match(HASH);
			State = 1897;
			timeOfDayLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCK_TIME() { return GetToken(stParser.CLOCK_TIME, 0); }
		public TimeOfDayLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayLiteralValueContext timeOfDayLiteralValue() {
		TimeOfDayLiteralValueContext _localctx = new TimeOfDayLiteralValueContext(Context, State);
		EnterRule(_localctx, 388, RULE_timeOfDayLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1899;
			Match(CLOCK_TIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_OF_DAY() { return GetToken(stParser.TIME_OF_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTIME_OF_DAY() { return GetToken(stParser.LTIME_OF_DAY, 0); }
		public TimeOfDayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayTypeNameContext timeOfDayTypeName() {
		TimeOfDayTypeNameContext _localctx = new TimeOfDayTypeNameContext(Context, State);
		EnterRule(_localctx, 390, RULE_timeOfDayTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1901;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME_OF_DAY || _la==LTIME_OF_DAY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralValueContext dateLiteralValue() {
			return GetRuleContext<DateLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTypeNameContext dateTypeName() {
			return GetRuleContext<DateTypeNameContext>(0);
		}
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(Context, State);
		EnterRule(_localctx, 392, RULE_dateLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1903;
			dateTypeName();
			}
			State = 1904;
			Match(HASH);
			State = 1905;
			dateLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_VALUE() { return GetToken(stParser.DATE_VALUE, 0); }
		public DateLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralValueContext dateLiteralValue() {
		DateLiteralValueContext _localctx = new DateLiteralValueContext(Context, State);
		EnterRule(_localctx, 394, RULE_dateLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1907;
			Match(DATE_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(stParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDATE() { return GetToken(stParser.LDATE, 0); }
		public DateTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTypeNameContext dateTypeName() {
		DateTypeNameContext _localctx = new DateTypeNameContext(Context, State);
		EnterRule(_localctx, 396, RULE_dateTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1909;
			_la = TokenStream.LA(1);
			if ( !(_la==DATE || _la==LDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeLiteralValueContext dateAndTimeLiteralValue() {
			return GetRuleContext<DateAndTimeLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeTypeNameContext dateAndTimeTypeName() {
			return GetRuleContext<DateAndTimeTypeNameContext>(0);
		}
		public DateAndTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeLiteralContext dateAndTimeLiteral() {
		DateAndTimeLiteralContext _localctx = new DateAndTimeLiteralContext(Context, State);
		EnterRule(_localctx, 398, RULE_dateAndTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1911;
			dateAndTimeTypeName();
			}
			State = 1912;
			Match(HASH);
			State = 1913;
			dateAndTimeLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_TIME_VALUE() { return GetToken(stParser.DATE_TIME_VALUE, 0); }
		public DateAndTimeLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeLiteralValueContext dateAndTimeLiteralValue() {
		DateAndTimeLiteralValueContext _localctx = new DateAndTimeLiteralValueContext(Context, State);
		EnterRule(_localctx, 400, RULE_dateAndTimeLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1915;
			Match(DATE_TIME_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_AND_TIME() { return GetToken(stParser.DATE_AND_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDATE_AND_TIME() { return GetToken(stParser.LDATE_AND_TIME, 0); }
		public DateAndTimeTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeTypeNameContext dateAndTimeTypeName() {
		DateAndTimeTypeNameContext _localctx = new DateAndTimeTypeNameContext(Context, State);
		EnterRule(_localctx, 402, RULE_dateAndTimeTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1917;
			_la = TokenStream.LA(1);
			if ( !(_la==DATE_AND_TIME || _la==LDATE_AND_TIME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_VARIABLE() { return GetToken(stParser.DIRECT_VARIABLE, 0); }
		public DirectVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectVariableContext directVariable() {
		DirectVariableContext _localctx = new DirectVariableContext(Context, State);
		EnterRule(_localctx, 404, RULE_directVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1919;
			Match(DIRECT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 169: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,165,1922,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,1,0,1,0,5,0,409,8,0,10,0,12,0,412,9,0,1,0,1,0,
		1,0,1,0,1,0,3,0,419,8,0,4,0,421,8,0,11,0,12,0,422,1,1,5,1,426,8,1,10,1,
		12,1,429,9,1,1,1,1,1,1,1,3,1,434,8,1,1,2,1,2,3,2,438,8,2,1,2,1,2,5,2,442,
		8,2,10,2,12,2,445,9,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,4,3,456,8,3,
		11,3,12,3,457,1,4,1,4,1,4,5,4,463,8,4,10,4,12,4,466,9,4,1,5,1,5,1,6,1,
		6,1,6,1,6,5,6,474,8,6,10,6,12,6,477,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,5,7,489,8,7,10,7,12,7,492,9,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,
		9,5,9,502,8,9,10,9,12,9,505,9,9,1,9,1,9,1,10,1,10,1,10,1,10,4,10,513,8,
		10,11,10,12,10,514,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,526,
		8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,3,14,537,8,14,1,15,1,
		15,1,16,1,16,3,16,543,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
		553,8,17,1,18,1,18,1,18,5,18,558,8,18,10,18,12,18,561,9,18,1,18,1,18,1,
		19,1,19,1,19,1,19,1,19,3,19,570,8,19,1,19,1,19,3,19,574,8,19,1,20,1,20,
		1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,3,23,587,8,23,1,24,1,24,1,
		24,1,24,1,24,1,24,3,24,595,8,24,1,25,1,25,1,26,1,26,1,26,5,26,602,8,26,
		10,26,12,26,605,9,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,
		1,30,1,30,1,30,3,30,620,8,30,1,30,1,30,3,30,624,8,30,1,31,1,31,1,32,1,
		32,1,32,1,32,5,32,632,8,32,10,32,12,32,635,9,32,1,32,1,32,1,32,3,32,640,
		8,32,1,33,1,33,1,33,3,33,645,8,33,1,34,1,34,1,35,1,35,3,35,651,8,35,1,
		36,1,36,1,36,3,36,656,8,36,1,36,1,36,1,37,1,37,1,37,1,37,5,37,664,8,37,
		10,37,12,37,667,9,37,1,37,1,37,1,37,3,37,672,8,37,1,37,1,37,3,37,676,8,
		37,1,38,1,38,1,38,5,38,681,8,38,10,38,12,38,684,9,38,1,38,1,38,1,39,1,
		39,1,39,1,39,1,40,1,40,1,41,1,41,1,41,3,41,697,8,41,1,42,1,42,1,42,1,42,
		1,42,1,42,5,42,705,8,42,10,42,12,42,708,9,42,1,42,1,42,1,42,1,42,3,42,
		714,8,42,1,43,1,43,1,43,5,43,719,8,43,10,43,12,43,722,9,43,1,43,1,43,1,
		44,1,44,1,44,1,44,5,44,730,8,44,10,44,12,44,733,9,44,1,44,1,44,1,45,1,
		45,1,45,1,45,3,45,741,8,45,1,45,1,45,3,45,745,8,45,1,46,1,46,1,47,1,47,
		1,47,1,47,3,47,753,8,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,5,
		49,764,8,49,10,49,12,49,767,9,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,
		50,1,51,1,51,1,51,1,51,1,52,1,52,1,53,1,53,3,53,785,8,53,1,54,1,54,3,54,
		789,8,54,1,54,1,54,1,54,4,54,794,8,54,11,54,12,54,795,1,54,1,54,1,55,1,
		55,1,55,3,55,803,8,55,3,55,805,8,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
		813,8,55,1,56,1,56,1,57,1,57,1,57,3,57,820,8,57,1,58,1,58,1,59,1,59,1,
		60,1,60,1,60,1,61,1,61,1,61,3,61,832,8,61,1,62,1,62,1,63,1,63,1,63,5,63,
		839,8,63,10,63,12,63,842,9,63,1,63,1,63,1,64,1,64,1,64,1,64,5,64,850,8,
		64,10,64,12,64,853,9,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,
		65,864,8,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,3,67,875,8,67,
		1,68,1,68,1,69,1,69,1,69,5,69,882,8,69,10,69,12,69,885,9,69,1,69,1,69,
		1,70,1,70,1,70,1,70,1,71,1,71,1,72,1,72,1,72,3,72,898,8,72,1,73,4,73,901,
		8,73,11,73,12,73,902,1,73,1,73,1,74,1,74,3,74,909,8,74,1,75,1,75,1,75,
		1,75,1,75,3,75,916,8,75,1,75,1,75,1,76,1,76,1,76,5,76,923,8,76,10,76,12,
		76,926,9,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,3,77,935,8,77,1,78,1,78,
		1,79,1,79,4,79,941,8,79,11,79,12,79,942,1,80,1,80,3,80,947,8,80,1,80,1,
		80,5,80,951,8,80,10,80,12,80,954,9,80,1,80,1,80,1,80,3,80,959,8,80,3,80,
		961,8,80,1,80,1,80,3,80,965,8,80,1,80,1,80,1,80,1,80,1,80,5,80,972,8,80,
		10,80,12,80,975,9,80,1,80,5,80,978,8,80,10,80,12,80,981,9,80,1,80,1,80,
		1,80,1,81,1,81,1,82,1,82,1,82,5,82,991,8,82,10,82,12,82,994,9,82,1,82,
		1,82,5,82,998,8,82,10,82,12,82,1001,9,82,1,83,1,83,1,83,5,83,1006,8,83,
		10,83,12,83,1009,9,83,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,86,1,86,
		1,87,1,87,1,87,3,87,1024,8,87,1,88,1,88,1,88,3,88,1029,8,88,1,88,3,88,
		1032,8,88,1,88,1,88,1,88,3,88,1037,8,88,1,88,1,88,1,88,1,88,5,88,1043,
		8,88,10,88,12,88,1046,9,88,1,88,1,88,1,88,1,89,1,89,1,90,1,90,3,90,1055,
		8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1066,8,91,1,92,
		1,92,3,92,1070,8,92,1,93,1,93,1,93,1,93,1,93,4,93,1077,8,93,11,93,12,93,
		1078,3,93,1081,8,93,1,93,1,93,3,93,1085,8,93,1,94,1,94,3,94,1089,8,94,
		1,95,1,95,1,96,1,96,1,96,4,96,1096,8,96,11,96,12,96,1097,1,97,1,97,1,97,
		1,97,5,97,1104,8,97,10,97,12,97,1107,9,97,1,97,1,97,1,98,1,98,1,99,1,99,
		1,99,1,100,1,100,1,101,1,101,1,101,3,101,1121,8,101,1,102,1,102,3,102,
		1125,8,102,1,102,1,102,1,102,5,102,1130,8,102,10,102,12,102,1133,9,102,
		1,102,1,102,1,103,1,103,3,103,1139,8,103,1,104,1,104,1,104,1,104,1,104,
		3,104,1146,8,104,1,104,1,104,1,104,1,104,3,104,1152,8,104,1,105,1,105,
		1,105,5,105,1157,8,105,10,105,12,105,1160,9,105,1,106,1,106,3,106,1164,
		8,106,1,106,1,106,1,106,5,106,1169,8,106,10,106,12,106,1172,9,106,1,106,
		1,106,1,107,1,107,3,107,1178,8,107,1,108,1,108,1,108,1,108,5,108,1184,
		8,108,10,108,12,108,1187,9,108,1,108,1,108,1,109,1,109,3,109,1193,8,109,
		1,110,1,110,3,110,1197,8,110,1,110,3,110,1200,8,110,1,110,1,110,1,110,
		5,110,1205,8,110,10,110,12,110,1208,9,110,1,110,1,110,1,111,1,111,1,111,
		3,111,1215,8,111,1,112,1,112,1,112,3,112,1220,8,112,1,112,1,112,1,112,
		5,112,1225,8,112,10,112,12,112,1228,9,112,1,112,1,112,1,113,1,113,1,113,
		3,113,1235,8,113,1,113,1,113,1,113,5,113,1240,8,113,10,113,12,113,1243,
		9,113,1,113,1,113,1,114,1,114,3,114,1249,8,114,1,114,1,114,1,114,5,114,
		1254,8,114,10,114,12,114,1257,9,114,1,114,1,114,1,115,3,115,1262,8,115,
		1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,5,116,1272,8,116,10,116,
		12,116,1275,9,116,1,116,1,116,1,117,1,117,3,117,1281,8,117,1,117,1,117,
		1,117,5,117,1286,8,117,10,117,12,117,1289,9,117,1,117,1,117,1,118,1,118,
		1,118,1,118,1,118,1,118,1,118,3,118,1300,8,118,1,119,1,119,1,120,1,120,
		3,120,1306,8,120,1,120,1,120,1,120,5,120,1311,8,120,10,120,12,120,1314,
		9,120,1,120,1,120,1,121,1,121,1,121,1,121,3,121,1322,8,121,1,122,1,122,
		1,122,5,122,1327,8,122,10,122,12,122,1330,9,122,1,122,1,122,1,122,3,122,
		1335,8,122,1,123,1,123,1,123,1,123,1,123,3,123,1342,8,123,1,124,1,124,
		3,124,1346,8,124,1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,126,3,126,
		1356,8,126,1,126,1,126,3,126,1360,8,126,1,127,1,127,1,127,1,127,1,128,
		1,128,1,128,1,128,3,128,1370,8,128,1,128,1,128,3,128,1374,8,128,1,129,
		1,129,3,129,1378,8,129,1,129,5,129,1381,8,129,10,129,12,129,1384,9,129,
		1,129,1,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,131,1,131,1,131,
		1,131,1,131,1,131,1,131,3,131,1402,8,131,3,131,1404,8,131,1,132,1,132,
		1,132,1,132,3,132,1410,8,132,1,132,5,132,1413,8,132,10,132,12,132,1416,
		9,132,1,132,1,132,1,132,1,132,5,132,1422,8,132,10,132,12,132,1425,9,132,
		1,132,1,132,1,132,1,133,1,133,1,134,1,134,3,134,1434,8,134,1,134,1,134,
		5,134,1438,8,134,10,134,12,134,1441,9,134,1,134,1,134,3,134,1445,8,134,
		1,134,1,134,3,134,1449,8,134,1,134,1,134,1,134,5,134,1454,8,134,10,134,
		12,134,1457,9,134,1,134,5,134,1460,8,134,10,134,12,134,1463,9,134,1,134,
		1,134,1,135,1,135,1,136,1,136,1,136,5,136,1472,8,136,10,136,12,136,1475,
		9,136,1,136,1,136,1,137,1,137,1,138,1,138,1,138,5,138,1484,8,138,10,138,
		12,138,1487,9,138,1,138,1,138,5,138,1491,8,138,10,138,12,138,1494,9,138,
		1,139,1,139,1,140,1,140,1,140,5,140,1501,8,140,10,140,12,140,1504,9,140,
		1,140,1,140,3,140,1508,8,140,1,140,5,140,1511,8,140,10,140,12,140,1514,
		9,140,1,140,1,140,1,141,1,141,1,142,1,142,1,142,5,142,1523,8,142,10,142,
		12,142,1526,9,142,1,143,1,143,1,143,5,143,1531,8,143,10,143,12,143,1534,
		9,143,1,143,1,143,1,144,1,144,1,144,1,144,3,144,1542,8,144,1,144,5,144,
		1545,8,144,10,144,12,144,1548,9,144,1,144,1,144,1,145,1,145,1,145,3,145,
		1555,8,145,1,146,1,146,1,146,1,146,3,146,1561,8,146,1,147,3,147,1564,8,
		147,1,147,5,147,1567,8,147,10,147,12,147,1570,9,147,1,148,1,148,1,148,
		1,148,3,148,1576,8,148,1,149,1,149,1,149,1,149,1,149,1,149,3,149,1584,
		8,149,1,150,1,150,3,150,1588,8,150,1,150,1,150,1,150,1,150,3,150,1594,
		8,150,1,151,1,151,1,151,1,151,1,151,1,151,3,151,1602,8,151,1,152,1,152,
		1,152,1,152,1,152,5,152,1609,8,152,10,152,12,152,1612,9,152,3,152,1614,
		8,152,1,152,1,152,1,153,1,153,1,153,5,153,1621,8,153,10,153,12,153,1624,
		9,153,1,153,1,153,1,154,1,154,1,155,1,155,1,155,3,155,1633,8,155,1,155,
		1,155,3,155,1637,8,155,1,155,1,155,4,155,1641,8,155,11,155,12,155,1642,
		1,155,1,155,3,155,1647,8,155,1,155,1,155,1,155,1,155,5,155,1653,8,155,
		10,155,12,155,1656,9,155,3,155,1658,8,155,1,155,1,155,1,156,1,156,1,156,
		3,156,1665,8,156,1,156,1,156,1,156,3,156,1670,8,156,1,156,1,156,1,156,
		1,156,3,156,1676,8,156,1,157,1,157,3,157,1680,8,157,1,158,1,158,1,158,
		1,158,1,158,1,158,1,158,1,158,1,158,5,158,1691,8,158,10,158,12,158,1694,
		9,158,1,158,1,158,3,158,1698,8,158,1,158,1,158,1,159,1,159,1,159,1,159,
		4,159,1706,8,159,11,159,12,159,1707,1,159,1,159,3,159,1712,8,159,1,159,
		1,159,1,160,1,160,1,160,1,160,1,161,1,161,1,161,5,161,1723,8,161,10,161,
		12,161,1726,9,161,1,162,1,162,3,162,1730,8,162,1,163,1,163,1,163,1,163,
		1,163,3,163,1737,8,163,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,165,1,165,1,166,1,166,1,166,1,166,1,166,3,166,1754,8,166,1,167,1,167,
		1,167,1,167,1,167,1,167,1,168,1,168,1,168,1,168,1,168,1,168,1,169,1,169,
		1,169,1,169,1,169,3,169,1773,8,169,1,169,1,169,1,169,1,169,1,169,1,169,
		1,169,1,169,3,169,1783,8,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
		1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
		1,169,1,169,5,169,1806,8,169,10,169,12,169,1809,9,169,1,170,1,170,1,171,
		1,171,1,172,1,172,3,172,1817,8,172,1,173,1,173,1,173,1,173,1,173,1,173,
		3,173,1825,8,173,1,174,1,174,1,174,3,174,1830,8,174,1,174,1,174,1,175,
		1,175,1,176,1,176,1,177,1,177,1,177,3,177,1841,8,177,1,177,1,177,1,178,
		1,178,1,179,1,179,1,180,1,180,1,180,3,180,1852,8,180,1,180,1,180,1,181,
		1,181,1,182,1,182,1,183,1,183,1,183,3,183,1863,8,183,1,183,1,183,1,184,
		1,184,1,185,1,185,1,186,1,186,1,186,3,186,1874,8,186,1,186,1,186,1,187,
		1,187,1,188,1,188,1,189,1,189,1,189,1,189,3,189,1886,8,189,1,190,1,190,
		1,190,1,190,1,191,1,191,1,192,1,192,1,193,1,193,1,193,1,193,1,194,1,194,
		1,195,1,195,1,196,1,196,1,196,1,196,1,197,1,197,1,198,1,198,1,199,1,199,
		1,199,1,199,1,200,1,200,1,201,1,201,1,202,1,202,1,202,0,1,338,203,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
		210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
		246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
		282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
		318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,
		354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,
		390,392,394,396,398,400,402,404,0,25,1,0,33,34,1,0,10,11,2,0,1,1,11,11,
		1,0,71,72,1,0,60,61,2,0,60,61,64,64,2,0,60,60,64,64,1,0,83,86,2,0,127,
		128,141,141,2,0,129,129,131,132,1,0,127,128,1,0,133,138,2,0,139,139,143,
		143,1,0,10,14,1,0,16,23,1,0,11,14,1,0,26,29,1,0,24,25,2,0,11,11,15,15,
		1,0,3,4,1,0,33,36,1,0,37,38,1,0,39,40,1,0,41,42,1,0,43,44,2008,0,420,1,
		0,0,0,2,427,1,0,0,0,4,435,1,0,0,0,6,455,1,0,0,0,8,459,1,0,0,0,10,467,1,
		0,0,0,12,469,1,0,0,0,14,480,1,0,0,0,16,496,1,0,0,0,18,503,1,0,0,0,20,508,
		1,0,0,0,22,525,1,0,0,0,24,527,1,0,0,0,26,531,1,0,0,0,28,533,1,0,0,0,30,
		538,1,0,0,0,32,542,1,0,0,0,34,552,1,0,0,0,36,559,1,0,0,0,38,573,1,0,0,
		0,40,575,1,0,0,0,42,577,1,0,0,0,44,581,1,0,0,0,46,583,1,0,0,0,48,594,1,
		0,0,0,50,596,1,0,0,0,52,603,1,0,0,0,54,608,1,0,0,0,56,612,1,0,0,0,58,614,
		1,0,0,0,60,616,1,0,0,0,62,625,1,0,0,0,64,627,1,0,0,0,66,641,1,0,0,0,68,
		646,1,0,0,0,70,650,1,0,0,0,72,655,1,0,0,0,74,671,1,0,0,0,76,682,1,0,0,
		0,78,687,1,0,0,0,80,691,1,0,0,0,82,693,1,0,0,0,84,713,1,0,0,0,86,720,1,
		0,0,0,88,725,1,0,0,0,90,744,1,0,0,0,92,746,1,0,0,0,94,752,1,0,0,0,96,754,
		1,0,0,0,98,758,1,0,0,0,100,772,1,0,0,0,102,776,1,0,0,0,104,780,1,0,0,0,
		106,784,1,0,0,0,108,786,1,0,0,0,110,799,1,0,0,0,112,814,1,0,0,0,114,816,
		1,0,0,0,116,821,1,0,0,0,118,823,1,0,0,0,120,825,1,0,0,0,122,828,1,0,0,
		0,124,833,1,0,0,0,126,840,1,0,0,0,128,845,1,0,0,0,130,856,1,0,0,0,132,
		865,1,0,0,0,134,869,1,0,0,0,136,876,1,0,0,0,138,883,1,0,0,0,140,888,1,
		0,0,0,142,892,1,0,0,0,144,894,1,0,0,0,146,900,1,0,0,0,148,908,1,0,0,0,
		150,910,1,0,0,0,152,924,1,0,0,0,154,929,1,0,0,0,156,936,1,0,0,0,158,938,
		1,0,0,0,160,944,1,0,0,0,162,985,1,0,0,0,164,992,1,0,0,0,166,1007,1,0,0,
		0,168,1012,1,0,0,0,170,1014,1,0,0,0,172,1016,1,0,0,0,174,1020,1,0,0,0,
		176,1025,1,0,0,0,178,1050,1,0,0,0,180,1054,1,0,0,0,182,1065,1,0,0,0,184,
		1069,1,0,0,0,186,1080,1,0,0,0,188,1088,1,0,0,0,190,1090,1,0,0,0,192,1092,
		1,0,0,0,194,1099,1,0,0,0,196,1110,1,0,0,0,198,1112,1,0,0,0,200,1115,1,
		0,0,0,202,1120,1,0,0,0,204,1122,1,0,0,0,206,1138,1,0,0,0,208,1151,1,0,
		0,0,210,1153,1,0,0,0,212,1161,1,0,0,0,214,1177,1,0,0,0,216,1179,1,0,0,
		0,218,1192,1,0,0,0,220,1194,1,0,0,0,222,1214,1,0,0,0,224,1216,1,0,0,0,
		226,1231,1,0,0,0,228,1246,1,0,0,0,230,1261,1,0,0,0,232,1267,1,0,0,0,234,
		1278,1,0,0,0,236,1292,1,0,0,0,238,1301,1,0,0,0,240,1303,1,0,0,0,242,1317,
		1,0,0,0,244,1334,1,0,0,0,246,1341,1,0,0,0,248,1345,1,0,0,0,250,1347,1,
		0,0,0,252,1351,1,0,0,0,254,1361,1,0,0,0,256,1365,1,0,0,0,258,1375,1,0,
		0,0,260,1387,1,0,0,0,262,1403,1,0,0,0,264,1405,1,0,0,0,266,1429,1,0,0,
		0,268,1431,1,0,0,0,270,1466,1,0,0,0,272,1473,1,0,0,0,274,1478,1,0,0,0,
		276,1485,1,0,0,0,278,1495,1,0,0,0,280,1497,1,0,0,0,282,1517,1,0,0,0,284,
		1519,1,0,0,0,286,1532,1,0,0,0,288,1537,1,0,0,0,290,1551,1,0,0,0,292,1560,
		1,0,0,0,294,1568,1,0,0,0,296,1575,1,0,0,0,298,1583,1,0,0,0,300,1587,1,
		0,0,0,302,1601,1,0,0,0,304,1603,1,0,0,0,306,1622,1,0,0,0,308,1627,1,0,
		0,0,310,1646,1,0,0,0,312,1675,1,0,0,0,314,1679,1,0,0,0,316,1681,1,0,0,
		0,318,1701,1,0,0,0,320,1715,1,0,0,0,322,1719,1,0,0,0,324,1729,1,0,0,0,
		326,1736,1,0,0,0,328,1738,1,0,0,0,330,1746,1,0,0,0,332,1748,1,0,0,0,334,
		1755,1,0,0,0,336,1761,1,0,0,0,338,1782,1,0,0,0,340,1810,1,0,0,0,342,1812,
		1,0,0,0,344,1814,1,0,0,0,346,1824,1,0,0,0,348,1829,1,0,0,0,350,1833,1,
		0,0,0,352,1835,1,0,0,0,354,1840,1,0,0,0,356,1844,1,0,0,0,358,1846,1,0,
		0,0,360,1851,1,0,0,0,362,1855,1,0,0,0,364,1857,1,0,0,0,366,1862,1,0,0,
		0,368,1866,1,0,0,0,370,1868,1,0,0,0,372,1873,1,0,0,0,374,1877,1,0,0,0,
		376,1879,1,0,0,0,378,1885,1,0,0,0,380,1887,1,0,0,0,382,1891,1,0,0,0,384,
		1893,1,0,0,0,386,1895,1,0,0,0,388,1899,1,0,0,0,390,1901,1,0,0,0,392,1903,
		1,0,0,0,394,1907,1,0,0,0,396,1909,1,0,0,0,398,1911,1,0,0,0,400,1915,1,
		0,0,0,402,1917,1,0,0,0,404,1919,1,0,0,0,406,421,3,2,1,0,407,409,3,12,6,
		0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,
		418,1,0,0,0,412,410,1,0,0,0,413,419,3,4,2,0,414,419,3,240,120,0,415,419,
		3,20,10,0,416,419,3,268,134,0,417,419,3,280,140,0,418,413,1,0,0,0,418,
		414,1,0,0,0,418,415,1,0,0,0,418,416,1,0,0,0,418,417,1,0,0,0,419,421,1,
		0,0,0,420,406,1,0,0,0,420,410,1,0,0,0,421,422,1,0,0,0,422,420,1,0,0,0,
		422,423,1,0,0,0,423,1,1,0,0,0,424,426,3,12,6,0,425,424,1,0,0,0,426,429,
		1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,433,1,0,0,0,429,427,1,0,0,
		0,430,434,3,264,132,0,431,434,3,160,80,0,432,434,3,14,7,0,433,430,1,0,
		0,0,433,431,1,0,0,0,433,432,1,0,0,0,434,3,1,0,0,0,435,437,5,105,0,0,436,
		438,5,86,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,443,3,
		8,4,0,440,442,3,12,6,0,441,440,1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,
		443,444,1,0,0,0,444,446,1,0,0,0,445,443,1,0,0,0,446,447,3,6,3,0,447,448,
		5,106,0,0,448,5,1,0,0,0,449,456,3,20,10,0,450,456,3,264,132,0,451,456,
		3,160,80,0,452,456,3,268,134,0,453,456,3,280,140,0,454,456,3,4,2,0,455,
		449,1,0,0,0,455,450,1,0,0,0,455,451,1,0,0,0,455,452,1,0,0,0,455,453,1,
		0,0,0,455,454,1,0,0,0,456,457,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,
		458,7,1,0,0,0,459,464,3,10,5,0,460,461,5,154,0,0,461,463,3,10,5,0,462,
		460,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,9,1,0,
		0,0,466,464,1,0,0,0,467,468,5,160,0,0,468,11,1,0,0,0,469,470,5,107,0,0,
		470,475,3,8,4,0,471,472,5,151,0,0,472,474,3,8,4,0,473,471,1,0,0,0,474,
		477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,475,1,
		0,0,0,478,479,5,153,0,0,479,13,1,0,0,0,480,481,5,89,0,0,481,490,3,16,8,
		0,482,489,3,202,101,0,483,489,3,234,117,0,484,489,3,220,110,0,485,489,
		3,232,116,0,486,489,3,222,111,0,487,489,3,228,114,0,488,482,1,0,0,0,488,
		483,1,0,0,0,488,484,1,0,0,0,488,485,1,0,0,0,488,486,1,0,0,0,488,487,1,
		0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,493,1,0,0,0,
		492,490,1,0,0,0,493,494,3,294,147,0,494,495,5,90,0,0,495,15,1,0,0,0,496,
		497,5,160,0,0,497,17,1,0,0,0,498,499,3,10,5,0,499,500,5,154,0,0,500,502,
		1,0,0,0,501,498,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,
		0,504,506,1,0,0,0,505,503,1,0,0,0,506,507,3,16,8,0,507,19,1,0,0,0,508,
		512,5,45,0,0,509,510,3,22,11,0,510,511,5,153,0,0,511,513,1,0,0,0,512,509,
		1,0,0,0,513,514,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,
		0,516,517,5,46,0,0,517,21,1,0,0,0,518,526,3,24,12,0,519,526,3,42,21,0,
		520,526,3,60,30,0,521,526,3,78,39,0,522,526,3,102,51,0,523,526,3,134,67,
		0,524,526,3,140,70,0,525,518,1,0,0,0,525,519,1,0,0,0,525,520,1,0,0,0,525,
		521,1,0,0,0,525,522,1,0,0,0,525,523,1,0,0,0,525,524,1,0,0,0,526,23,1,0,
		0,0,527,528,3,26,13,0,528,529,5,152,0,0,529,530,3,28,14,0,530,25,1,0,0,
		0,531,532,5,160,0,0,532,27,1,0,0,0,533,536,3,32,16,0,534,535,5,144,0,0,
		535,537,3,30,15,0,536,534,1,0,0,0,536,537,1,0,0,0,537,29,1,0,0,0,538,539,
		3,338,169,0,539,31,1,0,0,0,540,543,3,34,17,0,541,543,3,36,18,0,542,540,
		1,0,0,0,542,541,1,0,0,0,543,33,1,0,0,0,544,553,3,352,176,0,545,553,3,364,
		182,0,546,553,3,370,185,0,547,553,3,358,179,0,548,553,3,38,19,0,549,553,
		3,396,198,0,550,553,3,402,201,0,551,553,3,384,192,0,552,544,1,0,0,0,552,
		545,1,0,0,0,552,546,1,0,0,0,552,547,1,0,0,0,552,548,1,0,0,0,552,549,1,
		0,0,0,552,550,1,0,0,0,552,551,1,0,0,0,553,35,1,0,0,0,554,555,3,10,5,0,
		555,556,5,154,0,0,556,558,1,0,0,0,557,554,1,0,0,0,558,561,1,0,0,0,559,
		557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,559,1,0,0,0,562,563,3,
		26,13,0,563,37,1,0,0,0,564,569,7,0,0,0,565,566,5,149,0,0,566,567,3,40,
		20,0,567,568,5,150,0,0,568,570,1,0,0,0,569,565,1,0,0,0,569,570,1,0,0,0,
		570,574,1,0,0,0,571,574,5,35,0,0,572,574,5,36,0,0,573,564,1,0,0,0,573,
		571,1,0,0,0,573,572,1,0,0,0,574,39,1,0,0,0,575,576,5,11,0,0,576,41,1,0,
		0,0,577,578,3,44,22,0,578,579,5,152,0,0,579,580,3,46,23,0,580,43,1,0,0,
		0,581,582,5,160,0,0,582,45,1,0,0,0,583,586,3,48,24,0,584,585,5,144,0,0,
		585,587,3,50,25,0,586,584,1,0,0,0,586,587,1,0,0,0,587,47,1,0,0,0,588,589,
		3,352,176,0,589,590,5,147,0,0,590,591,3,54,27,0,591,592,5,148,0,0,592,
		595,1,0,0,0,593,595,3,52,26,0,594,588,1,0,0,0,594,593,1,0,0,0,595,49,1,
		0,0,0,596,597,7,1,0,0,597,51,1,0,0,0,598,599,3,10,5,0,599,600,5,154,0,
		0,600,602,1,0,0,0,601,598,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,
		604,1,0,0,0,604,606,1,0,0,0,605,603,1,0,0,0,606,607,3,44,22,0,607,53,1,
		0,0,0,608,609,3,56,28,0,609,610,5,155,0,0,610,611,3,58,29,0,611,55,1,0,
		0,0,612,613,3,338,169,0,613,57,1,0,0,0,614,615,3,338,169,0,615,59,1,0,
		0,0,616,617,3,62,31,0,617,623,5,152,0,0,618,620,3,34,17,0,619,618,1,0,
		0,0,619,620,1,0,0,0,620,621,1,0,0,0,621,624,3,64,32,0,622,624,3,74,37,
		0,623,619,1,0,0,0,623,622,1,0,0,0,624,61,1,0,0,0,625,626,5,160,0,0,626,
		63,1,0,0,0,627,628,5,147,0,0,628,633,3,66,33,0,629,630,5,151,0,0,630,632,
		3,66,33,0,631,629,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,
		0,0,634,636,1,0,0,0,635,633,1,0,0,0,636,639,5,148,0,0,637,638,5,144,0,
		0,638,640,3,72,36,0,639,637,1,0,0,0,639,640,1,0,0,0,640,65,1,0,0,0,641,
		644,3,68,34,0,642,643,5,144,0,0,643,645,3,70,35,0,644,642,1,0,0,0,644,
		645,1,0,0,0,645,67,1,0,0,0,646,647,5,160,0,0,647,69,1,0,0,0,648,651,3,
		348,174,0,649,651,3,338,169,0,650,648,1,0,0,0,650,649,1,0,0,0,651,71,1,
		0,0,0,652,653,3,62,31,0,653,654,5,156,0,0,654,656,1,0,0,0,655,652,1,0,
		0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,658,3,68,34,0,658,73,1,0,0,0,659,
		660,5,147,0,0,660,665,3,68,34,0,661,662,5,151,0,0,662,664,3,68,34,0,663,
		661,1,0,0,0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,668,1,
		0,0,0,667,665,1,0,0,0,668,669,5,148,0,0,669,672,1,0,0,0,670,672,3,76,38,
		0,671,659,1,0,0,0,671,670,1,0,0,0,672,675,1,0,0,0,673,674,5,144,0,0,674,
		676,3,72,36,0,675,673,1,0,0,0,675,676,1,0,0,0,676,75,1,0,0,0,677,678,3,
		10,5,0,678,679,5,154,0,0,679,681,1,0,0,0,680,677,1,0,0,0,681,684,1,0,0,
		0,682,680,1,0,0,0,682,683,1,0,0,0,683,685,1,0,0,0,684,682,1,0,0,0,685,
		686,3,62,31,0,686,77,1,0,0,0,687,688,3,80,40,0,688,689,5,152,0,0,689,690,
		3,82,41,0,690,79,1,0,0,0,691,692,5,160,0,0,692,81,1,0,0,0,693,696,3,84,
		42,0,694,695,5,144,0,0,695,697,3,88,44,0,696,694,1,0,0,0,696,697,1,0,0,
		0,697,83,1,0,0,0,698,714,3,86,43,0,699,700,5,47,0,0,700,701,5,149,0,0,
		701,706,3,54,27,0,702,703,5,151,0,0,703,705,3,54,27,0,704,702,1,0,0,0,
		705,708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,709,1,0,0,0,708,706,
		1,0,0,0,709,710,5,150,0,0,710,711,5,48,0,0,711,712,3,180,90,0,712,714,
		1,0,0,0,713,698,1,0,0,0,713,699,1,0,0,0,714,85,1,0,0,0,715,716,3,10,5,
		0,716,717,5,154,0,0,717,719,1,0,0,0,718,715,1,0,0,0,719,722,1,0,0,0,720,
		718,1,0,0,0,720,721,1,0,0,0,721,723,1,0,0,0,722,720,1,0,0,0,723,724,3,
		80,40,0,724,87,1,0,0,0,725,726,5,149,0,0,726,731,3,90,45,0,727,728,5,151,
		0,0,728,730,3,90,45,0,729,727,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,
		731,732,1,0,0,0,732,734,1,0,0,0,733,731,1,0,0,0,734,735,5,150,0,0,735,
		89,1,0,0,0,736,745,3,94,47,0,737,738,3,92,46,0,738,740,5,147,0,0,739,741,
		3,94,47,0,740,739,1,0,0,0,740,741,1,0,0,0,741,742,1,0,0,0,742,743,5,148,
		0,0,743,745,1,0,0,0,744,736,1,0,0,0,744,737,1,0,0,0,745,91,1,0,0,0,746,
		747,5,11,0,0,747,93,1,0,0,0,748,753,3,338,169,0,749,753,3,72,36,0,750,
		753,3,128,64,0,751,753,3,88,44,0,752,748,1,0,0,0,752,749,1,0,0,0,752,750,
		1,0,0,0,752,751,1,0,0,0,753,95,1,0,0,0,754,755,3,210,105,0,755,756,5,152,
		0,0,756,757,3,98,49,0,757,97,1,0,0,0,758,759,5,47,0,0,759,760,5,149,0,
		0,760,765,5,129,0,0,761,762,5,151,0,0,762,764,5,129,0,0,763,761,1,0,0,
		0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,768,1,0,0,0,767,
		765,1,0,0,0,768,769,5,150,0,0,769,770,5,48,0,0,770,771,3,180,90,0,771,
		99,1,0,0,0,772,773,3,210,105,0,773,774,5,152,0,0,774,775,3,82,41,0,775,
		101,1,0,0,0,776,777,3,104,52,0,777,778,5,152,0,0,778,779,3,106,53,0,779,
		103,1,0,0,0,780,781,5,160,0,0,781,105,1,0,0,0,782,785,3,108,54,0,783,785,
		3,122,61,0,784,782,1,0,0,0,784,783,1,0,0,0,785,107,1,0,0,0,786,788,5,49,
		0,0,787,789,5,50,0,0,788,787,1,0,0,0,788,789,1,0,0,0,789,793,1,0,0,0,790,
		791,3,110,55,0,791,792,5,153,0,0,792,794,1,0,0,0,793,790,1,0,0,0,794,795,
		1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,797,1,0,0,0,797,798,5,51,0,
		0,798,109,1,0,0,0,799,804,3,112,56,0,800,802,3,114,57,0,801,803,3,120,
		60,0,802,801,1,0,0,0,802,803,1,0,0,0,803,805,1,0,0,0,804,800,1,0,0,0,804,
		805,1,0,0,0,805,806,1,0,0,0,806,812,5,152,0,0,807,813,3,28,14,0,808,813,
		3,46,23,0,809,813,3,74,37,0,810,813,3,82,41,0,811,813,3,122,61,0,812,807,
		1,0,0,0,812,808,1,0,0,0,812,809,1,0,0,0,812,810,1,0,0,0,812,811,1,0,0,
		0,813,111,1,0,0,0,814,815,5,160,0,0,815,113,1,0,0,0,816,819,5,52,0,0,817,
		820,3,116,58,0,818,820,3,118,59,0,819,817,1,0,0,0,819,818,1,0,0,0,820,
		115,1,0,0,0,821,822,5,1,0,0,822,117,1,0,0,0,823,824,5,2,0,0,824,119,1,
		0,0,0,825,826,5,154,0,0,826,827,7,2,0,0,827,121,1,0,0,0,828,831,3,124,
		62,0,829,830,5,144,0,0,830,832,3,128,64,0,831,829,1,0,0,0,831,832,1,0,
		0,0,832,123,1,0,0,0,833,834,3,126,63,0,834,125,1,0,0,0,835,836,3,10,5,
		0,836,837,5,154,0,0,837,839,1,0,0,0,838,835,1,0,0,0,839,842,1,0,0,0,840,
		838,1,0,0,0,840,841,1,0,0,0,841,843,1,0,0,0,842,840,1,0,0,0,843,844,3,
		104,52,0,844,127,1,0,0,0,845,846,5,147,0,0,846,851,3,130,65,0,847,848,
		5,151,0,0,848,850,3,130,65,0,849,847,1,0,0,0,850,853,1,0,0,0,851,849,1,
		0,0,0,851,852,1,0,0,0,852,854,1,0,0,0,853,851,1,0,0,0,854,855,5,148,0,
		0,855,129,1,0,0,0,856,857,3,112,56,0,857,863,5,144,0,0,858,864,3,338,169,
		0,859,864,3,72,36,0,860,864,3,88,44,0,861,864,3,128,64,0,862,864,3,148,
		74,0,863,858,1,0,0,0,863,859,1,0,0,0,863,860,1,0,0,0,863,861,1,0,0,0,863,
		862,1,0,0,0,864,131,1,0,0,0,865,866,3,210,105,0,866,867,5,152,0,0,867,
		868,3,122,61,0,868,133,1,0,0,0,869,870,3,136,68,0,870,871,5,152,0,0,871,
		874,3,38,19,0,872,873,5,144,0,0,873,875,3,374,187,0,874,872,1,0,0,0,874,
		875,1,0,0,0,875,135,1,0,0,0,876,877,5,160,0,0,877,137,1,0,0,0,878,879,
		3,10,5,0,879,880,5,154,0,0,880,882,1,0,0,0,881,878,1,0,0,0,882,885,1,0,
		0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,886,1,0,0,0,885,883,1,0,0,0,886,
		887,3,136,68,0,887,139,1,0,0,0,888,889,3,142,71,0,889,890,5,152,0,0,890,
		891,3,144,72,0,891,141,1,0,0,0,892,893,5,160,0,0,893,143,1,0,0,0,894,897,
		3,146,73,0,895,896,5,144,0,0,896,898,3,148,74,0,897,895,1,0,0,0,897,898,
		1,0,0,0,898,145,1,0,0,0,899,901,5,53,0,0,900,899,1,0,0,0,901,902,1,0,0,
		0,902,900,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,905,3,180,90,0,905,
		147,1,0,0,0,906,909,3,150,75,0,907,909,5,55,0,0,908,906,1,0,0,0,908,907,
		1,0,0,0,909,149,1,0,0,0,910,911,5,54,0,0,911,915,5,147,0,0,912,916,3,186,
		93,0,913,916,3,164,82,0,914,916,3,276,138,0,915,912,1,0,0,0,915,913,1,
		0,0,0,915,914,1,0,0,0,916,917,1,0,0,0,917,918,5,148,0,0,918,151,1,0,0,
		0,919,920,3,10,5,0,920,921,5,154,0,0,921,923,1,0,0,0,922,919,1,0,0,0,923,
		926,1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,0,925,927,1,0,0,0,926,924,1,
		0,0,0,927,928,3,142,71,0,928,153,1,0,0,0,929,930,3,156,78,0,930,934,5,
		144,0,0,931,935,3,156,78,0,932,935,3,158,79,0,933,935,3,148,74,0,934,931,
		1,0,0,0,934,932,1,0,0,0,934,933,1,0,0,0,935,155,1,0,0,0,936,937,5,160,
		0,0,937,157,1,0,0,0,938,940,3,156,78,0,939,941,5,157,0,0,940,939,1,0,0,
		0,941,942,1,0,0,0,942,940,1,0,0,0,942,943,1,0,0,0,943,159,1,0,0,0,944,
		946,5,70,0,0,945,947,7,3,0,0,946,945,1,0,0,0,946,947,1,0,0,0,947,948,1,
		0,0,0,948,952,3,162,81,0,949,951,3,12,6,0,950,949,1,0,0,0,951,954,1,0,
		0,0,952,950,1,0,0,0,952,953,1,0,0,0,953,960,1,0,0,0,954,952,1,0,0,0,955,
		958,5,73,0,0,956,959,3,166,83,0,957,959,3,272,136,0,958,956,1,0,0,0,958,
		957,1,0,0,0,959,961,1,0,0,0,960,955,1,0,0,0,960,961,1,0,0,0,961,964,1,
		0,0,0,962,963,5,74,0,0,963,965,3,284,142,0,964,962,1,0,0,0,964,965,1,0,
		0,0,965,973,1,0,0,0,966,972,3,202,101,0,967,972,3,234,117,0,968,972,3,
		220,110,0,969,972,3,232,116,0,970,972,3,222,111,0,971,966,1,0,0,0,971,
		967,1,0,0,0,971,968,1,0,0,0,971,969,1,0,0,0,971,970,1,0,0,0,972,975,1,
		0,0,0,973,971,1,0,0,0,973,974,1,0,0,0,974,979,1,0,0,0,975,973,1,0,0,0,
		976,978,3,176,88,0,977,976,1,0,0,0,978,981,1,0,0,0,979,977,1,0,0,0,979,
		980,1,0,0,0,980,982,1,0,0,0,981,979,1,0,0,0,982,983,3,170,85,0,983,984,
		5,75,0,0,984,161,1,0,0,0,985,986,5,160,0,0,986,163,1,0,0,0,987,988,3,10,
		5,0,988,989,5,151,0,0,989,991,1,0,0,0,990,987,1,0,0,0,991,994,1,0,0,0,
		992,990,1,0,0,0,992,993,1,0,0,0,993,995,1,0,0,0,994,992,1,0,0,0,995,999,
		3,162,81,0,996,998,5,157,0,0,997,996,1,0,0,0,998,1001,1,0,0,0,999,997,
		1,0,0,0,999,1000,1,0,0,0,1000,165,1,0,0,0,1001,999,1,0,0,0,1002,1003,3,
		10,5,0,1003,1004,5,151,0,0,1004,1006,1,0,0,0,1005,1002,1,0,0,0,1006,1009,
		1,0,0,0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,1010,1,0,0,0,1009,1007,
		1,0,0,0,1010,1011,3,168,84,0,1011,167,1,0,0,0,1012,1013,5,160,0,0,1013,
		169,1,0,0,0,1014,1015,3,294,147,0,1015,171,1,0,0,0,1016,1017,3,210,105,
		0,1017,1018,5,152,0,0,1018,1019,3,174,87,0,1019,173,1,0,0,0,1020,1023,
		3,166,83,0,1021,1022,5,144,0,0,1022,1024,3,128,64,0,1023,1021,1,0,0,0,
		1023,1024,1,0,0,0,1024,175,1,0,0,0,1025,1026,5,76,0,0,1026,1028,3,278,
		139,0,1027,1029,7,3,0,0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,1031,
		1,0,0,0,1030,1032,5,77,0,0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1033,
		1,0,0,0,1033,1036,3,178,89,0,1034,1035,5,152,0,0,1035,1037,3,180,90,0,
		1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1044,1,0,0,0,1038,1043,3,202,
		101,0,1039,1043,3,234,117,0,1040,1043,3,220,110,0,1041,1043,3,232,116,
		0,1042,1038,1,0,0,0,1042,1039,1,0,0,0,1042,1040,1,0,0,0,1042,1041,1,0,
		0,0,1043,1046,1,0,0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,1047,1,
		0,0,0,1046,1044,1,0,0,0,1047,1048,3,266,133,0,1048,1049,5,78,0,0,1049,
		177,1,0,0,0,1050,1051,5,160,0,0,1051,179,1,0,0,0,1052,1055,3,34,17,0,1053,
		1055,3,182,91,0,1054,1052,1,0,0,0,1054,1053,1,0,0,0,1055,181,1,0,0,0,1056,
		1066,3,36,18,0,1057,1066,3,52,26,0,1058,1066,3,76,38,0,1059,1066,3,86,
		43,0,1060,1066,3,126,63,0,1061,1066,3,138,69,0,1062,1066,3,272,136,0,1063,
		1066,3,152,76,0,1064,1066,3,286,143,0,1065,1056,1,0,0,0,1065,1057,1,0,
		0,0,1065,1058,1,0,0,0,1065,1059,1,0,0,0,1065,1060,1,0,0,0,1065,1061,1,
		0,0,0,1065,1062,1,0,0,0,1065,1063,1,0,0,0,1065,1064,1,0,0,0,1066,183,1,
		0,0,0,1067,1070,3,404,202,0,1068,1070,3,186,93,0,1069,1067,1,0,0,0,1069,
		1068,1,0,0,0,1070,185,1,0,0,0,1071,1072,5,56,0,0,1072,1081,5,151,0,0,1073,
		1074,3,10,5,0,1074,1075,5,151,0,0,1075,1077,1,0,0,0,1076,1073,1,0,0,0,
		1077,1078,1,0,0,0,1078,1076,1,0,0,0,1078,1079,1,0,0,0,1079,1081,1,0,0,
		0,1080,1071,1,0,0,0,1080,1076,1,0,0,0,1080,1081,1,0,0,0,1081,1084,1,0,
		0,0,1082,1085,3,188,94,0,1083,1085,3,192,96,0,1084,1082,1,0,0,0,1084,1083,
		1,0,0,0,1085,187,1,0,0,0,1086,1089,3,190,95,0,1087,1089,3,158,79,0,1088,
		1086,1,0,0,0,1088,1087,1,0,0,0,1089,189,1,0,0,0,1090,1091,5,160,0,0,1091,
		191,1,0,0,0,1092,1095,3,188,94,0,1093,1096,3,194,97,0,1094,1096,3,198,
		99,0,1095,1093,1,0,0,0,1095,1094,1,0,0,0,1096,1097,1,0,0,0,1097,1095,1,
		0,0,0,1097,1098,1,0,0,0,1098,193,1,0,0,0,1099,1100,5,149,0,0,1100,1105,
		3,196,98,0,1101,1102,5,151,0,0,1102,1104,3,196,98,0,1103,1101,1,0,0,0,
		1104,1107,1,0,0,0,1105,1103,1,0,0,0,1105,1106,1,0,0,0,1106,1108,1,0,0,
		0,1107,1105,1,0,0,0,1108,1109,5,150,0,0,1109,195,1,0,0,0,1110,1111,3,338,
		169,0,1111,197,1,0,0,0,1112,1113,5,151,0,0,1113,1114,3,200,100,0,1114,
		199,1,0,0,0,1115,1116,3,188,94,0,1116,201,1,0,0,0,1117,1121,3,204,102,
		0,1118,1121,3,212,106,0,1119,1121,3,216,108,0,1120,1117,1,0,0,0,1120,1118,
		1,0,0,0,1120,1119,1,0,0,0,1121,203,1,0,0,0,1122,1124,5,57,0,0,1123,1125,
		7,4,0,0,1124,1123,1,0,0,0,1124,1125,1,0,0,0,1125,1131,1,0,0,0,1126,1127,
		3,206,103,0,1127,1128,5,153,0,0,1128,1130,1,0,0,0,1129,1126,1,0,0,0,1130,
		1133,1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,1134,1,0,0,0,1133,
		1131,1,0,0,0,1134,1135,5,62,0,0,1135,205,1,0,0,0,1136,1139,3,208,104,0,
		1137,1139,3,96,48,0,1138,1136,1,0,0,0,1138,1137,1,0,0,0,1139,207,1,0,0,
		0,1140,1141,3,210,105,0,1141,1145,5,152,0,0,1142,1146,3,28,14,0,1143,1146,
		3,248,124,0,1144,1146,3,144,72,0,1145,1142,1,0,0,0,1145,1143,1,0,0,0,1145,
		1144,1,0,0,0,1146,1152,1,0,0,0,1147,1152,3,100,50,0,1148,1152,3,132,66,
		0,1149,1152,3,172,86,0,1150,1152,3,290,145,0,1151,1140,1,0,0,0,1151,1147,
		1,0,0,0,1151,1148,1,0,0,0,1151,1149,1,0,0,0,1151,1150,1,0,0,0,1152,209,
		1,0,0,0,1153,1158,3,190,95,0,1154,1155,5,151,0,0,1155,1157,3,190,95,0,
		1156,1154,1,0,0,0,1157,1160,1,0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,
		0,1159,211,1,0,0,0,1160,1158,1,0,0,0,1161,1163,5,58,0,0,1162,1164,7,4,
		0,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,1170,1,0,0,0,1165,1166,3,
		214,107,0,1166,1167,5,153,0,0,1167,1169,1,0,0,0,1168,1165,1,0,0,0,1169,
		1172,1,0,0,0,1170,1168,1,0,0,0,1170,1171,1,0,0,0,1171,1173,1,0,0,0,1172,
		1170,1,0,0,0,1173,1174,5,62,0,0,1174,213,1,0,0,0,1175,1178,3,208,104,0,
		1176,1178,3,96,48,0,1177,1175,1,0,0,0,1177,1176,1,0,0,0,1178,215,1,0,0,
		0,1179,1185,5,59,0,0,1180,1181,3,218,109,0,1181,1182,5,153,0,0,1182,1184,
		1,0,0,0,1183,1180,1,0,0,0,1184,1187,1,0,0,0,1185,1183,1,0,0,0,1185,1186,
		1,0,0,0,1186,1188,1,0,0,0,1187,1185,1,0,0,0,1188,1189,5,62,0,0,1189,217,
		1,0,0,0,1190,1193,3,208,104,0,1191,1193,3,96,48,0,1192,1190,1,0,0,0,1192,
		1191,1,0,0,0,1193,219,1,0,0,0,1194,1196,5,63,0,0,1195,1197,5,64,0,0,1196,
		1195,1,0,0,0,1196,1197,1,0,0,0,1197,1199,1,0,0,0,1198,1200,3,278,139,0,
		1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,1206,1,0,0,0,1201,1202,3,208,
		104,0,1202,1203,5,153,0,0,1203,1205,1,0,0,0,1204,1201,1,0,0,0,1205,1208,
		1,0,0,0,1206,1204,1,0,0,0,1206,1207,1,0,0,0,1207,1209,1,0,0,0,1208,1206,
		1,0,0,0,1209,1210,5,62,0,0,1210,221,1,0,0,0,1211,1215,3,226,113,0,1212,
		1215,3,224,112,0,1213,1215,3,258,129,0,1214,1211,1,0,0,0,1214,1212,1,0,
		0,0,1214,1213,1,0,0,0,1215,223,1,0,0,0,1216,1217,5,63,0,0,1217,1219,5,
		61,0,0,1218,1220,3,278,139,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,
		1226,1,0,0,0,1221,1222,3,208,104,0,1222,1223,5,153,0,0,1223,1225,1,0,0,
		0,1224,1221,1,0,0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1226,1227,1,0,
		0,0,1227,1229,1,0,0,0,1228,1226,1,0,0,0,1229,1230,5,62,0,0,1230,225,1,
		0,0,0,1231,1232,5,63,0,0,1232,1234,5,60,0,0,1233,1235,3,278,139,0,1234,
		1233,1,0,0,0,1234,1235,1,0,0,0,1235,1241,1,0,0,0,1236,1237,3,208,104,0,
		1237,1238,5,153,0,0,1238,1240,1,0,0,0,1239,1236,1,0,0,0,1240,1243,1,0,
		0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,0,1242,1244,1,0,0,0,1243,1241,1,
		0,0,0,1244,1245,5,62,0,0,1245,227,1,0,0,0,1246,1248,5,63,0,0,1247,1249,
		7,5,0,0,1248,1247,1,0,0,0,1248,1249,1,0,0,0,1249,1255,1,0,0,0,1250,1251,
		3,230,115,0,1251,1252,5,153,0,0,1252,1254,1,0,0,0,1253,1250,1,0,0,0,1254,
		1257,1,0,0,0,1255,1253,1,0,0,0,1255,1256,1,0,0,0,1256,1258,1,0,0,0,1257,
		1255,1,0,0,0,1258,1259,5,62,0,0,1259,229,1,0,0,0,1260,1262,3,190,95,0,
		1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1264,3,114,
		57,0,1264,1265,5,152,0,0,1265,1266,3,246,123,0,1266,231,1,0,0,0,1267,1273,
		5,65,0,0,1268,1269,3,208,104,0,1269,1270,5,153,0,0,1270,1272,1,0,0,0,1271,
		1268,1,0,0,0,1272,1275,1,0,0,0,1273,1271,1,0,0,0,1273,1274,1,0,0,0,1274,
		1276,1,0,0,0,1275,1273,1,0,0,0,1276,1277,5,62,0,0,1277,233,1,0,0,0,1278,
		1280,5,66,0,0,1279,1281,5,64,0,0,1280,1279,1,0,0,0,1280,1281,1,0,0,0,1281,
		1287,1,0,0,0,1282,1283,3,236,118,0,1283,1284,5,153,0,0,1284,1286,1,0,0,
		0,1285,1282,1,0,0,0,1286,1289,1,0,0,0,1287,1285,1,0,0,0,1287,1288,1,0,
		0,0,1288,1290,1,0,0,0,1289,1287,1,0,0,0,1290,1291,5,62,0,0,1291,235,1,
		0,0,0,1292,1293,3,238,119,0,1293,1299,5,152,0,0,1294,1300,3,32,16,0,1295,
		1300,3,84,42,0,1296,1300,3,126,63,0,1297,1300,3,166,83,0,1298,1300,3,152,
		76,0,1299,1294,1,0,0,0,1299,1295,1,0,0,0,1299,1296,1,0,0,0,1299,1297,1,
		0,0,0,1299,1298,1,0,0,0,1300,237,1,0,0,0,1301,1302,5,160,0,0,1302,239,
		1,0,0,0,1303,1305,5,67,0,0,1304,1306,7,6,0,0,1305,1304,1,0,0,0,1305,1306,
		1,0,0,0,1306,1312,1,0,0,0,1307,1308,3,242,121,0,1308,1309,5,153,0,0,1309,
		1311,1,0,0,0,1310,1307,1,0,0,0,1311,1314,1,0,0,0,1312,1310,1,0,0,0,1312,
		1313,1,0,0,0,1313,1315,1,0,0,0,1314,1312,1,0,0,0,1315,1316,5,62,0,0,1316,
		241,1,0,0,0,1317,1318,3,244,122,0,1318,1321,5,152,0,0,1319,1322,3,246,
		123,0,1320,1322,3,166,83,0,1321,1319,1,0,0,0,1321,1320,1,0,0,0,1322,243,
		1,0,0,0,1323,1328,3,238,119,0,1324,1325,5,151,0,0,1325,1327,3,238,119,
		0,1326,1324,1,0,0,0,1327,1330,1,0,0,0,1328,1326,1,0,0,0,1328,1329,1,0,
		0,0,1329,1335,1,0,0,0,1330,1328,1,0,0,0,1331,1332,3,238,119,0,1332,1333,
		3,114,57,0,1333,1335,1,0,0,0,1334,1323,1,0,0,0,1334,1331,1,0,0,0,1335,
		245,1,0,0,0,1336,1342,3,28,14,0,1337,1342,3,82,41,0,1338,1342,3,122,61,
		0,1339,1342,3,252,126,0,1340,1342,3,256,128,0,1341,1336,1,0,0,0,1341,1337,
		1,0,0,0,1341,1338,1,0,0,0,1341,1339,1,0,0,0,1341,1340,1,0,0,0,1342,247,
		1,0,0,0,1343,1346,3,250,125,0,1344,1346,3,254,127,0,1345,1343,1,0,0,0,
		1345,1344,1,0,0,0,1346,249,1,0,0,0,1347,1348,3,210,105,0,1348,1349,5,152,
		0,0,1349,1350,3,252,126,0,1350,251,1,0,0,0,1351,1355,5,33,0,0,1352,1353,
		5,149,0,0,1353,1354,5,11,0,0,1354,1356,5,150,0,0,1355,1352,1,0,0,0,1355,
		1356,1,0,0,0,1356,1359,1,0,0,0,1357,1358,5,144,0,0,1358,1360,5,3,0,0,1359,
		1357,1,0,0,0,1359,1360,1,0,0,0,1360,253,1,0,0,0,1361,1362,3,210,105,0,
		1362,1363,5,152,0,0,1363,1364,3,256,128,0,1364,255,1,0,0,0,1365,1369,5,
		34,0,0,1366,1367,5,149,0,0,1367,1368,5,11,0,0,1368,1370,5,150,0,0,1369,
		1366,1,0,0,0,1369,1370,1,0,0,0,1370,1373,1,0,0,0,1371,1372,5,144,0,0,1372,
		1374,5,4,0,0,1373,1371,1,0,0,0,1373,1374,1,0,0,0,1374,257,1,0,0,0,1375,
		1377,5,63,0,0,1376,1378,7,4,0,0,1377,1376,1,0,0,0,1377,1378,1,0,0,0,1378,
		1382,1,0,0,0,1379,1381,3,260,130,0,1380,1379,1,0,0,0,1381,1384,1,0,0,0,
		1382,1380,1,0,0,0,1382,1383,1,0,0,0,1383,1385,1,0,0,0,1384,1382,1,0,0,
		0,1385,1386,5,62,0,0,1386,259,1,0,0,0,1387,1388,3,190,95,0,1388,1389,5,
		52,0,0,1389,1390,5,1,0,0,1390,1391,5,152,0,0,1391,1392,3,262,131,0,1392,
		1393,5,153,0,0,1393,261,1,0,0,0,1394,1404,3,32,16,0,1395,1404,3,84,42,
		0,1396,1404,3,126,63,0,1397,1401,7,0,0,0,1398,1399,5,149,0,0,1399,1400,
		5,11,0,0,1400,1402,5,150,0,0,1401,1398,1,0,0,0,1401,1402,1,0,0,0,1402,
		1404,1,0,0,0,1403,1394,1,0,0,0,1403,1395,1,0,0,0,1403,1396,1,0,0,0,1403,
		1397,1,0,0,0,1404,263,1,0,0,0,1405,1406,5,68,0,0,1406,1409,3,308,154,0,
		1407,1408,5,152,0,0,1408,1410,3,180,90,0,1409,1407,1,0,0,0,1409,1410,1,
		0,0,0,1410,1414,1,0,0,0,1411,1413,3,12,6,0,1412,1411,1,0,0,0,1413,1416,
		1,0,0,0,1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,1423,1,0,0,0,1416,1414,
		1,0,0,0,1417,1422,3,202,101,0,1418,1422,3,234,117,0,1419,1422,3,220,110,
		0,1420,1422,3,232,116,0,1421,1417,1,0,0,0,1421,1418,1,0,0,0,1421,1419,
		1,0,0,0,1421,1420,1,0,0,0,1422,1425,1,0,0,0,1423,1421,1,0,0,0,1423,1424,
		1,0,0,0,1424,1426,1,0,0,0,1425,1423,1,0,0,0,1426,1427,3,266,133,0,1427,
		1428,5,69,0,0,1428,265,1,0,0,0,1429,1430,3,294,147,0,1430,267,1,0,0,0,
		1431,1433,5,79,0,0,1432,1434,7,3,0,0,1433,1432,1,0,0,0,1433,1434,1,0,0,
		0,1434,1435,1,0,0,0,1435,1439,3,270,135,0,1436,1438,3,12,6,0,1437,1436,
		1,0,0,0,1438,1441,1,0,0,0,1439,1437,1,0,0,0,1439,1440,1,0,0,0,1440,1444,
		1,0,0,0,1441,1439,1,0,0,0,1442,1443,5,73,0,0,1443,1445,3,272,136,0,1444,
		1442,1,0,0,0,1444,1445,1,0,0,0,1445,1448,1,0,0,0,1446,1447,5,74,0,0,1447,
		1449,3,284,142,0,1448,1446,1,0,0,0,1448,1449,1,0,0,0,1449,1455,1,0,0,0,
		1450,1454,3,234,117,0,1451,1454,3,220,110,0,1452,1454,3,222,111,0,1453,
		1450,1,0,0,0,1453,1451,1,0,0,0,1453,1452,1,0,0,0,1454,1457,1,0,0,0,1455,
		1453,1,0,0,0,1455,1456,1,0,0,0,1456,1461,1,0,0,0,1457,1455,1,0,0,0,1458,
		1460,3,176,88,0,1459,1458,1,0,0,0,1460,1463,1,0,0,0,1461,1459,1,0,0,0,
		1461,1462,1,0,0,0,1462,1464,1,0,0,0,1463,1461,1,0,0,0,1464,1465,5,80,0,
		0,1465,269,1,0,0,0,1466,1467,5,160,0,0,1467,271,1,0,0,0,1468,1469,3,10,
		5,0,1469,1470,5,154,0,0,1470,1472,1,0,0,0,1471,1468,1,0,0,0,1472,1475,
		1,0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,1476,1,0,0,0,1475,1473,
		1,0,0,0,1476,1477,3,270,135,0,1477,273,1,0,0,0,1478,1479,5,160,0,0,1479,
		275,1,0,0,0,1480,1481,3,10,5,0,1481,1482,5,154,0,0,1482,1484,1,0,0,0,1483,
		1480,1,0,0,0,1484,1487,1,0,0,0,1485,1483,1,0,0,0,1485,1486,1,0,0,0,1486,
		1488,1,0,0,0,1487,1485,1,0,0,0,1488,1492,3,274,137,0,1489,1491,5,157,0,
		0,1490,1489,1,0,0,0,1491,1494,1,0,0,0,1492,1490,1,0,0,0,1492,1493,1,0,
		0,0,1493,277,1,0,0,0,1494,1492,1,0,0,0,1495,1496,7,7,0,0,1496,279,1,0,
		0,0,1497,1498,5,81,0,0,1498,1502,3,282,141,0,1499,1501,3,12,6,0,1500,1499,
		1,0,0,0,1501,1504,1,0,0,0,1502,1500,1,0,0,0,1502,1503,1,0,0,0,1503,1507,
		1,0,0,0,1504,1502,1,0,0,0,1505,1506,5,73,0,0,1506,1508,3,284,142,0,1507,
		1505,1,0,0,0,1507,1508,1,0,0,0,1508,1512,1,0,0,0,1509,1511,3,288,144,0,
		1510,1509,1,0,0,0,1511,1514,1,0,0,0,1512,1510,1,0,0,0,1512,1513,1,0,0,
		0,1513,1515,1,0,0,0,1514,1512,1,0,0,0,1515,1516,5,82,0,0,1516,281,1,0,
		0,0,1517,1518,5,160,0,0,1518,283,1,0,0,0,1519,1524,3,286,143,0,1520,1521,
		5,152,0,0,1521,1523,3,286,143,0,1522,1520,1,0,0,0,1523,1526,1,0,0,0,1524,
		1522,1,0,0,0,1524,1525,1,0,0,0,1525,285,1,0,0,0,1526,1524,1,0,0,0,1527,
		1528,3,10,5,0,1528,1529,5,154,0,0,1529,1531,1,0,0,0,1530,1527,1,0,0,0,
		1531,1534,1,0,0,0,1532,1530,1,0,0,0,1532,1533,1,0,0,0,1533,1535,1,0,0,
		0,1534,1532,1,0,0,0,1535,1536,3,282,141,0,1536,287,1,0,0,0,1537,1538,5,
		76,0,0,1538,1541,3,178,89,0,1539,1540,5,152,0,0,1540,1542,3,180,90,0,1541,
		1539,1,0,0,0,1541,1542,1,0,0,0,1542,1546,1,0,0,0,1543,1545,3,202,101,0,
		1544,1543,1,0,0,0,1545,1548,1,0,0,0,1546,1544,1,0,0,0,1546,1547,1,0,0,
		0,1547,1549,1,0,0,0,1548,1546,1,0,0,0,1549,1550,5,78,0,0,1550,289,1,0,
		0,0,1551,1554,3,210,105,0,1552,1553,5,144,0,0,1553,1555,3,292,146,0,1554,
		1552,1,0,0,0,1554,1555,1,0,0,0,1555,291,1,0,0,0,1556,1561,3,186,93,0,1557,
		1561,3,164,82,0,1558,1561,3,276,138,0,1559,1561,5,55,0,0,1560,1556,1,0,
		0,0,1560,1557,1,0,0,0,1560,1558,1,0,0,0,1560,1559,1,0,0,0,1561,293,1,0,
		0,0,1562,1564,3,296,148,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1565,
		1,0,0,0,1565,1567,5,153,0,0,1566,1563,1,0,0,0,1567,1570,1,0,0,0,1568,1566,
		1,0,0,0,1568,1569,1,0,0,0,1569,295,1,0,0,0,1570,1568,1,0,0,0,1571,1576,
		3,298,149,0,1572,1576,3,302,151,0,1573,1576,3,314,157,0,1574,1576,3,326,
		163,0,1575,1571,1,0,0,0,1575,1572,1,0,0,0,1575,1573,1,0,0,0,1575,1574,
		1,0,0,0,1576,297,1,0,0,0,1577,1578,3,184,92,0,1578,1579,5,144,0,0,1579,
		1580,3,338,169,0,1580,1584,1,0,0,0,1581,1584,3,154,77,0,1582,1584,3,300,
		150,0,1583,1577,1,0,0,0,1583,1581,1,0,0,0,1583,1582,1,0,0,0,1584,299,1,
		0,0,0,1585,1588,3,156,78,0,1586,1588,3,158,79,0,1587,1585,1,0,0,0,1587,
		1586,1,0,0,0,1588,1589,1,0,0,0,1589,1593,5,146,0,0,1590,1594,3,156,78,
		0,1591,1594,3,158,79,0,1592,1594,3,148,74,0,1593,1590,1,0,0,0,1593,1591,
		1,0,0,0,1593,1592,1,0,0,0,1594,301,1,0,0,0,1595,1602,3,304,152,0,1596,
		1602,3,310,155,0,1597,1598,5,87,0,0,1598,1599,5,147,0,0,1599,1602,5,148,
		0,0,1600,1602,5,88,0,0,1601,1595,1,0,0,0,1601,1596,1,0,0,0,1601,1597,1,
		0,0,0,1601,1600,1,0,0,0,1602,303,1,0,0,0,1603,1604,3,306,153,0,1604,1613,
		5,149,0,0,1605,1610,3,312,156,0,1606,1607,5,151,0,0,1607,1609,3,312,156,
		0,1608,1606,1,0,0,0,1609,1612,1,0,0,0,1610,1608,1,0,0,0,1610,1611,1,0,
		0,0,1611,1614,1,0,0,0,1612,1610,1,0,0,0,1613,1605,1,0,0,0,1613,1614,1,
		0,0,0,1614,1615,1,0,0,0,1615,1616,5,148,0,0,1616,305,1,0,0,0,1617,1618,
		3,10,5,0,1618,1619,5,154,0,0,1619,1621,1,0,0,0,1620,1617,1,0,0,0,1621,
		1624,1,0,0,0,1622,1620,1,0,0,0,1622,1623,1,0,0,0,1623,1625,1,0,0,0,1624,
		1622,1,0,0,0,1625,1626,3,308,154,0,1626,307,1,0,0,0,1627,1628,5,160,0,
		0,1628,309,1,0,0,0,1629,1647,3,164,82,0,1630,1631,5,56,0,0,1631,1633,5,
		154,0,0,1632,1630,1,0,0,0,1632,1633,1,0,0,0,1633,1640,1,0,0,0,1634,1637,
		3,164,82,0,1635,1637,3,276,138,0,1636,1634,1,0,0,0,1636,1635,1,0,0,0,1637,
		1638,1,0,0,0,1638,1639,5,154,0,0,1639,1641,1,0,0,0,1640,1636,1,0,0,0,1641,
		1642,1,0,0,0,1642,1640,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,1644,
		1645,3,178,89,0,1645,1647,1,0,0,0,1646,1629,1,0,0,0,1646,1632,1,0,0,0,
		1647,1648,1,0,0,0,1648,1657,5,147,0,0,1649,1654,3,312,156,0,1650,1651,
		5,151,0,0,1651,1653,3,312,156,0,1652,1650,1,0,0,0,1653,1656,1,0,0,0,1654,
		1652,1,0,0,0,1654,1655,1,0,0,0,1655,1658,1,0,0,0,1656,1654,1,0,0,0,1657,
		1649,1,0,0,0,1657,1658,1,0,0,0,1658,1659,1,0,0,0,1659,1660,5,148,0,0,1660,
		311,1,0,0,0,1661,1662,3,190,95,0,1662,1663,5,144,0,0,1663,1665,1,0,0,0,
		1664,1661,1,0,0,0,1664,1665,1,0,0,0,1665,1666,1,0,0,0,1666,1676,3,338,
		169,0,1667,1676,3,154,77,0,1668,1670,5,141,0,0,1669,1668,1,0,0,0,1669,
		1670,1,0,0,0,1670,1671,1,0,0,0,1671,1672,3,190,95,0,1672,1673,5,145,0,
		0,1673,1674,3,184,92,0,1674,1676,1,0,0,0,1675,1664,1,0,0,0,1675,1667,1,
		0,0,0,1675,1669,1,0,0,0,1676,313,1,0,0,0,1677,1680,3,316,158,0,1678,1680,
		3,318,159,0,1679,1677,1,0,0,0,1679,1678,1,0,0,0,1680,315,1,0,0,0,1681,
		1682,5,108,0,0,1682,1683,3,338,169,0,1683,1684,5,109,0,0,1684,1692,3,294,
		147,0,1685,1686,5,110,0,0,1686,1687,3,338,169,0,1687,1688,5,109,0,0,1688,
		1689,3,294,147,0,1689,1691,1,0,0,0,1690,1685,1,0,0,0,1691,1694,1,0,0,0,
		1692,1690,1,0,0,0,1692,1693,1,0,0,0,1693,1697,1,0,0,0,1694,1692,1,0,0,
		0,1695,1696,5,111,0,0,1696,1698,3,294,147,0,1697,1695,1,0,0,0,1697,1698,
		1,0,0,0,1698,1699,1,0,0,0,1699,1700,5,112,0,0,1700,317,1,0,0,0,1701,1702,
		5,113,0,0,1702,1703,3,338,169,0,1703,1705,5,48,0,0,1704,1706,3,320,160,
		0,1705,1704,1,0,0,0,1706,1707,1,0,0,0,1707,1705,1,0,0,0,1707,1708,1,0,
		0,0,1708,1711,1,0,0,0,1709,1710,5,111,0,0,1710,1712,3,294,147,0,1711,1709,
		1,0,0,0,1711,1712,1,0,0,0,1712,1713,1,0,0,0,1713,1714,5,114,0,0,1714,319,
		1,0,0,0,1715,1716,3,322,161,0,1716,1717,5,152,0,0,1717,1718,3,294,147,
		0,1718,321,1,0,0,0,1719,1724,3,324,162,0,1720,1721,5,151,0,0,1721,1723,
		3,324,162,0,1722,1720,1,0,0,0,1723,1726,1,0,0,0,1724,1722,1,0,0,0,1724,
		1725,1,0,0,0,1725,323,1,0,0,0,1726,1724,1,0,0,0,1727,1730,3,54,27,0,1728,
		1730,3,338,169,0,1729,1727,1,0,0,0,1729,1728,1,0,0,0,1730,325,1,0,0,0,
		1731,1737,3,328,164,0,1732,1737,3,334,167,0,1733,1737,3,336,168,0,1734,
		1737,3,340,170,0,1735,1737,3,342,171,0,1736,1731,1,0,0,0,1736,1732,1,0,
		0,0,1736,1733,1,0,0,0,1736,1734,1,0,0,0,1736,1735,1,0,0,0,1737,327,1,0,
		0,0,1738,1739,5,117,0,0,1739,1740,3,330,165,0,1740,1741,5,144,0,0,1741,
		1742,3,332,166,0,1742,1743,5,120,0,0,1743,1744,3,294,147,0,1744,1745,5,
		121,0,0,1745,329,1,0,0,0,1746,1747,5,160,0,0,1747,331,1,0,0,0,1748,1749,
		3,338,169,0,1749,1750,5,118,0,0,1750,1753,3,338,169,0,1751,1752,5,119,
		0,0,1752,1754,3,338,169,0,1753,1751,1,0,0,0,1753,1754,1,0,0,0,1754,333,
		1,0,0,0,1755,1756,5,122,0,0,1756,1757,3,338,169,0,1757,1758,5,120,0,0,
		1758,1759,3,294,147,0,1759,1760,5,123,0,0,1760,335,1,0,0,0,1761,1762,5,
		124,0,0,1762,1763,3,294,147,0,1763,1764,5,125,0,0,1764,1765,3,338,169,
		0,1765,1766,5,126,0,0,1766,337,1,0,0,0,1767,1772,6,169,-1,0,1768,1773,
		3,346,173,0,1769,1773,3,344,172,0,1770,1773,3,72,36,0,1771,1773,3,148,
		74,0,1772,1768,1,0,0,0,1772,1769,1,0,0,0,1772,1770,1,0,0,0,1772,1771,1,
		0,0,0,1773,1783,1,0,0,0,1774,1775,5,147,0,0,1775,1776,3,338,169,0,1776,
		1777,5,148,0,0,1777,1783,1,0,0,0,1778,1783,3,304,152,0,1779,1783,3,158,
		79,0,1780,1781,7,8,0,0,1781,1783,3,338,169,8,1782,1767,1,0,0,0,1782,1774,
		1,0,0,0,1782,1778,1,0,0,0,1782,1779,1,0,0,0,1782,1780,1,0,0,0,1783,1807,
		1,0,0,0,1784,1785,10,7,0,0,1785,1786,5,130,0,0,1786,1806,3,338,169,7,1787,
		1788,10,6,0,0,1788,1789,7,9,0,0,1789,1806,3,338,169,7,1790,1791,10,5,0,
		0,1791,1792,7,10,0,0,1792,1806,3,338,169,6,1793,1794,10,4,0,0,1794,1795,
		7,11,0,0,1795,1806,3,338,169,5,1796,1797,10,3,0,0,1797,1798,7,12,0,0,1798,
		1806,3,338,169,4,1799,1800,10,2,0,0,1800,1801,5,142,0,0,1801,1806,3,338,
		169,3,1802,1803,10,1,0,0,1803,1804,5,140,0,0,1804,1806,3,338,169,2,1805,
		1784,1,0,0,0,1805,1787,1,0,0,0,1805,1790,1,0,0,0,1805,1793,1,0,0,0,1805,
		1796,1,0,0,0,1805,1799,1,0,0,0,1805,1802,1,0,0,0,1806,1809,1,0,0,0,1807,
		1805,1,0,0,0,1807,1808,1,0,0,0,1808,339,1,0,0,0,1809,1807,1,0,0,0,1810,
		1811,5,115,0,0,1811,341,1,0,0,0,1812,1813,5,116,0,0,1813,343,1,0,0,0,1814,
		1816,3,184,92,0,1815,1817,3,120,60,0,1816,1815,1,0,0,0,1816,1817,1,0,0,
		0,1817,345,1,0,0,0,1818,1825,3,348,174,0,1819,1825,3,360,180,0,1820,1825,
		3,372,186,0,1821,1825,3,378,189,0,1822,1825,3,354,177,0,1823,1825,3,366,
		183,0,1824,1818,1,0,0,0,1824,1819,1,0,0,0,1824,1820,1,0,0,0,1824,1821,
		1,0,0,0,1824,1822,1,0,0,0,1824,1823,1,0,0,0,1825,347,1,0,0,0,1826,1827,
		3,352,176,0,1827,1828,5,156,0,0,1828,1830,1,0,0,0,1829,1826,1,0,0,0,1829,
		1830,1,0,0,0,1830,1831,1,0,0,0,1831,1832,3,350,175,0,1832,349,1,0,0,0,
		1833,1834,7,13,0,0,1834,351,1,0,0,0,1835,1836,7,14,0,0,1836,353,1,0,0,
		0,1837,1838,3,358,179,0,1838,1839,5,156,0,0,1839,1841,1,0,0,0,1840,1837,
		1,0,0,0,1840,1841,1,0,0,0,1841,1842,1,0,0,0,1842,1843,3,356,178,0,1843,
		355,1,0,0,0,1844,1845,7,15,0,0,1845,357,1,0,0,0,1846,1847,7,16,0,0,1847,
		359,1,0,0,0,1848,1849,3,364,182,0,1849,1850,5,156,0,0,1850,1852,1,0,0,
		0,1851,1848,1,0,0,0,1851,1852,1,0,0,0,1852,1853,1,0,0,0,1853,1854,3,362,
		181,0,1854,361,1,0,0,0,1855,1856,5,9,0,0,1856,363,1,0,0,0,1857,1858,7,
		17,0,0,1858,365,1,0,0,0,1859,1860,3,370,185,0,1860,1861,5,156,0,0,1861,
		1863,1,0,0,0,1862,1859,1,0,0,0,1862,1863,1,0,0,0,1863,1864,1,0,0,0,1864,
		1865,3,368,184,0,1865,367,1,0,0,0,1866,1867,7,18,0,0,1867,369,1,0,0,0,
		1868,1869,5,30,0,0,1869,371,1,0,0,0,1870,1871,3,376,188,0,1871,1872,5,
		156,0,0,1872,1874,1,0,0,0,1873,1870,1,0,0,0,1873,1874,1,0,0,0,1874,1875,
		1,0,0,0,1875,1876,3,374,187,0,1876,373,1,0,0,0,1877,1878,7,19,0,0,1878,
		375,1,0,0,0,1879,1880,7,20,0,0,1880,377,1,0,0,0,1881,1886,3,380,190,0,
		1882,1886,3,386,193,0,1883,1886,3,392,196,0,1884,1886,3,398,199,0,1885,
		1881,1,0,0,0,1885,1882,1,0,0,0,1885,1883,1,0,0,0,1885,1884,1,0,0,0,1886,
		379,1,0,0,0,1887,1888,3,384,192,0,1888,1889,5,156,0,0,1889,1890,3,382,
		191,0,1890,381,1,0,0,0,1891,1892,5,5,0,0,1892,383,1,0,0,0,1893,1894,7,
		21,0,0,1894,385,1,0,0,0,1895,1896,3,390,195,0,1896,1897,5,156,0,0,1897,
		1898,3,388,194,0,1898,387,1,0,0,0,1899,1900,5,8,0,0,1900,389,1,0,0,0,1901,
		1902,7,22,0,0,1902,391,1,0,0,0,1903,1904,3,396,198,0,1904,1905,5,156,0,
		0,1905,1906,3,394,197,0,1906,393,1,0,0,0,1907,1908,5,7,0,0,1908,395,1,
		0,0,0,1909,1910,7,23,0,0,1910,397,1,0,0,0,1911,1912,3,402,201,0,1912,1913,
		5,156,0,0,1913,1914,3,400,200,0,1914,399,1,0,0,0,1915,1916,5,6,0,0,1916,
		401,1,0,0,0,1917,1918,7,24,0,0,1918,403,1,0,0,0,1919,1920,5,2,0,0,1920,
		405,1,0,0,0,198,410,418,420,422,427,433,437,443,455,457,464,475,488,490,
		503,514,525,536,542,552,559,569,573,586,594,603,619,623,633,639,644,650,
		655,665,671,675,682,696,706,713,720,731,740,744,752,765,784,788,795,802,
		804,812,819,831,840,851,863,874,883,897,902,908,915,924,934,942,946,952,
		958,960,964,971,973,979,992,999,1007,1023,1028,1031,1036,1042,1044,1054,
		1065,1069,1078,1080,1084,1088,1095,1097,1105,1120,1124,1131,1138,1145,
		1151,1158,1163,1170,1177,1185,1192,1196,1199,1206,1214,1219,1226,1234,
		1241,1248,1255,1261,1273,1280,1287,1299,1305,1312,1321,1328,1334,1341,
		1345,1355,1359,1369,1373,1377,1382,1401,1403,1409,1414,1421,1423,1433,
		1439,1444,1448,1453,1455,1461,1473,1485,1492,1502,1507,1512,1524,1532,
		1541,1546,1554,1560,1563,1568,1575,1583,1587,1593,1601,1610,1613,1622,
		1632,1636,1642,1646,1654,1657,1664,1669,1675,1679,1692,1697,1707,1711,
		1724,1729,1736,1753,1772,1782,1805,1807,1816,1824,1829,1840,1851,1862,
		1873,1885
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
