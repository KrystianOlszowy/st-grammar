//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/kryst/Desktop/Praca magisterska/st-grammar/st.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class stParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RELATIVE_ADDRESS=1, DIRECT_VARIABLE=2, SINGLE_BYTE_STRING=3, DOUBLE_BYTE_STRING=4, 
		DURATION=5, DATE_TIME_VALUE=6, DATE_VALUE=7, CLOCK_TIME=8, REAL_VALUE=9, 
		SIGNED_INT=10, UNSIGNED_INT=11, BINARY_INT=12, OCTAL_INT=13, HEX_INT=14, 
		BOOLEAN=15, USINT=16, UINT=17, UDINT=18, ULINT=19, SINT=20, INT=21, DINT=22, 
		LINT=23, REAL=24, LREAL=25, BYTE=26, WORD=27, DWORD=28, LWORD=29, BOOL=30, 
		FALSE=31, TRUE=32, STRING=33, WSTRING=34, CHAR=35, WCHAR=36, TIME=37, 
		LTIME=38, TIME_OF_DAY=39, LTIME_OF_DAY=40, DATE=41, LDATE=42, DATE_AND_TIME=43, 
		LDATE_AND_TIME=44, TYPE=45, END_TYPE=46, ARRAY=47, OF=48, STRUCT=49, OVERLAP=50, 
		END_STRUCT=51, AT=52, REF_TO=53, REF=54, NULL=55, VAR_INPUT=56, R_EDGE=57, 
		F_EDGE=58, VAR_OUTPUT=59, VAR_IN_OUT=60, RETAIN=61, NON_RETAIN=62, END_VAR=63, 
		VAR=64, CONSTANT=65, VAR_TEMP=66, VAR_EXTERNAL=67, VAR_GLOBAL=68, FUNCTION=69, 
		END_FUNCTION=70, FUNCTION_BLOCK=71, FINAL=72, ABSTRACT=73, EXTENDS=74, 
		IMPLEMENTS=75, END_FUNCTION_BLOCK=76, METHOD=77, THIS=78, OVERRIDE=79, 
		END_METHOD=80, CLASS=81, END_CLASS=82, INTERFACE=83, END_INTERFACE=84, 
		PUBLIC=85, PROTECTED=86, PRIVATE=87, INTERNAL=88, SUPER=89, RETURN=90, 
		PROGRAM=91, END_PROGRAM=92, VAR_ACCESS=93, CONFIGURATION=94, END_CONFIGURATION=95, 
		RESOURCE=96, ON=97, END_RESOURCE=98, READ_WRITE=99, READ_ONLY=100, TASK=101, 
		SINGLE=102, INTERVAL=103, PRIORITY=104, WITH=105, VAR_CONFIG=106, NAMESPACE=107, 
		END_NAMESPACE=108, USING=109, IF=110, THEN=111, ELSIF=112, ELSE=113, END_IF=114, 
		CASE=115, END_CASE=116, EXIT=117, CONTINUE=118, FOR=119, TO=120, BY=121, 
		DO=122, END_FOR=123, WHILE=124, END_WHILE=125, REPEAT=126, UNTIL=127, 
		END_REPEAT=128, PLUS=129, MINUS=130, ASTERISK=131, POWER=132, SLASH=133, 
		MOD=134, EQUAL=135, NOT_EQUAL=136, LESS=137, LESS_EQUAL=138, GREATER=139, 
		GREATER_EQUAL=140, AND=141, OR=142, NOT=143, XOR=144, AMPERSAND=145, ASSIGN=146, 
		ASSIGN_OUT=147, ATTEMPT_ASSIGN=148, LEFT_PAREN=149, RIGHT_PAREN=150, LEFT_BRACKET=151, 
		RIGHT_BRACKET=152, COMMA=153, COLON=154, SEMICOLON=155, DOT=156, RANGE=157, 
		HASH=158, CARET=159, PERCENT=160, UNDERSCORE=161, IDENTIFIER=162, AUTO_DIRECTIVE=163, 
		READ_DIRECTIVE=164, WRITE_DIRECTIVE=165, PRAGMA=166, LINE_COMMENT=167, 
		SLASH_COMMENT=168, BRACE_COMMENT=169, WHITESPACE=170;
	public const int
		RULE_file = 0, RULE_pouDeclaration = 1, RULE_namespaceDeclaration = 2, 
		RULE_namespaceElements = 3, RULE_namespaceAccess = 4, RULE_namespaceName = 5, 
		RULE_usingDirective = 6, RULE_programDeclaration = 7, RULE_programName = 8, 
		RULE_programNameAccess = 9, RULE_programBody = 10, RULE_dataTypeDeclaration = 11, 
		RULE_typeDeclaration = 12, RULE_simpleTypeDeclaration = 13, RULE_simpleTypeName = 14, 
		RULE_simpleSpecificationInit = 15, RULE_simpleInit = 16, RULE_simpleSpecification = 17, 
		RULE_elementaryTypeName = 18, RULE_simpleTypeAccess = 19, RULE_stringTypeName = 20, 
		RULE_stringSize = 21, RULE_subrangeTypeDeclaration = 22, RULE_subrangeTypeName = 23, 
		RULE_subrangeSpecificationInit = 24, RULE_subrangeSpecification = 25, 
		RULE_subrangeInit = 26, RULE_subrangeTypeAccess = 27, RULE_subrange = 28, 
		RULE_subrangeBegin = 29, RULE_subrangeEnd = 30, RULE_enumTypeDeclaration = 31, 
		RULE_enumTypeName = 32, RULE_enumNamedSpecificationInit = 33, RULE_enumElementSpecificationInit = 34, 
		RULE_enumElementName = 35, RULE_enumElementValue = 36, RULE_enumValue = 37, 
		RULE_enumSpecificationInit = 38, RULE_enumTypeAccess = 39, RULE_arrayTypeDeclaration = 40, 
		RULE_arrayTypeName = 41, RULE_arraySpecificationInit = 42, RULE_arraySpecification = 43, 
		RULE_arrayTypeAccess = 44, RULE_arrayInit = 45, RULE_arrayElementInit = 46, 
		RULE_arrayElementMultiplier = 47, RULE_arrayElementInitValue = 48, RULE_arrayConformDeclaration = 49, 
		RULE_arrayConformand = 50, RULE_arrayVarDeclarationInit = 51, RULE_structTypeDeclaration = 52, 
		RULE_structTypeName = 53, RULE_structTypeSpecification = 54, RULE_structDeclaration = 55, 
		RULE_structElementDeclaration = 56, RULE_structElementName = 57, RULE_locatedAt = 58, 
		RULE_relativeAddress = 59, RULE_partlySpecifiedAddress = 60, RULE_multibitPartAccess = 61, 
		RULE_structSpecificationInit = 62, RULE_structSpecification = 63, RULE_structTypeAccess = 64, 
		RULE_structInit = 65, RULE_structElementInit = 66, RULE_structVarDeclarationInit = 67, 
		RULE_stringTypeDeclaration = 68, RULE_stringDerivedTypeName = 69, RULE_stringTypeAccess = 70, 
		RULE_referenceTypeDeclaration = 71, RULE_referenceTypeName = 72, RULE_referenceSpecificationInit = 73, 
		RULE_referenceSpecification = 74, RULE_referenceValue = 75, RULE_referenceAddress = 76, 
		RULE_referenceTypeAccess = 77, RULE_referenceAssign = 78, RULE_referenceName = 79, 
		RULE_dereference = 80, RULE_functionBlockDeclaration = 81, RULE_functionBlockName = 82, 
		RULE_functionBlockInstanceName = 83, RULE_functionBlockTypeAccess = 84, 
		RULE_functionBlockTypeName = 85, RULE_functionBlockBody = 86, RULE_functionBlockVarDeclarationInit = 87, 
		RULE_functionBlockVarSpecificationInit = 88, RULE_methodDeclaration = 89, 
		RULE_methodName = 90, RULE_dataTypeAccess = 91, RULE_derivedTypeAccess = 92, 
		RULE_variable = 93, RULE_symbolicVariable = 94, RULE_variableAccess = 95, 
		RULE_variableName = 96, RULE_multiElementVariable = 97, RULE_subscriptList = 98, 
		RULE_subscript = 99, RULE_structElementSelect = 100, RULE_structElementVariable = 101, 
		RULE_ioVarDeclarations = 102, RULE_inputVarDeclarations = 103, RULE_inputVarDeclaration = 104, 
		RULE_edgeDeclaration = 105, RULE_varDeclarationInit = 106, RULE_variableList = 107, 
		RULE_outputVarDeclarations = 108, RULE_outputVarDeclaration = 109, RULE_inOutVarDeclarations = 110, 
		RULE_inOutVarDeclaration = 111, RULE_normalVarDeclarations = 112, RULE_otherVarDeclarations = 113, 
		RULE_nonRetainVarDeclarations = 114, RULE_retainVarDeclarations = 115, 
		RULE_locatedPartlyVarDeclaration = 116, RULE_locatedPartlyVar = 117, RULE_varSpecification = 118, 
		RULE_locatedVarDeclarations = 119, RULE_locatedVarDeclaration = 120, RULE_tempVarDeclarations = 121, 
		RULE_externalVarDeclarations = 122, RULE_externalDeclaration = 123, RULE_globalVarName = 124, 
		RULE_globalVarDeclarations = 125, RULE_globalVarDeclaration = 126, RULE_globalVarSpecification = 127, 
		RULE_locatedVarSpecificationInit = 128, RULE_stringVarDeclarationInit = 129, 
		RULE_stringSpecificationInit = 130, RULE_stringSpecification = 131, RULE_stringInit = 132, 
		RULE_functionDeclaration = 133, RULE_functionBody = 134, RULE_classDeclaration = 135, 
		RULE_classTypeName = 136, RULE_classTypeAccess = 137, RULE_className = 138, 
		RULE_classInstanceName = 139, RULE_accessSpecification = 140, RULE_interfaceDeclaration = 141, 
		RULE_interfaceName = 142, RULE_interfaceTypeList = 143, RULE_interfaceTypeAccess = 144, 
		RULE_methodPrototype = 145, RULE_interfaceVarDeclarationInit = 146, RULE_interfaceSpecificationInit = 147, 
		RULE_interfaceValue = 148, RULE_statementList = 149, RULE_statement = 150, 
		RULE_assignStatement = 151, RULE_assignmentAttempt = 152, RULE_subprogControlStatement = 153, 
		RULE_functionCall = 154, RULE_functionAccess = 155, RULE_functionName = 156, 
		RULE_invocationStatement = 157, RULE_parameterAssign = 158, RULE_superCallStatement = 159, 
		RULE_returnStatement = 160, RULE_selectionStatement = 161, RULE_ifStatement = 162, 
		RULE_caseStatement = 163, RULE_caseSelection = 164, RULE_caseList = 165, 
		RULE_caseListElement = 166, RULE_loopStatement = 167, RULE_forStatement = 168, 
		RULE_controlVariable = 169, RULE_forRange = 170, RULE_whileStatement = 171, 
		RULE_repeatStatement = 172, RULE_expression = 173, RULE_exitStatement = 174, 
		RULE_continueStatement = 175, RULE_variableValue = 176, RULE_literalValue = 177, 
		RULE_intLiteral = 178, RULE_intLiteralValue = 179, RULE_intTypeName = 180, 
		RULE_multibitsLiteral = 181, RULE_multibitsLiteralValue = 182, RULE_multibitsTypeName = 183, 
		RULE_realLiteral = 184, RULE_realLiteralValue = 185, RULE_realTypeName = 186, 
		RULE_boolLiteral = 187, RULE_boolLiteralValue = 188, RULE_boolTypeName = 189, 
		RULE_charLiteral = 190, RULE_charString = 191, RULE_charStringTypeName = 192, 
		RULE_timeLiteral = 193, RULE_durationLiteral = 194, RULE_durationLiteralValue = 195, 
		RULE_durationTypeName = 196, RULE_timeOfDayLiteral = 197, RULE_timeOfDayLiteralValue = 198, 
		RULE_timeOfDayTypeName = 199, RULE_dateLiteral = 200, RULE_dateLiteralValue = 201, 
		RULE_dateTypeName = 202, RULE_dateAndTimeLiteral = 203, RULE_dateAndTimeLiteralValue = 204, 
		RULE_dateAndTimeTypeName = 205, RULE_directVariable = 206;
	public static readonly string[] ruleNames = {
		"file", "pouDeclaration", "namespaceDeclaration", "namespaceElements", 
		"namespaceAccess", "namespaceName", "usingDirective", "programDeclaration", 
		"programName", "programNameAccess", "programBody", "dataTypeDeclaration", 
		"typeDeclaration", "simpleTypeDeclaration", "simpleTypeName", "simpleSpecificationInit", 
		"simpleInit", "simpleSpecification", "elementaryTypeName", "simpleTypeAccess", 
		"stringTypeName", "stringSize", "subrangeTypeDeclaration", "subrangeTypeName", 
		"subrangeSpecificationInit", "subrangeSpecification", "subrangeInit", 
		"subrangeTypeAccess", "subrange", "subrangeBegin", "subrangeEnd", "enumTypeDeclaration", 
		"enumTypeName", "enumNamedSpecificationInit", "enumElementSpecificationInit", 
		"enumElementName", "enumElementValue", "enumValue", "enumSpecificationInit", 
		"enumTypeAccess", "arrayTypeDeclaration", "arrayTypeName", "arraySpecificationInit", 
		"arraySpecification", "arrayTypeAccess", "arrayInit", "arrayElementInit", 
		"arrayElementMultiplier", "arrayElementInitValue", "arrayConformDeclaration", 
		"arrayConformand", "arrayVarDeclarationInit", "structTypeDeclaration", 
		"structTypeName", "structTypeSpecification", "structDeclaration", "structElementDeclaration", 
		"structElementName", "locatedAt", "relativeAddress", "partlySpecifiedAddress", 
		"multibitPartAccess", "structSpecificationInit", "structSpecification", 
		"structTypeAccess", "structInit", "structElementInit", "structVarDeclarationInit", 
		"stringTypeDeclaration", "stringDerivedTypeName", "stringTypeAccess", 
		"referenceTypeDeclaration", "referenceTypeName", "referenceSpecificationInit", 
		"referenceSpecification", "referenceValue", "referenceAddress", "referenceTypeAccess", 
		"referenceAssign", "referenceName", "dereference", "functionBlockDeclaration", 
		"functionBlockName", "functionBlockInstanceName", "functionBlockTypeAccess", 
		"functionBlockTypeName", "functionBlockBody", "functionBlockVarDeclarationInit", 
		"functionBlockVarSpecificationInit", "methodDeclaration", "methodName", 
		"dataTypeAccess", "derivedTypeAccess", "variable", "symbolicVariable", 
		"variableAccess", "variableName", "multiElementVariable", "subscriptList", 
		"subscript", "structElementSelect", "structElementVariable", "ioVarDeclarations", 
		"inputVarDeclarations", "inputVarDeclaration", "edgeDeclaration", "varDeclarationInit", 
		"variableList", "outputVarDeclarations", "outputVarDeclaration", "inOutVarDeclarations", 
		"inOutVarDeclaration", "normalVarDeclarations", "otherVarDeclarations", 
		"nonRetainVarDeclarations", "retainVarDeclarations", "locatedPartlyVarDeclaration", 
		"locatedPartlyVar", "varSpecification", "locatedVarDeclarations", "locatedVarDeclaration", 
		"tempVarDeclarations", "externalVarDeclarations", "externalDeclaration", 
		"globalVarName", "globalVarDeclarations", "globalVarDeclaration", "globalVarSpecification", 
		"locatedVarSpecificationInit", "stringVarDeclarationInit", "stringSpecificationInit", 
		"stringSpecification", "stringInit", "functionDeclaration", "functionBody", 
		"classDeclaration", "classTypeName", "classTypeAccess", "className", "classInstanceName", 
		"accessSpecification", "interfaceDeclaration", "interfaceName", "interfaceTypeList", 
		"interfaceTypeAccess", "methodPrototype", "interfaceVarDeclarationInit", 
		"interfaceSpecificationInit", "interfaceValue", "statementList", "statement", 
		"assignStatement", "assignmentAttempt", "subprogControlStatement", "functionCall", 
		"functionAccess", "functionName", "invocationStatement", "parameterAssign", 
		"superCallStatement", "returnStatement", "selectionStatement", "ifStatement", 
		"caseStatement", "caseSelection", "caseList", "caseListElement", "loopStatement", 
		"forStatement", "controlVariable", "forRange", "whileStatement", "repeatStatement", 
		"expression", "exitStatement", "continueStatement", "variableValue", "literalValue", 
		"intLiteral", "intLiteralValue", "intTypeName", "multibitsLiteral", "multibitsLiteralValue", 
		"multibitsTypeName", "realLiteral", "realLiteralValue", "realTypeName", 
		"boolLiteral", "boolLiteralValue", "boolTypeName", "charLiteral", "charString", 
		"charStringTypeName", "timeLiteral", "durationLiteral", "durationLiteralValue", 
		"durationTypeName", "timeOfDayLiteral", "timeOfDayLiteralValue", "timeOfDayTypeName", 
		"dateLiteral", "dateLiteralValue", "dateTypeName", "dateAndTimeLiteral", 
		"dateAndTimeLiteralValue", "dateAndTimeTypeName", "directVariable"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'USINT'", "'UINT'", "'UDINT'", "'ULINT'", "'SINT'", 
		"'INT'", "'DINT'", "'LINT'", "'REAL'", "'LREAL'", "'BYTE'", "'WORD'", 
		"'DWORD'", "'LWORD'", "'BOOL'", "'FALSE'", "'TRUE'", "'STRING'", "'WSTRING'", 
		"'CHAR'", "'WCHAR'", null, null, null, null, null, null, null, null, "'TYPE'", 
		"'END_TYPE'", "'ARRAY'", "'OF'", "'STRUCT'", "'OVERLAP'", "'END_STRUCT'", 
		"'AT'", "'REF_TO'", "'REF'", "'NULL'", "'VAR_INPUT'", "'R_EDGE'", "'F_EDGE'", 
		"'VAR_OUTPUT'", "'VAR_IN_OUT'", "'RETAIN'", "'NON_RETAIN'", "'END_VAR'", 
		"'VAR'", "'CONSTANT'", "'VAR_TEMP'", "'VAR_EXTERNAL'", "'VAR_GLOBAL'", 
		"'FUNCTION'", "'END_FUNCTION'", "'FUNCTION_BLOCK'", "'FINAL'", "'ABSTRACT'", 
		"'EXTENDS'", "'IMPLEMENTS'", "'END_FUNCTION_BLOCK'", "'METHOD'", "'THIS'", 
		"'OVERRIDE'", "'END_METHOD'", "'CLASS'", "'END_CLASS'", "'INTERFACE'", 
		"'END_INTERFACE'", "'PUBLIC'", "'PROTECTED'", "'PRIVATE'", "'INTERAL'", 
		"'SUPER'", "'RETURN'", "'PROGRAM'", "'END_PROGRAM'", "'VAR_ACCESS'", "'CONFIGURATION'", 
		"'END_CONFIGURATION'", "'RESOURCE'", "'ON'", "'END_RESOURCE'", "'READ_WRITE'", 
		"'READ_ONLY'", "'TASK'", "'SINGLE'", "'INTERVAL'", "'PRIORITY'", "'WITH'", 
		"'VAR_CONFIG'", "'NAMESPACE'", "'END_NAMESPACE'", "'USING'", "'IF'", "'THEN'", 
		"'ELSIF'", "'ELSE'", "'END_IF'", "'CASE'", "'END_CASE'", "'EXIT'", "'CONTINUE'", 
		"'FOR'", "'TO'", "'BY'", "'DO'", "'END_FOR'", "'WHILE'", "'END_WHILE'", 
		"'REPEAT'", "'UNTIL'", "'END_REPEAT'", "'+'", "'-'", "'*'", "'**'", "'/'", 
		"'MOD'", "'='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'AND'", "'OR'", 
		"'NOT'", "'XOR'", "'&'", "':='", "'=>'", "'?='", "'('", "')'", "'['", 
		"']'", "','", "':'", "';'", "'.'", "'..'", "'#'", "'^'", "'%'", "'_'", 
		null, "'(*$AUTO*)'", "'(*$READ*)'", "'(*$WRITE*)'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RELATIVE_ADDRESS", "DIRECT_VARIABLE", "SINGLE_BYTE_STRING", "DOUBLE_BYTE_STRING", 
		"DURATION", "DATE_TIME_VALUE", "DATE_VALUE", "CLOCK_TIME", "REAL_VALUE", 
		"SIGNED_INT", "UNSIGNED_INT", "BINARY_INT", "OCTAL_INT", "HEX_INT", "BOOLEAN", 
		"USINT", "UINT", "UDINT", "ULINT", "SINT", "INT", "DINT", "LINT", "REAL", 
		"LREAL", "BYTE", "WORD", "DWORD", "LWORD", "BOOL", "FALSE", "TRUE", "STRING", 
		"WSTRING", "CHAR", "WCHAR", "TIME", "LTIME", "TIME_OF_DAY", "LTIME_OF_DAY", 
		"DATE", "LDATE", "DATE_AND_TIME", "LDATE_AND_TIME", "TYPE", "END_TYPE", 
		"ARRAY", "OF", "STRUCT", "OVERLAP", "END_STRUCT", "AT", "REF_TO", "REF", 
		"NULL", "VAR_INPUT", "R_EDGE", "F_EDGE", "VAR_OUTPUT", "VAR_IN_OUT", "RETAIN", 
		"NON_RETAIN", "END_VAR", "VAR", "CONSTANT", "VAR_TEMP", "VAR_EXTERNAL", 
		"VAR_GLOBAL", "FUNCTION", "END_FUNCTION", "FUNCTION_BLOCK", "FINAL", "ABSTRACT", 
		"EXTENDS", "IMPLEMENTS", "END_FUNCTION_BLOCK", "METHOD", "THIS", "OVERRIDE", 
		"END_METHOD", "CLASS", "END_CLASS", "INTERFACE", "END_INTERFACE", "PUBLIC", 
		"PROTECTED", "PRIVATE", "INTERNAL", "SUPER", "RETURN", "PROGRAM", "END_PROGRAM", 
		"VAR_ACCESS", "CONFIGURATION", "END_CONFIGURATION", "RESOURCE", "ON", 
		"END_RESOURCE", "READ_WRITE", "READ_ONLY", "TASK", "SINGLE", "INTERVAL", 
		"PRIORITY", "WITH", "VAR_CONFIG", "NAMESPACE", "END_NAMESPACE", "USING", 
		"IF", "THEN", "ELSIF", "ELSE", "END_IF", "CASE", "END_CASE", "EXIT", "CONTINUE", 
		"FOR", "TO", "BY", "DO", "END_FOR", "WHILE", "END_WHILE", "REPEAT", "UNTIL", 
		"END_REPEAT", "PLUS", "MINUS", "ASTERISK", "POWER", "SLASH", "MOD", "EQUAL", 
		"NOT_EQUAL", "LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", "AND", 
		"OR", "NOT", "XOR", "AMPERSAND", "ASSIGN", "ASSIGN_OUT", "ATTEMPT_ASSIGN", 
		"LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA", 
		"COLON", "SEMICOLON", "DOT", "RANGE", "HASH", "CARET", "PERCENT", "UNDERSCORE", 
		"IDENTIFIER", "AUTO_DIRECTIVE", "READ_DIRECTIVE", "WRITE_DIRECTIVE", "PRAGMA", 
		"LINE_COMMENT", "SLASH_COMMENT", "BRACE_COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "st.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static stParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public stParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public stParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PouDeclarationContext[] pouDeclaration() {
			return GetRuleContexts<PouDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PouDeclarationContext pouDeclaration(int i) {
			return GetRuleContext<PouDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext[] globalVarDeclarations() {
			return GetRuleContexts<GlobalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationsContext globalVarDeclarations(int i) {
			return GetRuleContext<GlobalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext[] dataTypeDeclaration() {
			return GetRuleContexts<DataTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext dataTypeDeclaration(int i) {
			return GetRuleContext<DataTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext[] interfaceDeclaration() {
			return GetRuleContexts<InterfaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration(int i) {
			return GetRuleContext<InterfaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 428;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 414;
					pouDeclaration();
					}
					break;
				case 2:
					{
					State = 418;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==USING) {
						{
						{
						State = 415;
						usingDirective();
						}
						}
						State = 420;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 426;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NAMESPACE:
						{
						State = 421;
						namespaceDeclaration();
						}
						break;
					case VAR_GLOBAL:
						{
						State = 422;
						globalVarDeclarations();
						}
						break;
					case TYPE:
						{
						State = 423;
						dataTypeDeclaration();
						}
						break;
					case CLASS:
						{
						State = 424;
						classDeclaration();
						}
						break;
					case INTERFACE:
						{
						State = 425;
						interfaceDeclaration();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TYPE || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2748787499019L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PouDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockDeclarationContext functionBlockDeclaration() {
			return GetRuleContext<FunctionBlockDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramDeclarationContext programDeclaration() {
			return GetRuleContext<ProgramDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public PouDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pouDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPouDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PouDeclarationContext pouDeclaration() {
		PouDeclarationContext _localctx = new PouDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_pouDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 432;
				usingDirective();
				}
				}
				State = 437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 441;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNCTION:
				{
				State = 438;
				functionDeclaration();
				}
				break;
			case FUNCTION_BLOCK:
				{
				State = 439;
				functionBlockDeclaration();
				}
				break;
			case PROGRAM:
				{
				State = 440;
				programDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(stParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext namespaceAccess() {
			return GetRuleContext<NamespaceAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceElementsContext namespaceElements() {
			return GetRuleContext<NamespaceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_NAMESPACE() { return GetToken(stParser.END_NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(stParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(NAMESPACE);
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERNAL) {
				{
				State = 444;
				Match(INTERNAL);
				}
			}

			State = 447;
			namespaceAccess();
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 448;
				usingDirective();
				}
				}
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 454;
			namespaceElements();
			State = 455;
			Match(END_NAMESPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext[] dataTypeDeclaration() {
			return GetRuleContexts<DataTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeDeclarationContext dataTypeDeclaration(int i) {
			return GetRuleContext<DataTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockDeclarationContext[] functionBlockDeclaration() {
			return GetRuleContexts<FunctionBlockDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockDeclarationContext functionBlockDeclaration(int i) {
			return GetRuleContext<FunctionBlockDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext[] interfaceDeclaration() {
			return GetRuleContexts<InterfaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration(int i) {
			return GetRuleContext<InterfaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public NamespaceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceElementsContext namespaceElements() {
		NamespaceElementsContext _localctx = new NamespaceElementsContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 463;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TYPE:
					{
					State = 457;
					dataTypeDeclaration();
					}
					break;
				case FUNCTION:
					{
					State = 458;
					functionDeclaration();
					}
					break;
				case FUNCTION_BLOCK:
					{
					State = 459;
					functionBlockDeclaration();
					}
					break;
				case CLASS:
					{
					State = 460;
					classDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 461;
					interfaceDeclaration();
					}
					break;
				case NAMESPACE:
					{
					State = 462;
					namespaceDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 4611686362108657665L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public NamespaceAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceAccessContext namespaceAccess() {
		NamespaceAccessContext _localctx = new NamespaceAccessContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespaceAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			namespaceName();
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 468;
				Match(DOT);
				State = 469;
				namespaceName();
				}
				}
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(stParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext[] namespaceAccess() {
			return GetRuleContexts<NamespaceAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAccessContext namespaceAccess(int i) {
			return GetRuleContext<NamespaceAccessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(stParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(USING);
			State = 478;
			namespaceAccess();
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 479;
				Match(COMMA);
				State = 480;
				namespaceAccess();
				}
				}
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 486;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(stParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramNameContext programName() {
			return GetRuleContext<ProgramNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramBodyContext programBody() {
			return GetRuleContext<ProgramBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_PROGRAM() { return GetToken(stParser.END_PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarDeclarationsContext[] locatedVarDeclarations() {
			return GetRuleContexts<LocatedVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarDeclarationsContext locatedVarDeclarations(int i) {
			return GetRuleContext<LocatedVarDeclarationsContext>(i);
		}
		public ProgramDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramDeclarationContext programDeclaration() {
		ProgramDeclarationContext _localctx = new ProgramDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_programDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(PROGRAM);
			State = 489;
			programName();
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 3353L) != 0)) {
				{
				State = 496;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 490;
					ioVarDeclarations();
					}
					break;
				case 2:
					{
					State = 491;
					externalVarDeclarations();
					}
					break;
				case 3:
					{
					State = 492;
					normalVarDeclarations();
					}
					break;
				case 4:
					{
					State = 493;
					tempVarDeclarations();
					}
					break;
				case 5:
					{
					State = 494;
					otherVarDeclarations();
					}
					break;
				case 6:
					{
					State = 495;
					locatedVarDeclarations();
					}
					break;
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 501;
			programBody();
			State = 502;
			Match(END_PROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ProgramNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramNameContext programName() {
		ProgramNameContext _localctx = new ProgramNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_programName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramNameAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramNameContext programName() {
			return GetRuleContext<ProgramNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ProgramNameAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programNameAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramNameAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramNameAccessContext programNameAccess() {
		ProgramNameAccessContext _localctx = new ProgramNameAccessContext(Context, State);
		EnterRule(_localctx, 18, RULE_programNameAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 506;
					namespaceName();
					State = 507;
					Match(DOT);
					}
					} 
				}
				State = 513;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 514;
			programName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ProgramBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramBodyContext programBody() {
		ProgramBodyContext _localctx = new ProgramBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_programBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(stParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_TYPE() { return GetToken(stParser.END_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public DataTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeDeclarationContext dataTypeDeclaration() {
		DataTypeDeclarationContext _localctx = new DataTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_dataTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			Match(TYPE);
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 519;
				typeDeclaration();
				State = 520;
				Match(SEMICOLON);
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 526;
			Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeDeclarationContext simpleTypeDeclaration() {
			return GetRuleContext<SimpleTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeDeclarationContext subrangeTypeDeclaration() {
			return GetRuleContext<SubrangeTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeDeclarationContext enumTypeDeclaration() {
			return GetRuleContext<EnumTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeDeclarationContext arrayTypeDeclaration() {
			return GetRuleContext<ArrayTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeDeclarationContext structTypeDeclaration() {
			return GetRuleContext<StructTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeDeclarationContext stringTypeDeclaration() {
			return GetRuleContext<StringTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeDeclarationContext referenceTypeDeclaration() {
			return GetRuleContext<ReferenceTypeDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_typeDeclaration);
		try {
			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 528;
				simpleTypeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 529;
				subrangeTypeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 530;
				enumTypeDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 531;
				arrayTypeDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 532;
				structTypeDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 533;
				stringTypeDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 534;
				referenceTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		public SimpleTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeDeclarationContext simpleTypeDeclaration() {
		SimpleTypeDeclarationContext _localctx = new SimpleTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_simpleTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			simpleTypeName();
			State = 538;
			Match(COLON);
			State = 539;
			simpleSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleInitContext simpleInit() {
			return GetRuleContext<SimpleInitContext>(0);
		}
		public SimpleSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSpecificationInitContext simpleSpecificationInit() {
		SimpleSpecificationInitContext _localctx = new SimpleSpecificationInitContext(Context, State);
		EnterRule(_localctx, 30, RULE_simpleSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			simpleSpecification();
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 544;
				Match(ASSIGN);
				State = 545;
				simpleInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleInitContext simpleInit() {
		SimpleInitContext _localctx = new SimpleInitContext(Context, State);
		EnterRule(_localctx, 32, RULE_simpleInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeAccessContext simpleTypeAccess() {
			return GetRuleContext<SimpleTypeAccessContext>(0);
		}
		public SimpleSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSpecificationContext simpleSpecification() {
		SimpleSpecificationContext _localctx = new SimpleSpecificationContext(Context, State);
		EnterRule(_localctx, 34, RULE_simpleSpecification);
		try {
			State = 552;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
			case REAL:
			case LREAL:
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
			case BOOL:
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
			case TIME:
			case LTIME:
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
			case DATE:
			case LDATE:
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 550;
				elementaryTypeName();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 551;
				simpleTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementaryTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeNameContext realTypeName() {
			return GetRuleContext<RealTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTypeNameContext boolTypeName() {
			return GetRuleContext<BoolTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsTypeNameContext multibitsTypeName() {
			return GetRuleContext<MultibitsTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext stringTypeName() {
			return GetRuleContext<StringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTypeNameContext dateTypeName() {
			return GetRuleContext<DateTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayTypeNameContext timeOfDayTypeName() {
			return GetRuleContext<TimeOfDayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeTypeNameContext dateAndTimeTypeName() {
			return GetRuleContext<DateAndTimeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationTypeNameContext durationTypeName() {
			return GetRuleContext<DurationTypeNameContext>(0);
		}
		public ElementaryTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementaryTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementaryTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementaryTypeNameContext elementaryTypeName() {
		ElementaryTypeNameContext _localctx = new ElementaryTypeNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_elementaryTypeName);
		try {
			State = 563;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 554;
				intTypeName();
				}
				break;
			case REAL:
			case LREAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 555;
				realTypeName();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 556;
				boolTypeName();
				}
				break;
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 557;
				multibitsTypeName();
				}
				break;
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 558;
				stringTypeName();
				}
				break;
			case DATE:
			case LDATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 559;
				dateTypeName();
				}
				break;
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
				EnterOuterAlt(_localctx, 7);
				{
				State = 560;
				timeOfDayTypeName();
				}
				break;
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 8);
				{
				State = 561;
				dateAndTimeTypeName();
				}
				break;
			case TIME:
			case LTIME:
				EnterOuterAlt(_localctx, 9);
				{
				State = 562;
				durationTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public SimpleTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeAccessContext simpleTypeAccess() {
		SimpleTypeAccessContext _localctx = new SimpleTypeAccessContext(Context, State);
		EnterRule(_localctx, 38, RULE_simpleTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 565;
					namespaceName();
					State = 566;
					Match(DOT);
					}
					} 
				}
				State = 572;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 573;
			simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringSizeContext stringSize() {
			return GetRuleContext<StringSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(stParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WCHAR() { return GetToken(stParser.WCHAR, 0); }
		public StringTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeNameContext stringTypeName() {
		StringTypeNameContext _localctx = new StringTypeNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_stringTypeName);
		int _la;
		try {
			State = 584;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case WSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 575;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==WSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 576;
					Match(LEFT_BRACKET);
					State = 577;
					stringSize();
					State = 578;
					Match(RIGHT_BRACKET);
					}
				}

				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 582;
				Match(CHAR);
				}
				break;
			case WCHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 583;
				Match(WCHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public StringSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringSizeContext stringSize() {
		StringSizeContext _localctx = new StringSizeContext(Context, State);
		EnterRule(_localctx, 42, RULE_stringSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(UNSIGNED_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeNameContext subrangeTypeName() {
			return GetRuleContext<SubrangeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationInitContext subrangeSpecificationInit() {
			return GetRuleContext<SubrangeSpecificationInitContext>(0);
		}
		public SubrangeTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeDeclarationContext subrangeTypeDeclaration() {
		SubrangeTypeDeclarationContext _localctx = new SubrangeTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_subrangeTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			subrangeTypeName();
			State = 589;
			Match(COLON);
			State = 590;
			subrangeSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public SubrangeTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeNameContext subrangeTypeName() {
		SubrangeTypeNameContext _localctx = new SubrangeTypeNameContext(Context, State);
		EnterRule(_localctx, 46, RULE_subrangeTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationContext subrangeSpecification() {
			return GetRuleContext<SubrangeSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeInitContext subrangeInit() {
			return GetRuleContext<SubrangeInitContext>(0);
		}
		public SubrangeSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeSpecificationInitContext subrangeSpecificationInit() {
		SubrangeSpecificationInitContext _localctx = new SubrangeSpecificationInitContext(Context, State);
		EnterRule(_localctx, 48, RULE_subrangeSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			subrangeSpecification();
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 595;
				Match(ASSIGN);
				State = 596;
				subrangeInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeAccessContext subrangeTypeAccess() {
			return GetRuleContext<SubrangeTypeAccessContext>(0);
		}
		public SubrangeSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeSpecificationContext subrangeSpecification() {
		SubrangeSpecificationContext _localctx = new SubrangeSpecificationContext(Context, State);
		EnterRule(_localctx, 50, RULE_subrangeSpecification);
		try {
			State = 605;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 599;
				intTypeName();
				State = 600;
				Match(LEFT_PAREN);
				State = 601;
				subrange();
				State = 602;
				Match(RIGHT_PAREN);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 604;
				subrangeTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_INT() { return GetToken(stParser.SIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public SubrangeInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeInitContext subrangeInit() {
		SubrangeInitContext _localctx = new SubrangeInitContext(Context, State);
		EnterRule(_localctx, 52, RULE_subrangeInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			_la = TokenStream.LA(1);
			if ( !(_la==SIGNED_INT || _la==UNSIGNED_INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeNameContext subrangeTypeName() {
			return GetRuleContext<SubrangeTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public SubrangeTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeAccessContext subrangeTypeAccess() {
		SubrangeTypeAccessContext _localctx = new SubrangeTypeAccessContext(Context, State);
		EnterRule(_localctx, 54, RULE_subrangeTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 609;
					namespaceName();
					State = 610;
					Match(DOT);
					}
					} 
				}
				State = 616;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 617;
			subrangeTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeBeginContext subrangeBegin() {
			return GetRuleContext<SubrangeBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(stParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeEndContext subrangeEnd() {
			return GetRuleContext<SubrangeEndContext>(0);
		}
		public SubrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeContext subrange() {
		SubrangeContext _localctx = new SubrangeContext(Context, State);
		EnterRule(_localctx, 56, RULE_subrange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			subrangeBegin();
			State = 620;
			Match(RANGE);
			State = 621;
			subrangeEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubrangeBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeBeginContext subrangeBegin() {
		SubrangeBeginContext _localctx = new SubrangeBeginContext(Context, State);
		EnterRule(_localctx, 58, RULE_subrangeBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubrangeEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeEndContext subrangeEnd() {
		SubrangeEndContext _localctx = new SubrangeEndContext(Context, State);
		EnterRule(_localctx, 60, RULE_subrangeEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumNamedSpecificationInitContext enumNamedSpecificationInit() {
			return GetRuleContext<EnumNamedSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecificationInitContext enumSpecificationInit() {
			return GetRuleContext<EnumSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		public EnumTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeDeclarationContext enumTypeDeclaration() {
		EnumTypeDeclarationContext _localctx = new EnumTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_enumTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			enumTypeName();
			State = 628;
			Match(COLON);
			State = 634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35177929572352L) != 0)) {
					{
					State = 629;
					elementaryTypeName();
					}
				}

				State = 632;
				enumNamedSpecificationInit();
				}
				break;
			case 2:
				{
				State = 633;
				enumSpecificationInit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public EnumTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeNameContext enumTypeName() {
		EnumTypeNameContext _localctx = new EnumTypeNameContext(Context, State);
		EnterRule(_localctx, 64, RULE_enumTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNamedSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementSpecificationInitContext[] enumElementSpecificationInit() {
			return GetRuleContexts<EnumElementSpecificationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementSpecificationInitContext enumElementSpecificationInit(int i) {
			return GetRuleContext<EnumElementSpecificationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public EnumNamedSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumNamedSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumNamedSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNamedSpecificationInitContext enumNamedSpecificationInit() {
		EnumNamedSpecificationInitContext _localctx = new EnumNamedSpecificationInitContext(Context, State);
		EnterRule(_localctx, 66, RULE_enumNamedSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			Match(LEFT_PAREN);
			State = 639;
			enumElementSpecificationInit();
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 640;
				Match(COMMA);
				State = 641;
				enumElementSpecificationInit();
				}
				}
				State = 646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 647;
			Match(RIGHT_PAREN);
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 648;
				Match(ASSIGN);
				State = 649;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementValueContext enumElementValue() {
			return GetRuleContext<EnumElementValueContext>(0);
		}
		public EnumElementSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementSpecificationInitContext enumElementSpecificationInit() {
		EnumElementSpecificationInitContext _localctx = new EnumElementSpecificationInitContext(Context, State);
		EnterRule(_localctx, 68, RULE_enumElementSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			enumElementName();
			State = 655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 653;
				Match(ASSIGN);
				State = 654;
				enumElementValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public EnumElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementNameContext enumElementName() {
		EnumElementNameContext _localctx = new EnumElementNameContext(Context, State);
		EnterRule(_localctx, 70, RULE_enumElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementValueContext enumElementValue() {
		EnumElementValueContext _localctx = new EnumElementValueContext(Context, State);
		EnterRule(_localctx, 72, RULE_enumElementValue);
		try {
			State = 661;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 659;
				intLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 660;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 74, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 663;
				enumTypeName();
				State = 664;
				Match(HASH);
				}
				break;
			}
			State = 668;
			enumElementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext[] enumElementName() {
			return GetRuleContexts<EnumElementNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementNameContext enumElementName(int i) {
			return GetRuleContext<EnumElementNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeAccessContext enumTypeAccess() {
			return GetRuleContext<EnumTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public EnumSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecificationInitContext enumSpecificationInit() {
		EnumSpecificationInitContext _localctx = new EnumSpecificationInitContext(Context, State);
		EnterRule(_localctx, 76, RULE_enumSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				State = 670;
				Match(LEFT_PAREN);
				State = 671;
				enumElementName();
				State = 676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 672;
					Match(COMMA);
					State = 673;
					enumElementName();
					}
					}
					State = 678;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 679;
				Match(RIGHT_PAREN);
				}
				break;
			case IDENTIFIER:
				{
				State = 681;
				enumTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 686;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 684;
				Match(ASSIGN);
				State = 685;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public EnumTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeAccessContext enumTypeAccess() {
		EnumTypeAccessContext _localctx = new EnumTypeAccessContext(Context, State);
		EnterRule(_localctx, 78, RULE_enumTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 688;
					namespaceName();
					State = 689;
					Match(DOT);
					}
					} 
				}
				State = 695;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 696;
			enumTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeNameContext arrayTypeName() {
			return GetRuleContext<ArrayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		public ArrayTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeDeclarationContext arrayTypeDeclaration() {
		ArrayTypeDeclarationContext _localctx = new ArrayTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_arrayTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			arrayTypeName();
			State = 699;
			Match(COLON);
			State = 700;
			arraySpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ArrayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeNameContext arrayTypeName() {
		ArrayTypeNameContext _localctx = new ArrayTypeNameContext(Context, State);
		EnterRule(_localctx, 82, RULE_arrayTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArraySpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySpecificationInitContext arraySpecificationInit() {
		ArraySpecificationInitContext _localctx = new ArraySpecificationInitContext(Context, State);
		EnterRule(_localctx, 84, RULE_arraySpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			arraySpecification();
			State = 707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 705;
				Match(ASSIGN);
				State = 706;
				arrayInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeAccessContext arrayTypeAccess() {
			return GetRuleContext<ArrayTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(stParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext[] subrange() {
			return GetRuleContexts<SubrangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange(int i) {
			return GetRuleContext<SubrangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArraySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySpecificationContext arraySpecification() {
		ArraySpecificationContext _localctx = new ArraySpecificationContext(Context, State);
		EnterRule(_localctx, 86, RULE_arraySpecification);
		int _la;
		try {
			State = 724;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 709;
				arrayTypeAccess();
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 710;
				Match(ARRAY);
				State = 711;
				Match(LEFT_BRACKET);
				State = 712;
				subrange();
				State = 717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 713;
					Match(COMMA);
					State = 714;
					subrange();
					}
					}
					State = 719;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 720;
				Match(RIGHT_BRACKET);
				State = 721;
				Match(OF);
				State = 722;
				dataTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeNameContext arrayTypeName() {
			return GetRuleContext<ArrayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ArrayTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeAccessContext arrayTypeAccess() {
		ArrayTypeAccessContext _localctx = new ArrayTypeAccessContext(Context, State);
		EnterRule(_localctx, 88, RULE_arrayTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 726;
					namespaceName();
					State = 727;
					Match(DOT);
					}
					} 
				}
				State = 733;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 734;
			arrayTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitContext[] arrayElementInit() {
			return GetRuleContexts<ArrayElementInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitContext arrayElementInit(int i) {
			return GetRuleContext<ArrayElementInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArrayInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitContext arrayInit() {
		ArrayInitContext _localctx = new ArrayInitContext(Context, State);
		EnterRule(_localctx, 90, RULE_arrayInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			Match(LEFT_BRACKET);
			State = 737;
			arrayElementInit();
			State = 742;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 738;
				Match(COMMA);
				State = 739;
				arrayElementInit();
				}
				}
				State = 744;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 745;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementInitValueContext arrayElementInitValue() {
			return GetRuleContext<ArrayElementInitValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementMultiplierContext arrayElementMultiplier() {
			return GetRuleContext<ArrayElementMultiplierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		public ArrayElementInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementInitContext arrayElementInit() {
		ArrayElementInitContext _localctx = new ArrayElementInitContext(Context, State);
		EnterRule(_localctx, 92, RULE_arrayElementInit);
		int _la;
		try {
			State = 755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 747;
				arrayElementInitValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 748;
				arrayElementMultiplier();
				State = 749;
				Match(LEFT_PAREN);
				State = 751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 54078373458083356L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 6755399441055745L) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 524609L) != 0)) {
					{
					State = 750;
					arrayElementInitValue();
					}
				}

				State = 753;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementMultiplierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public ArrayElementMultiplierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementMultiplier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementMultiplier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementMultiplierContext arrayElementMultiplier() {
		ArrayElementMultiplierContext _localctx = new ArrayElementMultiplierContext(Context, State);
		EnterRule(_localctx, 94, RULE_arrayElementMultiplier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			Match(UNSIGNED_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementInitValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArrayElementInitValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementInitValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementInitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementInitValueContext arrayElementInitValue() {
		ArrayElementInitValueContext _localctx = new ArrayElementInitValueContext(Context, State);
		EnterRule(_localctx, 96, RULE_arrayElementInitValue);
		try {
			State = 763;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 759;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 760;
				enumValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 761;
				structInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 762;
				arrayInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConformDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformandContext arrayConformand() {
			return GetRuleContext<ArrayConformandContext>(0);
		}
		public ArrayConformDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayConformDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConformDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConformDeclarationContext arrayConformDeclaration() {
		ArrayConformDeclarationContext _localctx = new ArrayConformDeclarationContext(Context, State);
		EnterRule(_localctx, 98, RULE_arrayConformDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			variableList();
			State = 766;
			Match(COLON);
			State = 767;
			arrayConformand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConformandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(stParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASTERISK() { return GetTokens(stParser.ASTERISK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK(int i) {
			return GetToken(stParser.ASTERISK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public ArrayConformandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayConformand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConformand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConformandContext arrayConformand() {
		ArrayConformandContext _localctx = new ArrayConformandContext(Context, State);
		EnterRule(_localctx, 100, RULE_arrayConformand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			Match(ARRAY);
			State = 770;
			Match(LEFT_BRACKET);
			State = 771;
			Match(ASTERISK);
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 772;
				Match(COMMA);
				State = 773;
				Match(ASTERISK);
				}
				}
				State = 778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 779;
			Match(RIGHT_BRACKET);
			State = 780;
			Match(OF);
			State = 781;
			dataTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		public ArrayVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayVarDeclarationInitContext arrayVarDeclarationInit() {
		ArrayVarDeclarationInitContext _localctx = new ArrayVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 102, RULE_arrayVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			variableList();
			State = 784;
			Match(COLON);
			State = 785;
			arraySpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeSpecificationContext structTypeSpecification() {
			return GetRuleContext<StructTypeSpecificationContext>(0);
		}
		public StructTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeDeclarationContext structTypeDeclaration() {
		StructTypeDeclarationContext _localctx = new StructTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_structTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			structTypeName();
			State = 788;
			Match(COLON);
			State = 789;
			structTypeSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StructTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeNameContext structTypeName() {
		StructTypeNameContext _localctx = new StructTypeNameContext(Context, State);
		EnterRule(_localctx, 106, RULE_structTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		public StructTypeSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeSpecificationContext structTypeSpecification() {
		StructTypeSpecificationContext _localctx = new StructTypeSpecificationContext(Context, State);
		EnterRule(_localctx, 108, RULE_structTypeSpecification);
		try {
			State = 795;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRUCT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 793;
				structDeclaration();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 794;
				structSpecificationInit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(stParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_STRUCT() { return GetToken(stParser.END_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAP() { return GetToken(stParser.OVERLAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementDeclarationContext[] structElementDeclaration() {
			return GetRuleContexts<StructElementDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementDeclarationContext structElementDeclaration(int i) {
			return GetRuleContext<StructElementDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			Match(STRUCT);
			State = 799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERLAP) {
				{
				State = 798;
				Match(OVERLAP);
				}
			}

			State = 804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 801;
				structElementDeclaration();
				State = 802;
				Match(SEMICOLON);
				}
				}
				State = 806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 808;
			Match(END_STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructElementNameContext structElementName() {
			return GetRuleContext<StructElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeSpecificationInitContext subrangeSpecificationInit() {
			return GetRuleContext<SubrangeSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecificationInitContext enumSpecificationInit() {
			return GetRuleContext<EnumSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitPartAccessContext multibitPartAccess() {
			return GetRuleContext<MultibitPartAccessContext>(0);
		}
		public StructElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementDeclarationContext structElementDeclaration() {
		StructElementDeclarationContext _localctx = new StructElementDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_structElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			structElementName();
			State = 815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 811;
				locatedAt();
				State = 813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 812;
					multibitPartAccess();
					}
				}

				}
			}

			State = 817;
			Match(COLON);
			State = 823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 818;
				simpleSpecificationInit();
				}
				break;
			case 2:
				{
				State = 819;
				subrangeSpecificationInit();
				}
				break;
			case 3:
				{
				State = 820;
				enumSpecificationInit();
				}
				break;
			case 4:
				{
				State = 821;
				arraySpecificationInit();
				}
				break;
			case 5:
				{
				State = 822;
				structSpecificationInit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StructElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementNameContext structElementName() {
		StructElementNameContext _localctx = new StructElementNameContext(Context, State);
		EnterRule(_localctx, 114, RULE_structElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedAtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(stParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelativeAddressContext relativeAddress() {
			return GetRuleContext<RelativeAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartlySpecifiedAddressContext partlySpecifiedAddress() {
			return GetRuleContext<PartlySpecifiedAddressContext>(0);
		}
		public LocatedAtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedAt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedAt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedAtContext locatedAt() {
		LocatedAtContext _localctx = new LocatedAtContext(Context, State);
		EnterRule(_localctx, 116, RULE_locatedAt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			Match(AT);
			State = 830;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RELATIVE_ADDRESS:
				{
				State = 828;
				relativeAddress();
				}
				break;
			case DIRECT_VARIABLE:
				{
				State = 829;
				partlySpecifiedAddress();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelativeAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		public RelativeAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relativeAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelativeAddressContext relativeAddress() {
		RelativeAddressContext _localctx = new RelativeAddressContext(Context, State);
		EnterRule(_localctx, 118, RULE_relativeAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			Match(RELATIVE_ADDRESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartlySpecifiedAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_VARIABLE() { return GetToken(stParser.DIRECT_VARIABLE, 0); }
		public PartlySpecifiedAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partlySpecifiedAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartlySpecifiedAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartlySpecifiedAddressContext partlySpecifiedAddress() {
		PartlySpecifiedAddressContext _localctx = new PartlySpecifiedAddressContext(Context, State);
		EnterRule(_localctx, 120, RULE_partlySpecifiedAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834;
			Match(DIRECT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitPartAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(stParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		public MultibitPartAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitPartAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitPartAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitPartAccessContext multibitPartAccess() {
		MultibitPartAccessContext _localctx = new MultibitPartAccessContext(Context, State);
		EnterRule(_localctx, 122, RULE_multibitPartAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			Match(DOT);
			State = 837;
			_la = TokenStream.LA(1);
			if ( !(_la==RELATIVE_ADDRESS || _la==UNSIGNED_INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationContext structSpecification() {
			return GetRuleContext<StructSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		public StructSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecificationInitContext structSpecificationInit() {
		StructSpecificationInitContext _localctx = new StructSpecificationInitContext(Context, State);
		EnterRule(_localctx, 124, RULE_structSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			structSpecification();
			State = 842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 840;
				Match(ASSIGN);
				State = 841;
				structInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		public StructSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecificationContext structSpecification() {
		StructSpecificationContext _localctx = new StructSpecificationContext(Context, State);
		EnterRule(_localctx, 126, RULE_structSpecification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			structTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public StructTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeAccessContext structTypeAccess() {
		StructTypeAccessContext _localctx = new StructTypeAccessContext(Context, State);
		EnterRule(_localctx, 128, RULE_structTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 851;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 846;
					namespaceName();
					State = 847;
					Match(DOT);
					}
					} 
				}
				State = 853;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			State = 854;
			structTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementInitContext[] structElementInit() {
			return GetRuleContexts<StructElementInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementInitContext structElementInit(int i) {
			return GetRuleContext<StructElementInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public StructInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructInitContext structInit() {
		StructInitContext _localctx = new StructInitContext(Context, State);
		EnterRule(_localctx, 130, RULE_structInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			Match(LEFT_PAREN);
			State = 857;
			structElementInit();
			State = 862;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 858;
				Match(COMMA);
				State = 859;
				structElementInit();
				}
				}
				State = 864;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 865;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructElementNameContext structElementName() {
			return GetRuleContext<StructElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public StructElementInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementInitContext structElementInit() {
		StructElementInitContext _localctx = new StructElementInitContext(Context, State);
		EnterRule(_localctx, 132, RULE_structElementInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			structElementName();
			State = 868;
			Match(ASSIGN);
			State = 874;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 869;
				expression(0);
				}
				break;
			case 2:
				{
				State = 870;
				enumValue();
				}
				break;
			case 3:
				{
				State = 871;
				arrayInit();
				}
				break;
			case 4:
				{
				State = 872;
				structInit();
				}
				break;
			case 5:
				{
				State = 873;
				referenceValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		public StructVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructVarDeclarationInitContext structVarDeclarationInit() {
		StructVarDeclarationInitContext _localctx = new StructVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 134, RULE_structVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			variableList();
			State = 877;
			Match(COLON);
			State = 878;
			structSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringDerivedTypeNameContext stringDerivedTypeName() {
			return GetRuleContext<StringDerivedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeNameContext stringTypeName() {
			return GetRuleContext<StringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharStringContext charString() {
			return GetRuleContext<CharStringContext>(0);
		}
		public StringTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeDeclarationContext stringTypeDeclaration() {
		StringTypeDeclarationContext _localctx = new StringTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 136, RULE_stringTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880;
			stringDerivedTypeName();
			State = 881;
			Match(COLON);
			State = 882;
			stringTypeName();
			State = 885;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 883;
				Match(ASSIGN);
				State = 884;
				charString();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringDerivedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public StringDerivedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringDerivedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDerivedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringDerivedTypeNameContext stringDerivedTypeName() {
		StringDerivedTypeNameContext _localctx = new StringDerivedTypeNameContext(Context, State);
		EnterRule(_localctx, 138, RULE_stringDerivedTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 887;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringDerivedTypeNameContext stringDerivedTypeName() {
			return GetRuleContext<StringDerivedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public StringTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeAccessContext stringTypeAccess() {
		StringTypeAccessContext _localctx = new StringTypeAccessContext(Context, State);
		EnterRule(_localctx, 140, RULE_stringTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 889;
					namespaceName();
					State = 890;
					Match(DOT);
					}
					} 
				}
				State = 896;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			State = 897;
			stringDerivedTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeNameContext referenceTypeName() {
			return GetRuleContext<ReferenceTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationInitContext referenceSpecificationInit() {
			return GetRuleContext<ReferenceSpecificationInitContext>(0);
		}
		public ReferenceTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeDeclarationContext referenceTypeDeclaration() {
		ReferenceTypeDeclarationContext _localctx = new ReferenceTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 142, RULE_referenceTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			referenceTypeName();
			State = 900;
			Match(COLON);
			State = 901;
			referenceSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ReferenceTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeNameContext referenceTypeName() {
		ReferenceTypeNameContext _localctx = new ReferenceTypeNameContext(Context, State);
		EnterRule(_localctx, 144, RULE_referenceTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationContext referenceSpecification() {
			return GetRuleContext<ReferenceSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public ReferenceSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceSpecificationInitContext referenceSpecificationInit() {
		ReferenceSpecificationInitContext _localctx = new ReferenceSpecificationInitContext(Context, State);
		EnterRule(_localctx, 146, RULE_referenceSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			referenceSpecification();
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 906;
				Match(ASSIGN);
				State = 907;
				referenceValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REF_TO() { return GetTokens(stParser.REF_TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF_TO(int i) {
			return GetToken(stParser.REF_TO, i);
		}
		public ReferenceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceSpecificationContext referenceSpecification() {
		ReferenceSpecificationContext _localctx = new ReferenceSpecificationContext(Context, State);
		EnterRule(_localctx, 148, RULE_referenceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 910;
				Match(REF_TO);
				}
				}
				State = 913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==REF_TO );
			State = 915;
			dataTypeAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceAddressContext referenceAddress() {
			return GetRuleContext<ReferenceAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(stParser.NULL, 0); }
		public ReferenceValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceValueContext referenceValue() {
		ReferenceValueContext _localctx = new ReferenceValueContext(Context, State);
		EnterRule(_localctx, 150, RULE_referenceValue);
		try {
			State = 919;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 917;
				referenceAddress();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 918;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(stParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext functionBlockInstanceName() {
			return GetRuleContext<FunctionBlockInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName() {
			return GetRuleContext<ClassInstanceNameContext>(0);
		}
		public ReferenceAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceAddressContext referenceAddress() {
		ReferenceAddressContext _localctx = new ReferenceAddressContext(Context, State);
		EnterRule(_localctx, 152, RULE_referenceAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 921;
			Match(REF);
			State = 922;
			Match(LEFT_PAREN);
			State = 926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 923;
				symbolicVariable();
				}
				break;
			case 2:
				{
				State = 924;
				functionBlockInstanceName();
				}
				break;
			case 3:
				{
				State = 925;
				classInstanceName();
				}
				break;
			}
			State = 928;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeNameContext referenceTypeName() {
			return GetRuleContext<ReferenceTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ReferenceTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeAccessContext referenceTypeAccess() {
		ReferenceTypeAccessContext _localctx = new ReferenceTypeAccessContext(Context, State);
		EnterRule(_localctx, 154, RULE_referenceTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 935;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 930;
					namespaceName();
					State = 931;
					Match(DOT);
					}
					} 
				}
				State = 937;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			State = 938;
			referenceTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext[] referenceName() {
			return GetRuleContexts<ReferenceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext referenceName(int i) {
			return GetRuleContext<ReferenceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public ReferenceAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceAssignContext referenceAssign() {
		ReferenceAssignContext _localctx = new ReferenceAssignContext(Context, State);
		EnterRule(_localctx, 156, RULE_referenceAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940;
			referenceName();
			State = 941;
			Match(ASSIGN);
			State = 945;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 942;
				referenceName();
				}
				break;
			case 2:
				{
				State = 943;
				dereference();
				}
				break;
			case 3:
				{
				State = 944;
				referenceValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ReferenceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceNameContext referenceName() {
		ReferenceNameContext _localctx = new ReferenceNameContext(Context, State);
		EnterRule(_localctx, 158, RULE_referenceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 947;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext referenceName() {
			return GetRuleContext<ReferenceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public DereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DereferenceContext dereference() {
		DereferenceContext _localctx = new DereferenceContext(Context, State);
		EnterRule(_localctx, 160, RULE_dereference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			referenceName();
			State = 951;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 950;
					Match(CARET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 953;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_BLOCK() { return GetToken(stParser.FUNCTION_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockNameContext functionBlockName() {
			return GetRuleContext<FunctionBlockNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockBodyContext functionBlockBody() {
			return GetRuleContext<FunctionBlockBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FUNCTION_BLOCK() { return GetToken(stParser.END_FUNCTION_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(stParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockTypeAccessContext functionBlockTypeAccess() {
			return GetRuleContext<FunctionBlockTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		public FunctionBlockDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockDeclarationContext functionBlockDeclaration() {
		FunctionBlockDeclarationContext _localctx = new FunctionBlockDeclarationContext(Context, State);
		EnterRule(_localctx, 162, RULE_functionBlockDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955;
			Match(FUNCTION_BLOCK);
			State = 957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 956;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 959;
			functionBlockName();
			State = 963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 960;
				usingDirective();
				}
				}
				State = 965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 966;
				Match(EXTENDS);
				State = 969;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 967;
					functionBlockTypeAccess();
					}
					break;
				case 2:
					{
					State = 968;
					classTypeAccess();
					}
					break;
				}
				}
			}

			State = 975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 973;
				Match(IMPLEMENTS);
				State = 974;
				interfaceTypeList();
				}
			}

			State = 984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 3353L) != 0)) {
				{
				State = 982;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 977;
					ioVarDeclarations();
					}
					break;
				case 2:
					{
					State = 978;
					externalVarDeclarations();
					}
					break;
				case 3:
					{
					State = 979;
					normalVarDeclarations();
					}
					break;
				case 4:
					{
					State = 980;
					tempVarDeclarations();
					}
					break;
				case 5:
					{
					State = 981;
					otherVarDeclarations();
					}
					break;
				}
				}
				State = 986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 987;
				methodDeclaration();
				}
				}
				State = 992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 993;
			functionBlockBody();
			State = 994;
			Match(END_FUNCTION_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FunctionBlockNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockNameContext functionBlockName() {
		FunctionBlockNameContext _localctx = new FunctionBlockNameContext(Context, State);
		EnterRule(_localctx, 164, RULE_functionBlockName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockInstanceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockNameContext functionBlockName() {
			return GetRuleContext<FunctionBlockNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public FunctionBlockInstanceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockInstanceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockInstanceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockInstanceNameContext functionBlockInstanceName() {
		FunctionBlockInstanceNameContext _localctx = new FunctionBlockInstanceNameContext(Context, State);
		EnterRule(_localctx, 166, RULE_functionBlockInstanceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1003;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 998;
					namespaceName();
					State = 999;
					Match(COMMA);
					}
					} 
				}
				State = 1005;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			State = 1006;
			functionBlockName();
			State = 1010;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 1007;
				Match(CARET);
				}
				}
				State = 1012;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockTypeNameContext functionBlockTypeName() {
			return GetRuleContext<FunctionBlockTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public FunctionBlockTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockTypeAccessContext functionBlockTypeAccess() {
		FunctionBlockTypeAccessContext _localctx = new FunctionBlockTypeAccessContext(Context, State);
		EnterRule(_localctx, 168, RULE_functionBlockTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1013;
					namespaceName();
					State = 1014;
					Match(COMMA);
					}
					} 
				}
				State = 1020;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			State = 1021;
			functionBlockTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FunctionBlockTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockTypeNameContext functionBlockTypeName() {
		FunctionBlockTypeNameContext _localctx = new FunctionBlockTypeNameContext(Context, State);
		EnterRule(_localctx, 170, RULE_functionBlockTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FunctionBlockBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockBodyContext functionBlockBody() {
		FunctionBlockBodyContext _localctx = new FunctionBlockBodyContext(Context, State);
		EnterRule(_localctx, 172, RULE_functionBlockBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1025;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockVarSpecificationInitContext functionBlockVarSpecificationInit() {
			return GetRuleContext<FunctionBlockVarSpecificationInitContext>(0);
		}
		public FunctionBlockVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockVarDeclarationInitContext functionBlockVarDeclarationInit() {
		FunctionBlockVarDeclarationInitContext _localctx = new FunctionBlockVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 174, RULE_functionBlockVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027;
			variableList();
			State = 1028;
			Match(COLON);
			State = 1029;
			functionBlockVarSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockVarSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockTypeAccessContext functionBlockTypeAccess() {
			return GetRuleContext<FunctionBlockTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructInitContext structInit() {
			return GetRuleContext<StructInitContext>(0);
		}
		public FunctionBlockVarSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockVarSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlockVarSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockVarSpecificationInitContext functionBlockVarSpecificationInit() {
		FunctionBlockVarSpecificationInitContext _localctx = new FunctionBlockVarSpecificationInitContext(Context, State);
		EnterRule(_localctx, 176, RULE_functionBlockVarSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031;
			functionBlockTypeAccess();
			State = 1034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1032;
				Match(ASSIGN);
				State = 1033;
				structInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(stParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_METHOD() { return GetToken(stParser.END_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(stParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 178, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036;
			Match(METHOD);
			State = 1038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 15L) != 0)) {
				{
				State = 1037;
				accessSpecification();
				}
			}

			State = 1041;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 1040;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1044;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERRIDE) {
				{
				State = 1043;
				Match(OVERRIDE);
				}
			}

			State = 1046;
			methodName();
			State = 1049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1047;
				Match(COLON);
				State = 1048;
				dataTypeAccess();
				}
			}

			State = 1057;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 3353L) != 0)) {
				{
				State = 1055;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR_INPUT:
				case VAR_OUTPUT:
				case VAR_IN_OUT:
					{
					State = 1051;
					ioVarDeclarations();
					}
					break;
				case VAR_EXTERNAL:
					{
					State = 1052;
					externalVarDeclarations();
					}
					break;
				case VAR:
					{
					State = 1053;
					normalVarDeclarations();
					}
					break;
				case VAR_TEMP:
					{
					State = 1054;
					tempVarDeclarations();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1060;
			functionBody();
			State = 1061;
			Match(END_METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 180, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeAccessContext derivedTypeAccess() {
			return GetRuleContext<DerivedTypeAccessContext>(0);
		}
		public DataTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeAccessContext dataTypeAccess() {
		DataTypeAccessContext _localctx = new DataTypeAccessContext(Context, State);
		EnterRule(_localctx, 182, RULE_dataTypeAccess);
		try {
			State = 1067;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USINT:
			case UINT:
			case UDINT:
			case ULINT:
			case SINT:
			case INT:
			case DINT:
			case LINT:
			case REAL:
			case LREAL:
			case BYTE:
			case WORD:
			case DWORD:
			case LWORD:
			case BOOL:
			case STRING:
			case WSTRING:
			case CHAR:
			case WCHAR:
			case TIME:
			case LTIME:
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
			case DATE:
			case LDATE:
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1065;
				elementaryTypeName();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1066;
				derivedTypeAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeAccessContext simpleTypeAccess() {
			return GetRuleContext<SimpleTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeAccessContext subrangeTypeAccess() {
			return GetRuleContext<SubrangeTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeAccessContext enumTypeAccess() {
			return GetRuleContext<EnumTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeAccessContext arrayTypeAccess() {
			return GetRuleContext<ArrayTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeAccessContext stringTypeAccess() {
			return GetRuleContext<StringTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeAccessContext referenceTypeAccess() {
			return GetRuleContext<ReferenceTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext interfaceTypeAccess() {
			return GetRuleContext<InterfaceTypeAccessContext>(0);
		}
		public DerivedTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTypeAccessContext derivedTypeAccess() {
		DerivedTypeAccessContext _localctx = new DerivedTypeAccessContext(Context, State);
		EnterRule(_localctx, 184, RULE_derivedTypeAccess);
		try {
			State = 1078;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1069;
				simpleTypeAccess();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1070;
				subrangeTypeAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1071;
				enumTypeAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1072;
				arrayTypeAccess();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1073;
				structTypeAccess();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1074;
				stringTypeAccess();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1075;
				classTypeAccess();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1076;
				referenceTypeAccess();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1077;
				interfaceTypeAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectVariableContext directVariable() {
			return GetRuleContext<DirectVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 186, RULE_variable);
		try {
			State = 1082;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIRECT_VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1080;
				directVariable();
				}
				break;
			case THIS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1081;
				symbolicVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolicVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiElementVariableContext multiElementVariable() {
			return GetRuleContext<MultiElementVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(stParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		public SymbolicVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolicVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolicVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolicVariableContext symbolicVariable() {
		SymbolicVariableContext _localctx = new SymbolicVariableContext(Context, State);
		EnterRule(_localctx, 188, RULE_symbolicVariable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1093;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				{
				State = 1084;
				Match(THIS);
				State = 1085;
				Match(COMMA);
				}
				}
				break;
			case 2:
				{
				State = 1089;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1086;
						namespaceName();
						State = 1087;
						Match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1091;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 1097;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 1095;
				variableAccess();
				}
				break;
			case 2:
				{
				State = 1096;
				multiElementVariable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		public VariableAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAccessContext variableAccess() {
		VariableAccessContext _localctx = new VariableAccessContext(Context, State);
		EnterRule(_localctx, 190, RULE_variableAccess);
		try {
			State = 1101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1099;
				variableName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1100;
				dereference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 192, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1103;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiElementVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptListContext[] subscriptList() {
			return GetRuleContexts<SubscriptListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptListContext subscriptList(int i) {
			return GetRuleContext<SubscriptListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementSelectContext[] structElementSelect() {
			return GetRuleContexts<StructElementSelectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructElementSelectContext structElementSelect(int i) {
			return GetRuleContext<StructElementSelectContext>(i);
		}
		public MultiElementVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiElementVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiElementVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiElementVariableContext multiElementVariable() {
		MultiElementVariableContext _localctx = new MultiElementVariableContext(Context, State);
		EnterRule(_localctx, 194, RULE_multiElementVariable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			variableAccess();
			State = 1108;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 1108;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LEFT_BRACKET:
						{
						State = 1106;
						subscriptList();
						}
						break;
					case COMMA:
						{
						State = 1107;
						structElementSelect();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1110;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public SubscriptListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptListContext subscriptList() {
		SubscriptListContext _localctx = new SubscriptListContext(Context, State);
		EnterRule(_localctx, 196, RULE_subscriptList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			Match(LEFT_BRACKET);
			State = 1113;
			subscript();
			State = 1118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1114;
				Match(COMMA);
				State = 1115;
				subscript();
				}
				}
				State = 1120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1121;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 198, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1123;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementSelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(stParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructElementVariableContext structElementVariable() {
			return GetRuleContext<StructElementVariableContext>(0);
		}
		public StructElementSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementSelect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementSelectContext structElementSelect() {
		StructElementSelectContext _localctx = new StructElementSelectContext(Context, State);
		EnterRule(_localctx, 200, RULE_structElementSelect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			Match(COMMA);
			State = 1126;
			structElementVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructElementVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		public StructElementVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structElementVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructElementVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructElementVariableContext structElementVariable() {
		StructElementVariableContext _localctx = new StructElementVariableContext(Context, State);
		EnterRule(_localctx, 202, RULE_structElementVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1128;
			variableAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IoVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDeclarationsContext inputVarDeclarations() {
			return GetRuleContext<InputVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputVarDeclarationsContext outputVarDeclarations() {
			return GetRuleContext<OutputVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationsContext inOutVarDeclarations() {
			return GetRuleContext<InOutVarDeclarationsContext>(0);
		}
		public IoVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ioVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIoVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IoVarDeclarationsContext ioVarDeclarations() {
		IoVarDeclarationsContext _localctx = new IoVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 204, RULE_ioVarDeclarations);
		try {
			State = 1133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_INPUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1130;
				inputVarDeclarations();
				}
				break;
			case VAR_OUTPUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1131;
				outputVarDeclarations();
				}
				break;
			case VAR_IN_OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1132;
				inOutVarDeclarations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_INPUT() { return GetToken(stParser.VAR_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDeclarationContext[] inputVarDeclaration() {
			return GetRuleContexts<InputVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDeclarationContext inputVarDeclaration(int i) {
			return GetRuleContext<InputVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public InputVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVarDeclarationsContext inputVarDeclarations() {
		InputVarDeclarationsContext _localctx = new InputVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 206, RULE_inputVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135;
			Match(VAR_INPUT);
			State = 1137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1136;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1139;
				inputVarDeclaration();
				State = 1140;
				Match(SEMICOLON);
				}
				}
				State = 1146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1147;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EdgeDeclarationContext edgeDeclaration() {
			return GetRuleContext<EdgeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public InputVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVarDeclarationContext inputVarDeclaration() {
		InputVarDeclarationContext _localctx = new InputVarDeclarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_inputVarDeclaration);
		try {
			State = 1152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1149;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1150;
				edgeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1151;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(stParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_EDGE() { return GetToken(stParser.R_EDGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F_EDGE() { return GetToken(stParser.F_EDGE, 0); }
		public EdgeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeDeclarationContext edgeDeclaration() {
		EdgeDeclarationContext _localctx = new EdgeDeclarationContext(Context, State);
		EnterRule(_localctx, 210, RULE_edgeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1154;
			variableList();
			State = 1155;
			Match(COLON);
			State = 1156;
			Match(BOOL);
			State = 1157;
			_la = TokenStream.LA(1);
			if ( !(_la==R_EDGE || _la==F_EDGE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarDeclarationInitContext stringVarDeclarationInit() {
			return GetRuleContext<StringVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSpecificationInitContext referenceSpecificationInit() {
			return GetRuleContext<ReferenceSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayVarDeclarationInitContext arrayVarDeclarationInit() {
			return GetRuleContext<ArrayVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructVarDeclarationInitContext structVarDeclarationInit() {
			return GetRuleContext<StructVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockVarDeclarationInitContext functionBlockVarDeclarationInit() {
			return GetRuleContext<FunctionBlockVarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceVarDeclarationInitContext interfaceVarDeclarationInit() {
			return GetRuleContext<InterfaceVarDeclarationInitContext>(0);
		}
		public VarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationInitContext varDeclarationInit() {
		VarDeclarationInitContext _localctx = new VarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 212, RULE_varDeclarationInit);
		try {
			State = 1170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1159;
				variableList();
				State = 1160;
				Match(COLON);
				State = 1164;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 1161;
					simpleSpecificationInit();
					}
					break;
				case 2:
					{
					State = 1162;
					stringVarDeclarationInit();
					}
					break;
				case 3:
					{
					State = 1163;
					referenceSpecificationInit();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1166;
				arrayVarDeclarationInit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1167;
				structVarDeclarationInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1168;
				functionBlockVarDeclarationInit();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1169;
				interfaceVarDeclarationInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext[] variableName() {
			return GetRuleContexts<VariableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName(int i) {
			return GetRuleContext<VariableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public VariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListContext variableList() {
		VariableListContext _localctx = new VariableListContext(Context, State);
		EnterRule(_localctx, 214, RULE_variableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1172;
			variableName();
			State = 1177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1173;
				Match(COMMA);
				State = 1174;
				variableName();
				}
				}
				State = 1179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_OUTPUT() { return GetToken(stParser.VAR_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputVarDeclarationContext[] outputVarDeclaration() {
			return GetRuleContexts<OutputVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputVarDeclarationContext outputVarDeclaration(int i) {
			return GetRuleContext<OutputVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public OutputVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputVarDeclarationsContext outputVarDeclarations() {
		OutputVarDeclarationsContext _localctx = new OutputVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 216, RULE_outputVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180;
			Match(VAR_OUTPUT);
			State = 1182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1181;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1184;
				outputVarDeclaration();
				State = 1185;
				Match(SEMICOLON);
				}
				}
				State = 1191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1192;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public OutputVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputVarDeclarationContext outputVarDeclaration() {
		OutputVarDeclarationContext _localctx = new OutputVarDeclarationContext(Context, State);
		EnterRule(_localctx, 218, RULE_outputVarDeclaration);
		try {
			State = 1196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1194;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1195;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOutVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_IN_OUT() { return GetToken(stParser.VAR_IN_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationContext[] inOutVarDeclaration() {
			return GetRuleContexts<InOutVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOutVarDeclarationContext inOutVarDeclaration(int i) {
			return GetRuleContext<InOutVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public InOutVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOutVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOutVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOutVarDeclarationsContext inOutVarDeclarations() {
		InOutVarDeclarationsContext _localctx = new InOutVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 220, RULE_inOutVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1198;
			Match(VAR_IN_OUT);
			State = 1204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1199;
				inOutVarDeclaration();
				State = 1200;
				Match(SEMICOLON);
				}
				}
				State = 1206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1207;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOutVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit() {
			return GetRuleContext<VarDeclarationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConformDeclarationContext arrayConformDeclaration() {
			return GetRuleContext<ArrayConformDeclarationContext>(0);
		}
		public InOutVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOutVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOutVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOutVarDeclarationContext inOutVarDeclaration() {
		InOutVarDeclarationContext _localctx = new InOutVarDeclarationContext(Context, State);
		EnterRule(_localctx, 222, RULE_inOutVarDeclaration);
		try {
			State = 1211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1209;
				varDeclarationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1210;
				arrayConformDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public NormalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalVarDeclarationsContext normalVarDeclarations() {
		NormalVarDeclarationsContext _localctx = new NormalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 224, RULE_normalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1213;
			Match(VAR);
			State = 1215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1214;
				Match(CONSTANT);
				}
			}

			State = 1218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 15L) != 0)) {
				{
				State = 1217;
				accessSpecification();
				}
			}

			State = 1225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1220;
				varDeclarationInit();
				State = 1221;
				Match(SEMICOLON);
				}
				}
				State = 1227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1228;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RetainVarDeclarationsContext retainVarDeclarations() {
			return GetRuleContext<RetainVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonRetainVarDeclarationsContext nonRetainVarDeclarations() {
			return GetRuleContext<NonRetainVarDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedPartlyVarDeclarationContext locatedPartlyVarDeclaration() {
			return GetRuleContext<LocatedPartlyVarDeclarationContext>(0);
		}
		public OtherVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherVarDeclarationsContext otherVarDeclarations() {
		OtherVarDeclarationsContext _localctx = new OtherVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 226, RULE_otherVarDeclarations);
		try {
			State = 1233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1230;
				retainVarDeclarations();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1231;
				nonRetainVarDeclarations();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1232;
				locatedPartlyVarDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonRetainVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public NonRetainVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonRetainVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonRetainVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonRetainVarDeclarationsContext nonRetainVarDeclarations() {
		NonRetainVarDeclarationsContext _localctx = new NonRetainVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 228, RULE_nonRetainVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1235;
			Match(VAR);
			State = 1236;
			Match(NON_RETAIN);
			State = 1238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 15L) != 0)) {
				{
				State = 1237;
				accessSpecification();
				}
			}

			State = 1245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1240;
				varDeclarationInit();
				State = 1241;
				Match(SEMICOLON);
				}
				}
				State = 1247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1248;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetainVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecificationContext accessSpecification() {
			return GetRuleContext<AccessSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public RetainVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retainVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetainVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetainVarDeclarationsContext retainVarDeclarations() {
		RetainVarDeclarationsContext _localctx = new RetainVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 230, RULE_retainVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250;
			Match(VAR);
			State = 1251;
			Match(RETAIN);
			State = 1253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 15L) != 0)) {
				{
				State = 1252;
				accessSpecification();
				}
			}

			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1255;
				varDeclarationInit();
				State = 1256;
				Match(SEMICOLON);
				}
				}
				State = 1262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1263;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedPartlyVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocatedPartlyVarContext[] locatedPartlyVar() {
			return GetRuleContexts<LocatedPartlyVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedPartlyVarContext locatedPartlyVar(int i) {
			return GetRuleContext<LocatedPartlyVarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public LocatedPartlyVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedPartlyVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedPartlyVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedPartlyVarDeclarationContext locatedPartlyVarDeclaration() {
		LocatedPartlyVarDeclarationContext _localctx = new LocatedPartlyVarDeclarationContext(Context, State);
		EnterRule(_localctx, 232, RULE_locatedPartlyVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1265;
			Match(VAR);
			State = 1267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==NON_RETAIN) {
				{
				State = 1266;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==NON_RETAIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1269;
				locatedPartlyVar();
				}
				}
				State = 1274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1275;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedPartlyVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(stParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_ADDRESS() { return GetToken(stParser.RELATIVE_ADDRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecificationContext varSpecification() {
			return GetRuleContext<VarSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(stParser.SEMICOLON, 0); }
		public LocatedPartlyVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedPartlyVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedPartlyVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedPartlyVarContext locatedPartlyVar() {
		LocatedPartlyVarContext _localctx = new LocatedPartlyVarContext(Context, State);
		EnterRule(_localctx, 234, RULE_locatedPartlyVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1277;
			variableName();
			State = 1278;
			Match(AT);
			State = 1279;
			Match(RELATIVE_ADDRESS);
			State = 1280;
			Match(COLON);
			State = 1281;
			varSpecification();
			State = 1282;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringSpecificationContext stringSpecification() {
			return GetRuleContext<StringSpecificationContext>(0);
		}
		public VarSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSpecificationContext varSpecification() {
		VarSpecificationContext _localctx = new VarSpecificationContext(Context, State);
		EnterRule(_localctx, 236, RULE_varSpecification);
		try {
			State = 1288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1284;
				simpleSpecification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1285;
				arraySpecification();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1286;
				structTypeAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1287;
				stringSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(stParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarDeclarationContext[] locatedVarDeclaration() {
			return GetRuleContexts<LocatedVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarDeclarationContext locatedVarDeclaration(int i) {
			return GetRuleContext<LocatedVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_RETAIN() { return GetToken(stParser.NON_RETAIN, 0); }
		public LocatedVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedVarDeclarationsContext locatedVarDeclarations() {
		LocatedVarDeclarationsContext _localctx = new LocatedVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 238, RULE_locatedVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			Match(VAR);
			State = 1292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 19L) != 0)) {
				{
				State = 1291;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 19L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==IDENTIFIER) {
				{
				{
				State = 1294;
				locatedVarDeclaration();
				State = 1295;
				Match(SEMICOLON);
				}
				}
				State = 1301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1302;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarSpecificationInitContext locatedVarSpecificationInit() {
			return GetRuleContext<LocatedVarSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public LocatedVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedVarDeclarationContext locatedVarDeclaration() {
		LocatedVarDeclarationContext _localctx = new LocatedVarDeclarationContext(Context, State);
		EnterRule(_localctx, 240, RULE_locatedVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 1304;
				variableName();
				}
			}

			State = 1307;
			locatedAt();
			State = 1308;
			Match(COLON);
			State = 1309;
			locatedVarSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_TEMP() { return GetToken(stParser.VAR_TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext[] varDeclarationInit() {
			return GetRuleContexts<VarDeclarationInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationInitContext varDeclarationInit(int i) {
			return GetRuleContext<VarDeclarationInitContext>(i);
		}
		public TempVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempVarDeclarationsContext tempVarDeclarations() {
		TempVarDeclarationsContext _localctx = new TempVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 242, RULE_tempVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1311;
			Match(VAR_TEMP);
			State = 1317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				{
				State = 1312;
				varDeclarationInit();
				}
				State = 1313;
				Match(SEMICOLON);
				}
				}
				State = 1319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1320;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_EXTERNAL() { return GetToken(stParser.VAR_EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext[] externalDeclaration() {
			return GetRuleContexts<ExternalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext externalDeclaration(int i) {
			return GetRuleContext<ExternalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		public ExternalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalVarDeclarationsContext externalVarDeclarations() {
		ExternalVarDeclarationsContext _localctx = new ExternalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 244, RULE_externalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322;
			Match(VAR_EXTERNAL);
			State = 1324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1323;
				Match(CONSTANT);
				}
			}

			State = 1331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1326;
				externalDeclaration();
				State = 1327;
				Match(SEMICOLON);
				}
				}
				State = 1333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1334;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext globalVarName() {
			return GetRuleContext<GlobalVarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationContext simpleSpecification() {
			return GetRuleContext<SimpleSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationContext arraySpecification() {
			return GetRuleContext<ArraySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeAccessContext structTypeAccess() {
			return GetRuleContext<StructTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockTypeAccessContext functionBlockTypeAccess() {
			return GetRuleContext<FunctionBlockTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeAccessContext referenceTypeAccess() {
			return GetRuleContext<ReferenceTypeAccessContext>(0);
		}
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 246, RULE_externalDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1336;
			globalVarName();
			State = 1337;
			Match(COLON);
			State = 1343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 1338;
				simpleSpecification();
				}
				break;
			case 2:
				{
				State = 1339;
				arraySpecification();
				}
				break;
			case 3:
				{
				State = 1340;
				structTypeAccess();
				}
				break;
			case 4:
				{
				State = 1341;
				functionBlockTypeAccess();
				}
				break;
			case 5:
				{
				State = 1342;
				referenceTypeAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public GlobalVarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarNameContext globalVarName() {
		GlobalVarNameContext _localctx = new GlobalVarNameContext(Context, State);
		EnterRule(_localctx, 248, RULE_globalVarName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1345;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_GLOBAL() { return GetToken(stParser.VAR_GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_VAR() { return GetToken(stParser.END_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationContext[] globalVarDeclaration() {
			return GetRuleContexts<GlobalVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclarationContext globalVarDeclaration(int i) {
			return GetRuleContext<GlobalVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(stParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(stParser.RETAIN, 0); }
		public GlobalVarDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclarationsContext globalVarDeclarations() {
		GlobalVarDeclarationsContext _localctx = new GlobalVarDeclarationsContext(Context, State);
		EnterRule(_localctx, 250, RULE_globalVarDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1347;
			Match(VAR_GLOBAL);
			State = 1349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETAIN || _la==CONSTANT) {
				{
				State = 1348;
				_la = TokenStream.LA(1);
				if ( !(_la==RETAIN || _la==CONSTANT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 1351;
				globalVarDeclaration();
				State = 1352;
				Match(SEMICOLON);
				}
				}
				State = 1358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1359;
			Match(END_VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarSpecificationContext globalVarSpecification() {
			return GetRuleContext<GlobalVarSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocatedVarSpecificationInitContext locatedVarSpecificationInit() {
			return GetRuleContext<LocatedVarSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockTypeAccessContext functionBlockTypeAccess() {
			return GetRuleContext<FunctionBlockTypeAccessContext>(0);
		}
		public GlobalVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclarationContext globalVarDeclaration() {
		GlobalVarDeclarationContext _localctx = new GlobalVarDeclarationContext(Context, State);
		EnterRule(_localctx, 252, RULE_globalVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1361;
			globalVarSpecification();
			State = 1362;
			Match(COLON);
			State = 1365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				{
				State = 1363;
				locatedVarSpecificationInit();
				}
				break;
			case 2:
				{
				State = 1364;
				functionBlockTypeAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext[] globalVarName() {
			return GetRuleContexts<GlobalVarNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarNameContext globalVarName(int i) {
			return GetRuleContext<GlobalVarNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocatedAtContext locatedAt() {
			return GetRuleContext<LocatedAtContext>(0);
		}
		public GlobalVarSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarSpecificationContext globalVarSpecification() {
		GlobalVarSpecificationContext _localctx = new GlobalVarSpecificationContext(Context, State);
		EnterRule(_localctx, 254, RULE_globalVarSpecification);
		int _la;
		try {
			State = 1378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1367;
				globalVarName();
				State = 1372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1368;
					Match(COMMA);
					State = 1369;
					globalVarName();
					}
					}
					State = 1374;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1375;
				globalVarName();
				State = 1376;
				locatedAt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatedVarSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSpecificationInitContext simpleSpecificationInit() {
			return GetRuleContext<SimpleSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecificationInitContext arraySpecificationInit() {
			return GetRuleContext<ArraySpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSpecificationInitContext structSpecificationInit() {
			return GetRuleContext<StructSpecificationInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringSpecificationInitContext stringSpecificationInit() {
			return GetRuleContext<StringSpecificationInitContext>(0);
		}
		public LocatedVarSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatedVarSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatedVarSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatedVarSpecificationInitContext locatedVarSpecificationInit() {
		LocatedVarSpecificationInitContext _localctx = new LocatedVarSpecificationInitContext(Context, State);
		EnterRule(_localctx, 256, RULE_locatedVarSpecificationInit);
		try {
			State = 1384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1380;
				simpleSpecificationInit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1381;
				arraySpecificationInit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1382;
				structSpecificationInit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1383;
				stringSpecificationInit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringSpecificationInitContext stringSpecificationInit() {
			return GetRuleContext<StringSpecificationInitContext>(0);
		}
		public StringVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarDeclarationInitContext stringVarDeclarationInit() {
		StringVarDeclarationInitContext _localctx = new StringVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 258, RULE_stringVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386;
			variableList();
			State = 1387;
			Match(COLON);
			State = 1388;
			stringSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringSpecificationContext stringSpecification() {
			return GetRuleContext<StringSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringInitContext stringInit() {
			return GetRuleContext<StringInitContext>(0);
		}
		public StringSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringSpecificationInitContext stringSpecificationInit() {
		StringSpecificationInitContext _localctx = new StringSpecificationInitContext(Context, State);
		EnterRule(_localctx, 260, RULE_stringSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1390;
			stringSpecification();
			State = 1392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SINGLE_BYTE_STRING || _la==DOUBLE_BYTE_STRING) {
				{
				State = 1391;
				stringInit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringSizeContext stringSize() {
			return GetRuleContext<StringSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(stParser.RIGHT_BRACKET, 0); }
		public StringSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringSpecificationContext stringSpecification() {
		StringSpecificationContext _localctx = new StringSpecificationContext(Context, State);
		EnterRule(_localctx, 262, RULE_stringSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1394;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==WSTRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 1395;
				Match(LEFT_BRACKET);
				State = 1396;
				stringSize();
				State = 1397;
				Match(RIGHT_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BYTE_STRING() { return GetToken(stParser.SINGLE_BYTE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BYTE_STRING() { return GetToken(stParser.DOUBLE_BYTE_STRING, 0); }
		public StringInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringInitContext stringInit() {
		StringInitContext _localctx = new StringInitContext(Context, State);
		EnterRule(_localctx, 264, RULE_stringInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401;
			_la = TokenStream.LA(1);
			if ( !(_la==SINGLE_BYTE_STRING || _la==DOUBLE_BYTE_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(stParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FUNCTION() { return GetToken(stParser.END_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext[] tempVarDeclarations() {
			return GetRuleContexts<TempVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempVarDeclarationsContext tempVarDeclarations(int i) {
			return GetRuleContext<TempVarDeclarationsContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 266, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1403;
			Match(FUNCTION);
			State = 1404;
			functionName();
			State = 1407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1405;
				Match(COLON);
				State = 1406;
				dataTypeAccess();
				}
			}

			State = 1412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1409;
				usingDirective();
				}
				}
				State = 1414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 3353L) != 0)) {
				{
				State = 1419;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR_INPUT:
				case VAR_OUTPUT:
				case VAR_IN_OUT:
					{
					State = 1415;
					ioVarDeclarations();
					}
					break;
				case VAR_EXTERNAL:
					{
					State = 1416;
					externalVarDeclarations();
					}
					break;
				case VAR:
					{
					State = 1417;
					normalVarDeclarations();
					}
					break;
				case VAR_TEMP:
					{
					State = 1418;
					tempVarDeclarations();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1424;
			functionBody();
			State = 1425;
			Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 268, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1427;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(stParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CLASS() { return GetToken(stParser.END_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeAccessContext classTypeAccess() {
			return GetRuleContext<ClassTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(stParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext[] externalVarDeclarations() {
			return GetRuleContexts<ExternalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalVarDeclarationsContext externalVarDeclarations(int i) {
			return GetRuleContext<ExternalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext[] normalVarDeclarations() {
			return GetRuleContexts<NormalVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalVarDeclarationsContext normalVarDeclarations(int i) {
			return GetRuleContext<NormalVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext[] otherVarDeclarations() {
			return GetRuleContexts<OtherVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherVarDeclarationsContext otherVarDeclarations(int i) {
			return GetRuleContext<OtherVarDeclarationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(stParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(stParser.ABSTRACT, 0); }
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 270, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1429;
			Match(CLASS);
			State = 1431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==ABSTRACT) {
				{
				State = 1430;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==ABSTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1433;
			classTypeName();
			State = 1437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1434;
				usingDirective();
				}
				}
				State = 1439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1440;
				Match(EXTENDS);
				State = 1441;
				classTypeAccess();
				}
			}

			State = 1446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1444;
				Match(IMPLEMENTS);
				State = 1445;
				interfaceTypeList();
				}
			}

			State = 1453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VAR || _la==VAR_EXTERNAL) {
				{
				State = 1451;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
				case 1:
					{
					State = 1448;
					externalVarDeclarations();
					}
					break;
				case 2:
					{
					State = 1449;
					normalVarDeclarations();
					}
					break;
				case 3:
					{
					State = 1450;
					otherVarDeclarations();
					}
					break;
				}
				}
				State = 1455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 1456;
				methodDeclaration();
				}
				}
				State = 1461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1462;
			Match(END_CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ClassTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeNameContext classTypeName() {
		ClassTypeNameContext _localctx = new ClassTypeNameContext(Context, State);
		EnterRule(_localctx, 272, RULE_classTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1464;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public ClassTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeAccessContext classTypeAccess() {
		ClassTypeAccessContext _localctx = new ClassTypeAccessContext(Context, State);
		EnterRule(_localctx, 274, RULE_classTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1466;
					namespaceName();
					State = 1467;
					Match(DOT);
					}
					} 
				}
				State = 1473;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			}
			State = 1474;
			classTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 276, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1476;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(stParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(stParser.CARET, i);
		}
		public ClassInstanceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceNameContext classInstanceName() {
		ClassInstanceNameContext _localctx = new ClassInstanceNameContext(Context, State);
		EnterRule(_localctx, 278, RULE_classInstanceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1483;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1478;
					namespaceName();
					State = 1479;
					Match(DOT);
					}
					} 
				}
				State = 1485;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			State = 1486;
			className();
			State = 1490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 1487;
				Match(CARET);
				}
				}
				State = 1492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(stParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(stParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(stParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(stParser.INTERNAL, 0); }
		public AccessSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecificationContext accessSpecification() {
		AccessSpecificationContext _localctx = new AccessSpecificationContext(Context, State);
		EnterRule(_localctx, 280, RULE_accessSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(stParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceNameContext interfaceName() {
			return GetRuleContext<InterfaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_INTERFACE() { return GetToken(stParser.END_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(stParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodPrototypeContext[] methodPrototype() {
			return GetRuleContexts<MethodPrototypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodPrototypeContext methodPrototype(int i) {
			return GetRuleContext<MethodPrototypeContext>(i);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 282, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1495;
			Match(INTERFACE);
			State = 1496;
			interfaceName();
			State = 1500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 1497;
				usingDirective();
				}
				}
				State = 1502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1503;
				Match(EXTENDS);
				State = 1504;
				interfaceTypeList();
				}
			}

			State = 1510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==METHOD) {
				{
				{
				State = 1507;
				methodPrototype();
				}
				}
				State = 1512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1513;
			Match(END_INTERFACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public InterfaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceNameContext interfaceName() {
		InterfaceNameContext _localctx = new InterfaceNameContext(Context, State);
		EnterRule(_localctx, 284, RULE_interfaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1515;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext[] interfaceTypeAccess() {
			return GetRuleContexts<InterfaceTypeAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext interfaceTypeAccess(int i) {
			return GetRuleContext<InterfaceTypeAccessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(stParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(stParser.COLON, i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext interfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 286, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517;
			interfaceTypeAccess();
			State = 1522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 1518;
				Match(COLON);
				State = 1519;
				interfaceTypeAccess();
				}
				}
				State = 1524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceNameContext interfaceName() {
			return GetRuleContext<InterfaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public InterfaceTypeAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeAccessContext interfaceTypeAccess() {
		InterfaceTypeAccessContext _localctx = new InterfaceTypeAccessContext(Context, State);
		EnterRule(_localctx, 288, RULE_interfaceTypeAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1530;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1525;
					namespaceName();
					State = 1526;
					Match(DOT);
					}
					} 
				}
				State = 1532;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			}
			State = 1533;
			interfaceName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodPrototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(stParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_METHOD() { return GetToken(stParser.END_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeAccessContext dataTypeAccess() {
			return GetRuleContext<DataTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext[] ioVarDeclarations() {
			return GetRuleContexts<IoVarDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoVarDeclarationsContext ioVarDeclarations(int i) {
			return GetRuleContext<IoVarDeclarationsContext>(i);
		}
		public MethodPrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodPrototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodPrototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodPrototypeContext methodPrototype() {
		MethodPrototypeContext _localctx = new MethodPrototypeContext(Context, State);
		EnterRule(_localctx, 290, RULE_methodPrototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535;
			Match(METHOD);
			State = 1536;
			methodName();
			State = 1539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1537;
				Match(COLON);
				State = 1538;
				dataTypeAccess();
				}
			}

			State = 1544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1801439850948198400L) != 0)) {
				{
				{
				State = 1541;
				ioVarDeclarations();
				}
				}
				State = 1546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1547;
			Match(END_METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceVarDeclarationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceSpecificationInitContext interfaceSpecificationInit() {
			return GetRuleContext<InterfaceSpecificationInitContext>(0);
		}
		public InterfaceVarDeclarationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceVarDeclarationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceVarDeclarationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceVarDeclarationInitContext interfaceVarDeclarationInit() {
		InterfaceVarDeclarationInitContext _localctx = new InterfaceVarDeclarationInitContext(Context, State);
		EnterRule(_localctx, 292, RULE_interfaceVarDeclarationInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549;
			variableList();
			State = 1550;
			Match(COLON);
			State = 1551;
			interfaceSpecificationInit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceSpecificationInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeAccessContext interfaceTypeAccess() {
			return GetRuleContext<InterfaceTypeAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceValueContext interfaceValue() {
			return GetRuleContext<InterfaceValueContext>(0);
		}
		public InterfaceSpecificationInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceSpecificationInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceSpecificationInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceSpecificationInitContext interfaceSpecificationInit() {
		InterfaceSpecificationInitContext _localctx = new InterfaceSpecificationInitContext(Context, State);
		EnterRule(_localctx, 294, RULE_interfaceSpecificationInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553;
			interfaceTypeAccess();
			State = 1556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1554;
				Match(ASSIGN);
				State = 1555;
				interfaceValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolicVariableContext symbolicVariable() {
			return GetRuleContext<SymbolicVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext functionBlockInstanceName() {
			return GetRuleContext<FunctionBlockInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName() {
			return GetRuleContext<ClassInstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(stParser.NULL, 0); }
		public InterfaceValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceValueContext interfaceValue() {
		InterfaceValueContext _localctx = new InterfaceValueContext(Context, State);
		EnterRule(_localctx, 296, RULE_interfaceValue);
		try {
			State = 1562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1558;
				symbolicVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1559;
				functionBlockInstanceName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1560;
				classInstanceName();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1561;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(stParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(stParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 298, RULE_statementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1570;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1565;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DIRECT_VARIABLE || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 355833745512449L) != 0) || _la==IDENTIFIER) {
						{
						State = 1564;
						statement();
						}
					}

					State = 1567;
					Match(SEMICOLON);
					}
					} 
				}
				State = 1572;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogControlStatementContext subprogControlStatement() {
			return GetRuleContext<SubprogControlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 300, RULE_statement);
		try {
			State = 1577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1573;
				assignStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1574;
				subprogControlStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1575;
				selectionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1576;
				loopStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceAssignContext referenceAssign() {
			return GetRuleContext<ReferenceAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentAttemptContext assignmentAttempt() {
			return GetRuleContext<AssignmentAttemptContext>(0);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 302, RULE_assignStatement);
		try {
			State = 1585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1579;
				variable();
				State = 1580;
				Match(ASSIGN);
				State = 1581;
				expression(0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1583;
				referenceAssign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1584;
				assignmentAttempt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentAttemptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTEMPT_ASSIGN() { return GetToken(stParser.ATTEMPT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext[] referenceName() {
			return GetRuleContexts<ReferenceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNameContext referenceName(int i) {
			return GetRuleContext<ReferenceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext[] dereference() {
			return GetRuleContexts<DereferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference(int i) {
			return GetRuleContext<DereferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public AssignmentAttemptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentAttempt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentAttempt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentAttemptContext assignmentAttempt() {
		AssignmentAttemptContext _localctx = new AssignmentAttemptContext(Context, State);
		EnterRule(_localctx, 304, RULE_assignmentAttempt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1587;
				referenceName();
				}
				break;
			case 2:
				{
				State = 1588;
				dereference();
				}
				break;
			}
			State = 1591;
			Match(ATTEMPT_ASSIGN);
			State = 1595;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				{
				State = 1592;
				referenceName();
				}
				break;
			case 2:
				{
				State = 1593;
				dereference();
				}
				break;
			case 3:
				{
				State = 1594;
				referenceValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogControlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationStatementContext invocationStatement() {
			return GetRuleContext<InvocationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperCallStatementContext superCallStatement() {
			return GetRuleContext<SuperCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public SubprogControlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogControlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogControlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogControlStatementContext subprogControlStatement() {
		SubprogControlStatementContext _localctx = new SubprogControlStatementContext(Context, State);
		EnterRule(_localctx, 306, RULE_subprogControlStatement);
		try {
			State = 1601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1597;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1598;
				invocationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1599;
				superCallStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1600;
				returnStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionAccessContext functionAccess() {
			return GetRuleContext<FunctionAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(stParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext[] parameterAssign() {
			return GetRuleContexts<ParameterAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext parameterAssign(int i) {
			return GetRuleContext<ParameterAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 308, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1603;
			functionAccess();
			State = 1604;
			Match(LEFT_BRACKET);
			State = 1613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 54078373458083356L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 6755399441055745L) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 524353L) != 0)) {
				{
				State = 1605;
				parameterAssign();
				State = 1610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1606;
					Match(COMMA);
					State = 1607;
					parameterAssign();
					}
					}
					State = 1612;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1615;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext[] namespaceName() {
			return GetRuleContexts<NamespaceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName(int i) {
			return GetRuleContext<NamespaceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		public FunctionAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionAccessContext functionAccess() {
		FunctionAccessContext _localctx = new FunctionAccessContext(Context, State);
		EnterRule(_localctx, 310, RULE_functionAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1617;
					namespaceName();
					State = 1618;
					Match(DOT);
					}
					} 
				}
				State = 1624;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
			}
			State = 1625;
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 312, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext[] functionBlockInstanceName() {
			return GetRuleContexts<FunctionBlockInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockInstanceNameContext functionBlockInstanceName(int i) {
			return GetRuleContext<FunctionBlockInstanceNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext[] parameterAssign() {
			return GetRuleContexts<ParameterAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterAssignContext parameterAssign(int i) {
			return GetRuleContext<ParameterAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(stParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(stParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(stParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext[] classInstanceName() {
			return GetRuleContexts<ClassInstanceNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceNameContext classInstanceName(int i) {
			return GetRuleContext<ClassInstanceNameContext>(i);
		}
		public InvocationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationStatementContext invocationStatement() {
		InvocationStatementContext _localctx = new InvocationStatementContext(Context, State);
		EnterRule(_localctx, 314, RULE_invocationStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 1629;
				functionBlockInstanceName();
				}
				break;
			case 2:
				{
				State = 1632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THIS) {
					{
					State = 1630;
					Match(THIS);
					State = 1631;
					Match(DOT);
					}
				}

				{
				State = 1640;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1636;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
						case 1:
							{
							State = 1634;
							functionBlockInstanceName();
							}
							break;
						case 2:
							{
							State = 1635;
							classInstanceName();
							}
							break;
						}
						State = 1638;
						Match(DOT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1642;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				State = 1644;
				methodName();
				}
				break;
			}
			State = 1648;
			Match(LEFT_PAREN);
			State = 1657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 54078373458083356L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 6755399441055745L) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 524353L) != 0)) {
				{
				State = 1649;
				parameterAssign();
				State = 1654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1650;
					Match(COMMA);
					State = 1651;
					parameterAssign();
					}
					}
					State = 1656;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1659;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceAssignContext referenceAssign() {
			return GetRuleContext<ReferenceAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OUT() { return GetToken(stParser.ASSIGN_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(stParser.NOT, 0); }
		public ParameterAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterAssignContext parameterAssign() {
		ParameterAssignContext _localctx = new ParameterAssignContext(Context, State);
		EnterRule(_localctx, 316, RULE_parameterAssign);
		int _la;
		try {
			State = 1675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1664;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
				case 1:
					{
					State = 1661;
					variableName();
					State = 1662;
					Match(ASSIGN);
					}
					break;
				}
				State = 1666;
				expression(0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1667;
				referenceAssign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1668;
					Match(NOT);
					}
				}

				State = 1671;
				variableName();
				State = 1672;
				Match(ASSIGN_OUT);
				State = 1673;
				variable();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(stParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		public SuperCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperCallStatementContext superCallStatement() {
		SuperCallStatementContext _localctx = new SuperCallStatementContext(Context, State);
		EnterRule(_localctx, 318, RULE_superCallStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1677;
			Match(SUPER);
			State = 1678;
			Match(LEFT_PAREN);
			State = 1679;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(stParser.RETURN, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 320, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 322, RULE_selectionStatement);
		try {
			State = 1685;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1683;
				ifStatement();
				}
				break;
			case CASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1684;
				caseStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(stParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(stParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(stParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_IF() { return GetToken(stParser.END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSIF() { return GetTokens(stParser.ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF(int i) {
			return GetToken(stParser.ELSIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(stParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 324, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687;
			Match(IF);
			State = 1688;
			expression(0);
			State = 1689;
			Match(THEN);
			State = 1690;
			statementList();
			State = 1698;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 1691;
				Match(ELSIF);
				State = 1692;
				expression(0);
				State = 1693;
				Match(THEN);
				State = 1694;
				statementList();
				}
				}
				State = 1700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1703;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1701;
				Match(ELSE);
				State = 1702;
				statementList();
				}
			}

			State = 1705;
			Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(stParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(stParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CASE() { return GetToken(stParser.END_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseSelectionContext[] caseSelection() {
			return GetRuleContexts<CaseSelectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseSelectionContext caseSelection(int i) {
			return GetRuleContext<CaseSelectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(stParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 326, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1707;
			Match(CASE);
			State = 1708;
			expression(0);
			State = 1709;
			Match(OF);
			State = 1711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1710;
				caseSelection();
				}
				}
				State = 1713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 54078373458083356L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 6755399441055745L) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 524353L) != 0) );
			State = 1717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1715;
				Match(ELSE);
				State = 1716;
				statementList();
				}
			}

			State = 1719;
			Match(END_CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseSelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseListContext caseList() {
			return GetRuleContext<CaseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(stParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseSelection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseSelectionContext caseSelection() {
		CaseSelectionContext _localctx = new CaseSelectionContext(Context, State);
		EnterRule(_localctx, 328, RULE_caseSelection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1721;
			caseList();
			State = 1722;
			Match(COLON);
			State = 1723;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext[] caseListElement() {
			return GetRuleContexts<CaseListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext caseListElement(int i) {
			return GetRuleContext<CaseListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(stParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(stParser.COMMA, i);
		}
		public CaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListContext caseList() {
		CaseListContext _localctx = new CaseListContext(Context, State);
		EnterRule(_localctx, 330, RULE_caseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1725;
			caseListElement();
			State = 1730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1726;
				Match(COMMA);
				State = 1727;
				caseListElement();
				}
				}
				State = 1732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListElementContext caseListElement() {
		CaseListElementContext _localctx = new CaseListElementContext(Context, State);
		EnterRule(_localctx, 332, RULE_caseListElement);
		try {
			State = 1735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1733;
				subrange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1734;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStatementContext exitStatement() {
			return GetRuleContext<ExitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 334, RULE_loopStatement);
		try {
			State = 1742;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1737;
				forStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1738;
				whileStatement();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1739;
				repeatStatement();
				}
				break;
			case EXIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1740;
				exitStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1741;
				continueStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(stParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ControlVariableContext controlVariable() {
			return GetRuleContext<ControlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForRangeContext forRange() {
			return GetRuleContext<ForRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(stParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FOR() { return GetToken(stParser.END_FOR, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 336, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1744;
			Match(FOR);
			State = 1745;
			controlVariable();
			State = 1746;
			Match(ASSIGN);
			State = 1747;
			forRange();
			State = 1748;
			Match(DO);
			State = 1749;
			statementList();
			State = 1750;
			Match(END_FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(stParser.IDENTIFIER, 0); }
		public ControlVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlVariableContext controlVariable() {
		ControlVariableContext _localctx = new ControlVariableContext(Context, State);
		EnterRule(_localctx, 338, RULE_controlVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1752;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(stParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(stParser.BY, 0); }
		public ForRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeContext forRange() {
		ForRangeContext _localctx = new ForRangeContext(Context, State);
		EnterRule(_localctx, 340, RULE_forRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754;
			expression(0);
			State = 1755;
			Match(TO);
			State = 1756;
			expression(0);
			State = 1759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 1757;
				Match(BY);
				State = 1758;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(stParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(stParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_WHILE() { return GetToken(stParser.END_WHILE, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 342, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1761;
			Match(WHILE);
			State = 1762;
			expression(0);
			State = 1763;
			Match(DO);
			State = 1764;
			statementList();
			State = 1765;
			Match(END_WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(stParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(stParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_REPEAT() { return GetToken(stParser.END_REPEAT, 0); }
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 344, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767;
			Match(REPEAT);
			State = 1768;
			statementList();
			State = 1769;
			Match(UNTIL);
			State = 1770;
			expression(0);
			State = 1771;
			Match(END_REPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableValueContext variableValue() {
			return GetRuleContext<VariableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceValueContext referenceValue() {
			return GetRuleContext<ReferenceValueContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(stParser.OR, 0); }
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(stParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(stParser.AND, 0); }
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(stParser.POWER, 0); }
		public ExponentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(stParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(stParser.MINUS, 0); }
		public AddSubExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(stParser.XOR, 0); }
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(stParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(stParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(stParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(stParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(stParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(stParser.NOT_EQUAL, 0); }
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(stParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(stParser.RIGHT_PAREN, 0); }
		public BracketedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DerefExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		public DerefExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(stParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(stParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(stParser.NOT, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FuncCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultDivModExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(stParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(stParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(stParser.MOD, 0); }
		public MultDivModExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultDivModExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 346;
		EnterRecursionRule(_localctx, 346, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1788;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1778;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1774;
					literalValue();
					}
					break;
				case 2:
					{
					State = 1775;
					variableValue();
					}
					break;
				case 3:
					{
					State = 1776;
					enumValue();
					}
					break;
				case 4:
					{
					State = 1777;
					referenceValue();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new BracketedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1780;
				Match(LEFT_PAREN);
				State = 1781;
				expression(0);
				State = 1782;
				Match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new FuncCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1784;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new DerefExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1785;
				dereference();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1786;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 16387L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1787;
				expression(8);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1813;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1811;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
					case 1:
						{
						_localctx = new ExponentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1790;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1791;
						Match(POWER);
						State = 1792;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new MultDivModExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1793;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1794;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & 13L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1795;
						expression(7);
						}
						break;
					case 3:
						{
						_localctx = new AddSubExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1796;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1797;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1798;
						expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1799;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1800;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & 63L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1801;
						expression(5);
						}
						break;
					case 5:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1802;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1803;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==AMPERSAND) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1804;
						expression(4);
						}
						break;
					case 6:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1805;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1806;
						Match(XOR);
						State = 1807;
						expression(3);
						}
						break;
					case 7:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1808;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1809;
						Match(OR);
						State = 1810;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 1815;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(stParser.EXIT, 0); }
		public ExitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStatementContext exitStatement() {
		ExitStatementContext _localctx = new ExitStatementContext(Context, State);
		EnterRule(_localctx, 348, RULE_exitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1816;
			Match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(stParser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 350, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1818;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitPartAccessContext multibitPartAccess() {
			return GetRuleContext<MultibitPartAccessContext>(0);
		}
		public VariableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableValueContext variableValue() {
		VariableValueContext _localctx = new VariableValueContext(Context, State);
		EnterRule(_localctx, 352, RULE_variableValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1820;
			variable();
			State = 1822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				State = 1821;
				multibitPartAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralContext realLiteral() {
			return GetRuleContext<RealLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeLiteralContext timeLiteral() {
			return GetRuleContext<TimeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsLiteralContext multibitsLiteral() {
			return GetRuleContext<MultibitsLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 354, RULE_literalValue);
		try {
			State = 1830;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1824;
				intLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1825;
				realLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1826;
				charLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1827;
				timeLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1828;
				multibitsLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1829;
				boolLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralValueContext intLiteralValue() {
			return GetRuleContext<IntLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeNameContext intTypeName() {
			return GetRuleContext<IntTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public IntLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralContext intLiteral() {
		IntLiteralContext _localctx = new IntLiteralContext(Context, State);
		EnterRule(_localctx, 356, RULE_intLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1835;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16711680L) != 0)) {
				{
				State = 1832;
				intTypeName();
				State = 1833;
				Match(HASH);
				}
			}

			State = 1837;
			intLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_INT() { return GetToken(stParser.SIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_INT() { return GetToken(stParser.BINARY_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_INT() { return GetToken(stParser.OCTAL_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INT() { return GetToken(stParser.HEX_INT, 0); }
		public IntLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralValueContext intLiteralValue() {
		IntLiteralValueContext _localctx = new IntLiteralValueContext(Context, State);
		EnterRule(_localctx, 358, RULE_intLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1839;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 31744L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USINT() { return GetToken(stParser.USINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(stParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDINT() { return GetToken(stParser.UDINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULINT() { return GetToken(stParser.ULINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT() { return GetToken(stParser.SINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(stParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DINT() { return GetToken(stParser.DINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINT() { return GetToken(stParser.LINT, 0); }
		public IntTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntTypeNameContext intTypeName() {
		IntTypeNameContext _localctx = new IntTypeNameContext(Context, State);
		EnterRule(_localctx, 360, RULE_intTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1841;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16711680L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsLiteralValueContext multibitsLiteralValue() {
			return GetRuleContext<MultibitsLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultibitsTypeNameContext multibitsTypeName() {
			return GetRuleContext<MultibitsTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public MultibitsLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsLiteralContext multibitsLiteral() {
		MultibitsLiteralContext _localctx = new MultibitsLiteralContext(Context, State);
		EnterRule(_localctx, 362, RULE_multibitsLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) {
				{
				State = 1843;
				multibitsTypeName();
				State = 1844;
				Match(HASH);
				}
			}

			State = 1848;
			multibitsLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_INT() { return GetToken(stParser.BINARY_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_INT() { return GetToken(stParser.OCTAL_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INT() { return GetToken(stParser.HEX_INT, 0); }
		public MultibitsLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsLiteralValueContext multibitsLiteralValue() {
		MultibitsLiteralValueContext _localctx = new MultibitsLiteralValueContext(Context, State);
		EnterRule(_localctx, 364, RULE_multibitsLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1850;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultibitsTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(stParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(stParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DWORD() { return GetToken(stParser.DWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LWORD() { return GetToken(stParser.LWORD, 0); }
		public MultibitsTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibitsTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultibitsTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultibitsTypeNameContext multibitsTypeName() {
		MultibitsTypeNameContext _localctx = new MultibitsTypeNameContext(Context, State);
		EnterRule(_localctx, 366, RULE_multibitsTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1852;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralValueContext realLiteralValue() {
			return GetRuleContext<RealLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeNameContext realTypeName() {
			return GetRuleContext<RealTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public RealLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralContext realLiteral() {
		RealLiteralContext _localctx = new RealLiteralContext(Context, State);
		EnterRule(_localctx, 368, RULE_realLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REAL || _la==LREAL) {
				{
				State = 1854;
				realTypeName();
				State = 1855;
				Match(HASH);
				}
			}

			State = 1859;
			realLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_VALUE() { return GetToken(stParser.REAL_VALUE, 0); }
		public RealLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralValueContext realLiteralValue() {
		RealLiteralValueContext _localctx = new RealLiteralValueContext(Context, State);
		EnterRule(_localctx, 370, RULE_realLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1861;
			Match(REAL_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(stParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LREAL() { return GetToken(stParser.LREAL, 0); }
		public RealTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealTypeNameContext realTypeName() {
		RealTypeNameContext _localctx = new RealTypeNameContext(Context, State);
		EnterRule(_localctx, 372, RULE_realTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1863;
			_la = TokenStream.LA(1);
			if ( !(_la==REAL || _la==LREAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralValueContext boolLiteralValue() {
			return GetRuleContext<BoolLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTypeNameContext boolTypeName() {
			return GetRuleContext<BoolTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 374, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1868;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BOOL) {
				{
				State = 1865;
				boolTypeName();
				State = 1866;
				Match(HASH);
				}
			}

			State = 1870;
			boolLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(stParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_INT() { return GetToken(stParser.UNSIGNED_INT, 0); }
		public BoolLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralValueContext boolLiteralValue() {
		BoolLiteralValueContext _localctx = new BoolLiteralValueContext(Context, State);
		EnterRule(_localctx, 376, RULE_boolLiteralValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1872;
			_la = TokenStream.LA(1);
			if ( !(_la==UNSIGNED_INT || _la==BOOLEAN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(stParser.BOOL, 0); }
		public BoolTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolTypeNameContext boolTypeName() {
		BoolTypeNameContext _localctx = new BoolTypeNameContext(Context, State);
		EnterRule(_localctx, 378, RULE_boolTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharStringContext charString() {
			return GetRuleContext<CharStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharStringTypeNameContext charStringTypeName() {
			return GetRuleContext<CharStringTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 380, RULE_charLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 128849018880L) != 0)) {
				{
				State = 1876;
				charStringTypeName();
				State = 1877;
				Match(HASH);
				}
			}

			State = 1881;
			charString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BYTE_STRING() { return GetToken(stParser.SINGLE_BYTE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BYTE_STRING() { return GetToken(stParser.DOUBLE_BYTE_STRING, 0); }
		public CharStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharStringContext charString() {
		CharStringContext _localctx = new CharStringContext(Context, State);
		EnterRule(_localctx, 382, RULE_charString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1883;
			_la = TokenStream.LA(1);
			if ( !(_la==SINGLE_BYTE_STRING || _la==DOUBLE_BYTE_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharStringTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(stParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(stParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WCHAR() { return GetToken(stParser.WCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSTRING() { return GetToken(stParser.WSTRING, 0); }
		public CharStringTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charStringTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharStringTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharStringTypeNameContext charStringTypeName() {
		CharStringTypeNameContext _localctx = new CharStringTypeNameContext(Context, State);
		EnterRule(_localctx, 384, RULE_charStringTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1885;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 128849018880L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationLiteralContext durationLiteral() {
			return GetRuleContext<DurationLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayLiteralContext timeOfDayLiteral() {
			return GetRuleContext<TimeOfDayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeLiteralContext dateAndTimeLiteral() {
			return GetRuleContext<DateAndTimeLiteralContext>(0);
		}
		public TimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeLiteralContext timeLiteral() {
		TimeLiteralContext _localctx = new TimeLiteralContext(Context, State);
		EnterRule(_localctx, 386, RULE_timeLiteral);
		try {
			State = 1891;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TIME:
			case LTIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1887;
				durationLiteral();
				}
				break;
			case TIME_OF_DAY:
			case LTIME_OF_DAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1888;
				timeOfDayLiteral();
				}
				break;
			case DATE:
			case LDATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1889;
				dateLiteral();
				}
				break;
			case DATE_AND_TIME:
			case LDATE_AND_TIME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1890;
				dateAndTimeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DurationLiteralValueContext durationLiteralValue() {
			return GetRuleContext<DurationLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationTypeNameContext durationTypeName() {
			return GetRuleContext<DurationTypeNameContext>(0);
		}
		public DurationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationLiteralContext durationLiteral() {
		DurationLiteralContext _localctx = new DurationLiteralContext(Context, State);
		EnterRule(_localctx, 388, RULE_durationLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1893;
			durationTypeName();
			}
			State = 1894;
			Match(HASH);
			State = 1895;
			durationLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DURATION() { return GetToken(stParser.DURATION, 0); }
		public DurationLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationLiteralValueContext durationLiteralValue() {
		DurationLiteralValueContext _localctx = new DurationLiteralValueContext(Context, State);
		EnterRule(_localctx, 390, RULE_durationLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1897;
			Match(DURATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(stParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTIME() { return GetToken(stParser.LTIME, 0); }
		public DurationTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationTypeNameContext durationTypeName() {
		DurationTypeNameContext _localctx = new DurationTypeNameContext(Context, State);
		EnterRule(_localctx, 392, RULE_durationTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1899;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME || _la==LTIME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayTypeNameContext timeOfDayTypeName() {
			return GetRuleContext<TimeOfDayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayLiteralValueContext timeOfDayLiteralValue() {
			return GetRuleContext<TimeOfDayLiteralValueContext>(0);
		}
		public TimeOfDayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayLiteralContext timeOfDayLiteral() {
		TimeOfDayLiteralContext _localctx = new TimeOfDayLiteralContext(Context, State);
		EnterRule(_localctx, 394, RULE_timeOfDayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1901;
			timeOfDayTypeName();
			State = 1902;
			Match(HASH);
			State = 1903;
			timeOfDayLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCK_TIME() { return GetToken(stParser.CLOCK_TIME, 0); }
		public TimeOfDayLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayLiteralValueContext timeOfDayLiteralValue() {
		TimeOfDayLiteralValueContext _localctx = new TimeOfDayLiteralValueContext(Context, State);
		EnterRule(_localctx, 396, RULE_timeOfDayLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1905;
			Match(CLOCK_TIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_OF_DAY() { return GetToken(stParser.TIME_OF_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTIME_OF_DAY() { return GetToken(stParser.LTIME_OF_DAY, 0); }
		public TimeOfDayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayTypeNameContext timeOfDayTypeName() {
		TimeOfDayTypeNameContext _localctx = new TimeOfDayTypeNameContext(Context, State);
		EnterRule(_localctx, 398, RULE_timeOfDayTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1907;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME_OF_DAY || _la==LTIME_OF_DAY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralValueContext dateLiteralValue() {
			return GetRuleContext<DateLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTypeNameContext dateTypeName() {
			return GetRuleContext<DateTypeNameContext>(0);
		}
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(Context, State);
		EnterRule(_localctx, 400, RULE_dateLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1909;
			dateTypeName();
			}
			State = 1910;
			Match(HASH);
			State = 1911;
			dateLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_VALUE() { return GetToken(stParser.DATE_VALUE, 0); }
		public DateLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralValueContext dateLiteralValue() {
		DateLiteralValueContext _localctx = new DateLiteralValueContext(Context, State);
		EnterRule(_localctx, 402, RULE_dateLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1913;
			Match(DATE_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(stParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDATE() { return GetToken(stParser.LDATE, 0); }
		public DateTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTypeNameContext dateTypeName() {
		DateTypeNameContext _localctx = new DateTypeNameContext(Context, State);
		EnterRule(_localctx, 404, RULE_dateTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1915;
			_la = TokenStream.LA(1);
			if ( !(_la==DATE || _la==LDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(stParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeLiteralValueContext dateAndTimeLiteralValue() {
			return GetRuleContext<DateAndTimeLiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateAndTimeTypeNameContext dateAndTimeTypeName() {
			return GetRuleContext<DateAndTimeTypeNameContext>(0);
		}
		public DateAndTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeLiteralContext dateAndTimeLiteral() {
		DateAndTimeLiteralContext _localctx = new DateAndTimeLiteralContext(Context, State);
		EnterRule(_localctx, 406, RULE_dateAndTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1917;
			dateAndTimeTypeName();
			}
			State = 1918;
			Match(HASH);
			State = 1919;
			dateAndTimeLiteralValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeLiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_TIME_VALUE() { return GetToken(stParser.DATE_TIME_VALUE, 0); }
		public DateAndTimeLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeLiteralValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeLiteralValueContext dateAndTimeLiteralValue() {
		DateAndTimeLiteralValueContext _localctx = new DateAndTimeLiteralValueContext(Context, State);
		EnterRule(_localctx, 408, RULE_dateAndTimeLiteralValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1921;
			Match(DATE_TIME_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateAndTimeTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_AND_TIME() { return GetToken(stParser.DATE_AND_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDATE_AND_TIME() { return GetToken(stParser.LDATE_AND_TIME, 0); }
		public DateAndTimeTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateAndTimeTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAndTimeTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateAndTimeTypeNameContext dateAndTimeTypeName() {
		DateAndTimeTypeNameContext _localctx = new DateAndTimeTypeNameContext(Context, State);
		EnterRule(_localctx, 410, RULE_dateAndTimeTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1923;
			_la = TokenStream.LA(1);
			if ( !(_la==DATE_AND_TIME || _la==LDATE_AND_TIME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_VARIABLE() { return GetToken(stParser.DIRECT_VARIABLE, 0); }
		public DirectVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstVisitor<TResult> typedVisitor = visitor as IstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectVariableContext directVariable() {
		DirectVariableContext _localctx = new DirectVariableContext(Context, State);
		EnterRule(_localctx, 412, RULE_directVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1925;
			Match(DIRECT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 173: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,170,1928,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		1,0,1,0,5,0,417,8,0,10,0,12,0,420,9,0,1,0,1,0,1,0,1,0,1,0,3,0,427,8,0,
		4,0,429,8,0,11,0,12,0,430,1,1,5,1,434,8,1,10,1,12,1,437,9,1,1,1,1,1,1,
		1,3,1,442,8,1,1,2,1,2,3,2,446,8,2,1,2,1,2,5,2,450,8,2,10,2,12,2,453,9,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,4,3,464,8,3,11,3,12,3,465,1,4,1,
		4,1,4,5,4,471,8,4,10,4,12,4,474,9,4,1,5,1,5,1,6,1,6,1,6,1,6,5,6,482,8,
		6,10,6,12,6,485,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,497,8,
		7,10,7,12,7,500,9,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,5,9,510,8,9,10,9,12,
		9,513,9,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,4,11,523,8,11,11,11,12,
		11,524,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,536,8,12,1,13,
		1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,3,15,547,8,15,1,16,1,16,1,17,1,
		17,3,17,553,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,564,
		8,18,1,19,1,19,1,19,5,19,569,8,19,10,19,12,19,572,9,19,1,19,1,19,1,20,
		1,20,1,20,1,20,1,20,3,20,581,8,20,1,20,1,20,3,20,585,8,20,1,21,1,21,1,
		22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,3,24,598,8,24,1,25,1,25,1,25,
		1,25,1,25,1,25,3,25,606,8,25,1,26,1,26,1,27,1,27,1,27,5,27,613,8,27,10,
		27,12,27,616,9,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,
		31,1,31,1,31,3,31,631,8,31,1,31,1,31,3,31,635,8,31,1,32,1,32,1,33,1,33,
		1,33,1,33,5,33,643,8,33,10,33,12,33,646,9,33,1,33,1,33,1,33,3,33,651,8,
		33,1,34,1,34,1,34,3,34,656,8,34,1,35,1,35,1,36,1,36,3,36,662,8,36,1,37,
		1,37,1,37,3,37,667,8,37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,675,8,38,10,
		38,12,38,678,9,38,1,38,1,38,1,38,3,38,683,8,38,1,38,1,38,3,38,687,8,38,
		1,39,1,39,1,39,5,39,692,8,39,10,39,12,39,695,9,39,1,39,1,39,1,40,1,40,
		1,40,1,40,1,41,1,41,1,42,1,42,1,42,3,42,708,8,42,1,43,1,43,1,43,1,43,1,
		43,1,43,5,43,716,8,43,10,43,12,43,719,9,43,1,43,1,43,1,43,1,43,3,43,725,
		8,43,1,44,1,44,1,44,5,44,730,8,44,10,44,12,44,733,9,44,1,44,1,44,1,45,
		1,45,1,45,1,45,5,45,741,8,45,10,45,12,45,744,9,45,1,45,1,45,1,46,1,46,
		1,46,1,46,3,46,752,8,46,1,46,1,46,3,46,756,8,46,1,47,1,47,1,48,1,48,1,
		48,1,48,3,48,764,8,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,5,50,
		775,8,50,10,50,12,50,778,9,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,
		1,52,1,52,1,52,1,52,1,53,1,53,1,54,1,54,3,54,796,8,54,1,55,1,55,3,55,800,
		8,55,1,55,1,55,1,55,4,55,805,8,55,11,55,12,55,806,1,55,1,55,1,56,1,56,
		1,56,3,56,814,8,56,3,56,816,8,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,824,
		8,56,1,57,1,57,1,58,1,58,1,58,3,58,831,8,58,1,59,1,59,1,60,1,60,1,61,1,
		61,1,61,1,62,1,62,1,62,3,62,843,8,62,1,63,1,63,1,64,1,64,1,64,5,64,850,
		8,64,10,64,12,64,853,9,64,1,64,1,64,1,65,1,65,1,65,1,65,5,65,861,8,65,
		10,65,12,65,864,9,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,
		875,8,66,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,3,68,886,8,68,1,
		69,1,69,1,70,1,70,1,70,5,70,893,8,70,10,70,12,70,896,9,70,1,70,1,70,1,
		71,1,71,1,71,1,71,1,72,1,72,1,73,1,73,1,73,3,73,909,8,73,1,74,4,74,912,
		8,74,11,74,12,74,913,1,74,1,74,1,75,1,75,3,75,920,8,75,1,76,1,76,1,76,
		1,76,1,76,3,76,927,8,76,1,76,1,76,1,77,1,77,1,77,5,77,934,8,77,10,77,12,
		77,937,9,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,3,78,946,8,78,1,79,1,79,
		1,80,1,80,4,80,952,8,80,11,80,12,80,953,1,81,1,81,3,81,958,8,81,1,81,1,
		81,5,81,962,8,81,10,81,12,81,965,9,81,1,81,1,81,1,81,3,81,970,8,81,3,81,
		972,8,81,1,81,1,81,3,81,976,8,81,1,81,1,81,1,81,1,81,1,81,5,81,983,8,81,
		10,81,12,81,986,9,81,1,81,5,81,989,8,81,10,81,12,81,992,9,81,1,81,1,81,
		1,81,1,82,1,82,1,83,1,83,1,83,5,83,1002,8,83,10,83,12,83,1005,9,83,1,83,
		1,83,5,83,1009,8,83,10,83,12,83,1012,9,83,1,84,1,84,1,84,5,84,1017,8,84,
		10,84,12,84,1020,9,84,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,87,1,87,
		1,88,1,88,1,88,3,88,1035,8,88,1,89,1,89,3,89,1039,8,89,1,89,3,89,1042,
		8,89,1,89,3,89,1045,8,89,1,89,1,89,1,89,3,89,1050,8,89,1,89,1,89,1,89,
		1,89,5,89,1056,8,89,10,89,12,89,1059,9,89,1,89,1,89,1,89,1,90,1,90,1,91,
		1,91,3,91,1068,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,
		1079,8,92,1,93,1,93,3,93,1083,8,93,1,94,1,94,1,94,1,94,1,94,4,94,1090,
		8,94,11,94,12,94,1091,3,94,1094,8,94,1,94,1,94,3,94,1098,8,94,1,95,1,95,
		3,95,1102,8,95,1,96,1,96,1,97,1,97,1,97,4,97,1109,8,97,11,97,12,97,1110,
		1,98,1,98,1,98,1,98,5,98,1117,8,98,10,98,12,98,1120,9,98,1,98,1,98,1,99,
		1,99,1,100,1,100,1,100,1,101,1,101,1,102,1,102,1,102,3,102,1134,8,102,
		1,103,1,103,3,103,1138,8,103,1,103,1,103,1,103,5,103,1143,8,103,10,103,
		12,103,1146,9,103,1,103,1,103,1,104,1,104,1,104,3,104,1153,8,104,1,105,
		1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,3,106,1165,8,106,
		1,106,1,106,1,106,1,106,3,106,1171,8,106,1,107,1,107,1,107,5,107,1176,
		8,107,10,107,12,107,1179,9,107,1,108,1,108,3,108,1183,8,108,1,108,1,108,
		1,108,5,108,1188,8,108,10,108,12,108,1191,9,108,1,108,1,108,1,109,1,109,
		3,109,1197,8,109,1,110,1,110,1,110,1,110,5,110,1203,8,110,10,110,12,110,
		1206,9,110,1,110,1,110,1,111,1,111,3,111,1212,8,111,1,112,1,112,3,112,
		1216,8,112,1,112,3,112,1219,8,112,1,112,1,112,1,112,5,112,1224,8,112,10,
		112,12,112,1227,9,112,1,112,1,112,1,113,1,113,1,113,3,113,1234,8,113,1,
		114,1,114,1,114,3,114,1239,8,114,1,114,1,114,1,114,5,114,1244,8,114,10,
		114,12,114,1247,9,114,1,114,1,114,1,115,1,115,1,115,3,115,1254,8,115,1,
		115,1,115,1,115,5,115,1259,8,115,10,115,12,115,1262,9,115,1,115,1,115,
		1,116,1,116,3,116,1268,8,116,1,116,5,116,1271,8,116,10,116,12,116,1274,
		9,116,1,116,1,116,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,118,1,118,
		1,118,1,118,3,118,1289,8,118,1,119,1,119,3,119,1293,8,119,1,119,1,119,
		1,119,5,119,1298,8,119,10,119,12,119,1301,9,119,1,119,1,119,1,120,3,120,
		1306,8,120,1,120,1,120,1,120,1,120,1,121,1,121,1,121,1,121,5,121,1316,
		8,121,10,121,12,121,1319,9,121,1,121,1,121,1,122,1,122,3,122,1325,8,122,
		1,122,1,122,1,122,5,122,1330,8,122,10,122,12,122,1333,9,122,1,122,1,122,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,1344,8,123,1,124,1,124,
		1,125,1,125,3,125,1350,8,125,1,125,1,125,1,125,5,125,1355,8,125,10,125,
		12,125,1358,9,125,1,125,1,125,1,126,1,126,1,126,1,126,3,126,1366,8,126,
		1,127,1,127,1,127,5,127,1371,8,127,10,127,12,127,1374,9,127,1,127,1,127,
		1,127,3,127,1379,8,127,1,128,1,128,1,128,1,128,3,128,1385,8,128,1,129,
		1,129,1,129,1,129,1,130,1,130,3,130,1393,8,130,1,131,1,131,1,131,1,131,
		1,131,3,131,1400,8,131,1,132,1,132,1,133,1,133,1,133,1,133,3,133,1408,
		8,133,1,133,5,133,1411,8,133,10,133,12,133,1414,9,133,1,133,1,133,1,133,
		1,133,5,133,1420,8,133,10,133,12,133,1423,9,133,1,133,1,133,1,133,1,134,
		1,134,1,135,1,135,3,135,1432,8,135,1,135,1,135,5,135,1436,8,135,10,135,
		12,135,1439,9,135,1,135,1,135,3,135,1443,8,135,1,135,1,135,3,135,1447,
		8,135,1,135,1,135,1,135,5,135,1452,8,135,10,135,12,135,1455,9,135,1,135,
		5,135,1458,8,135,10,135,12,135,1461,9,135,1,135,1,135,1,136,1,136,1,137,
		1,137,1,137,5,137,1470,8,137,10,137,12,137,1473,9,137,1,137,1,137,1,138,
		1,138,1,139,1,139,1,139,5,139,1482,8,139,10,139,12,139,1485,9,139,1,139,
		1,139,5,139,1489,8,139,10,139,12,139,1492,9,139,1,140,1,140,1,141,1,141,
		1,141,5,141,1499,8,141,10,141,12,141,1502,9,141,1,141,1,141,3,141,1506,
		8,141,1,141,5,141,1509,8,141,10,141,12,141,1512,9,141,1,141,1,141,1,142,
		1,142,1,143,1,143,1,143,5,143,1521,8,143,10,143,12,143,1524,9,143,1,144,
		1,144,1,144,5,144,1529,8,144,10,144,12,144,1532,9,144,1,144,1,144,1,145,
		1,145,1,145,1,145,3,145,1540,8,145,1,145,5,145,1543,8,145,10,145,12,145,
		1546,9,145,1,145,1,145,1,146,1,146,1,146,1,146,1,147,1,147,1,147,3,147,
		1557,8,147,1,148,1,148,1,148,1,148,3,148,1563,8,148,1,149,3,149,1566,8,
		149,1,149,5,149,1569,8,149,10,149,12,149,1572,9,149,1,150,1,150,1,150,
		1,150,3,150,1578,8,150,1,151,1,151,1,151,1,151,1,151,1,151,3,151,1586,
		8,151,1,152,1,152,3,152,1590,8,152,1,152,1,152,1,152,1,152,3,152,1596,
		8,152,1,153,1,153,1,153,1,153,3,153,1602,8,153,1,154,1,154,1,154,1,154,
		1,154,5,154,1609,8,154,10,154,12,154,1612,9,154,3,154,1614,8,154,1,154,
		1,154,1,155,1,155,1,155,5,155,1621,8,155,10,155,12,155,1624,9,155,1,155,
		1,155,1,156,1,156,1,157,1,157,1,157,3,157,1633,8,157,1,157,1,157,3,157,
		1637,8,157,1,157,1,157,4,157,1641,8,157,11,157,12,157,1642,1,157,1,157,
		3,157,1647,8,157,1,157,1,157,1,157,1,157,5,157,1653,8,157,10,157,12,157,
		1656,9,157,3,157,1658,8,157,1,157,1,157,1,158,1,158,1,158,3,158,1665,8,
		158,1,158,1,158,1,158,3,158,1670,8,158,1,158,1,158,1,158,1,158,3,158,1676,
		8,158,1,159,1,159,1,159,1,159,1,160,1,160,1,161,1,161,3,161,1686,8,161,
		1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,5,162,1697,8,162,
		10,162,12,162,1700,9,162,1,162,1,162,3,162,1704,8,162,1,162,1,162,1,163,
		1,163,1,163,1,163,4,163,1712,8,163,11,163,12,163,1713,1,163,1,163,3,163,
		1718,8,163,1,163,1,163,1,164,1,164,1,164,1,164,1,165,1,165,1,165,5,165,
		1729,8,165,10,165,12,165,1732,9,165,1,166,1,166,3,166,1736,8,166,1,167,
		1,167,1,167,1,167,1,167,3,167,1743,8,167,1,168,1,168,1,168,1,168,1,168,
		1,168,1,168,1,168,1,169,1,169,1,170,1,170,1,170,1,170,1,170,3,170,1760,
		8,170,1,171,1,171,1,171,1,171,1,171,1,171,1,172,1,172,1,172,1,172,1,172,
		1,172,1,173,1,173,1,173,1,173,1,173,3,173,1779,8,173,1,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,3,173,1789,8,173,1,173,1,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,5,173,1812,8,173,10,173,12,173,1815,9,173,
		1,174,1,174,1,175,1,175,1,176,1,176,3,176,1823,8,176,1,177,1,177,1,177,
		1,177,1,177,1,177,3,177,1831,8,177,1,178,1,178,1,178,3,178,1836,8,178,
		1,178,1,178,1,179,1,179,1,180,1,180,1,181,1,181,1,181,3,181,1847,8,181,
		1,181,1,181,1,182,1,182,1,183,1,183,1,184,1,184,1,184,3,184,1858,8,184,
		1,184,1,184,1,185,1,185,1,186,1,186,1,187,1,187,1,187,3,187,1869,8,187,
		1,187,1,187,1,188,1,188,1,189,1,189,1,190,1,190,1,190,3,190,1880,8,190,
		1,190,1,190,1,191,1,191,1,192,1,192,1,193,1,193,1,193,1,193,3,193,1892,
		8,193,1,194,1,194,1,194,1,194,1,195,1,195,1,196,1,196,1,197,1,197,1,197,
		1,197,1,198,1,198,1,199,1,199,1,200,1,200,1,200,1,200,1,201,1,201,1,202,
		1,202,1,203,1,203,1,203,1,203,1,204,1,204,1,205,1,205,1,206,1,206,1,206,
		0,1,346,207,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
		90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
		128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
		164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
		200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
		236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
		272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
		308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
		344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
		380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,0,
		26,1,0,33,34,1,0,10,11,2,0,1,1,11,11,1,0,72,73,1,0,61,62,1,0,57,58,2,0,
		61,62,65,65,2,0,61,61,65,65,1,0,3,4,1,0,85,88,2,0,129,130,143,143,2,0,
		131,131,133,134,1,0,129,130,1,0,135,140,2,0,141,141,145,145,1,0,10,14,
		1,0,16,23,1,0,11,14,1,0,26,29,1,0,24,25,2,0,11,11,15,15,1,0,33,36,1,0,
		37,38,1,0,39,40,1,0,41,42,1,0,43,44,2008,0,428,1,0,0,0,2,435,1,0,0,0,4,
		443,1,0,0,0,6,463,1,0,0,0,8,467,1,0,0,0,10,475,1,0,0,0,12,477,1,0,0,0,
		14,488,1,0,0,0,16,504,1,0,0,0,18,511,1,0,0,0,20,516,1,0,0,0,22,518,1,0,
		0,0,24,535,1,0,0,0,26,537,1,0,0,0,28,541,1,0,0,0,30,543,1,0,0,0,32,548,
		1,0,0,0,34,552,1,0,0,0,36,563,1,0,0,0,38,570,1,0,0,0,40,584,1,0,0,0,42,
		586,1,0,0,0,44,588,1,0,0,0,46,592,1,0,0,0,48,594,1,0,0,0,50,605,1,0,0,
		0,52,607,1,0,0,0,54,614,1,0,0,0,56,619,1,0,0,0,58,623,1,0,0,0,60,625,1,
		0,0,0,62,627,1,0,0,0,64,636,1,0,0,0,66,638,1,0,0,0,68,652,1,0,0,0,70,657,
		1,0,0,0,72,661,1,0,0,0,74,666,1,0,0,0,76,682,1,0,0,0,78,693,1,0,0,0,80,
		698,1,0,0,0,82,702,1,0,0,0,84,704,1,0,0,0,86,724,1,0,0,0,88,731,1,0,0,
		0,90,736,1,0,0,0,92,755,1,0,0,0,94,757,1,0,0,0,96,763,1,0,0,0,98,765,1,
		0,0,0,100,769,1,0,0,0,102,783,1,0,0,0,104,787,1,0,0,0,106,791,1,0,0,0,
		108,795,1,0,0,0,110,797,1,0,0,0,112,810,1,0,0,0,114,825,1,0,0,0,116,827,
		1,0,0,0,118,832,1,0,0,0,120,834,1,0,0,0,122,836,1,0,0,0,124,839,1,0,0,
		0,126,844,1,0,0,0,128,851,1,0,0,0,130,856,1,0,0,0,132,867,1,0,0,0,134,
		876,1,0,0,0,136,880,1,0,0,0,138,887,1,0,0,0,140,894,1,0,0,0,142,899,1,
		0,0,0,144,903,1,0,0,0,146,905,1,0,0,0,148,911,1,0,0,0,150,919,1,0,0,0,
		152,921,1,0,0,0,154,935,1,0,0,0,156,940,1,0,0,0,158,947,1,0,0,0,160,949,
		1,0,0,0,162,955,1,0,0,0,164,996,1,0,0,0,166,1003,1,0,0,0,168,1018,1,0,
		0,0,170,1023,1,0,0,0,172,1025,1,0,0,0,174,1027,1,0,0,0,176,1031,1,0,0,
		0,178,1036,1,0,0,0,180,1063,1,0,0,0,182,1067,1,0,0,0,184,1078,1,0,0,0,
		186,1082,1,0,0,0,188,1093,1,0,0,0,190,1101,1,0,0,0,192,1103,1,0,0,0,194,
		1105,1,0,0,0,196,1112,1,0,0,0,198,1123,1,0,0,0,200,1125,1,0,0,0,202,1128,
		1,0,0,0,204,1133,1,0,0,0,206,1135,1,0,0,0,208,1152,1,0,0,0,210,1154,1,
		0,0,0,212,1170,1,0,0,0,214,1172,1,0,0,0,216,1180,1,0,0,0,218,1196,1,0,
		0,0,220,1198,1,0,0,0,222,1211,1,0,0,0,224,1213,1,0,0,0,226,1233,1,0,0,
		0,228,1235,1,0,0,0,230,1250,1,0,0,0,232,1265,1,0,0,0,234,1277,1,0,0,0,
		236,1288,1,0,0,0,238,1290,1,0,0,0,240,1305,1,0,0,0,242,1311,1,0,0,0,244,
		1322,1,0,0,0,246,1336,1,0,0,0,248,1345,1,0,0,0,250,1347,1,0,0,0,252,1361,
		1,0,0,0,254,1378,1,0,0,0,256,1384,1,0,0,0,258,1386,1,0,0,0,260,1390,1,
		0,0,0,262,1394,1,0,0,0,264,1401,1,0,0,0,266,1403,1,0,0,0,268,1427,1,0,
		0,0,270,1429,1,0,0,0,272,1464,1,0,0,0,274,1471,1,0,0,0,276,1476,1,0,0,
		0,278,1483,1,0,0,0,280,1493,1,0,0,0,282,1495,1,0,0,0,284,1515,1,0,0,0,
		286,1517,1,0,0,0,288,1530,1,0,0,0,290,1535,1,0,0,0,292,1549,1,0,0,0,294,
		1553,1,0,0,0,296,1562,1,0,0,0,298,1570,1,0,0,0,300,1577,1,0,0,0,302,1585,
		1,0,0,0,304,1589,1,0,0,0,306,1601,1,0,0,0,308,1603,1,0,0,0,310,1622,1,
		0,0,0,312,1627,1,0,0,0,314,1646,1,0,0,0,316,1675,1,0,0,0,318,1677,1,0,
		0,0,320,1681,1,0,0,0,322,1685,1,0,0,0,324,1687,1,0,0,0,326,1707,1,0,0,
		0,328,1721,1,0,0,0,330,1725,1,0,0,0,332,1735,1,0,0,0,334,1742,1,0,0,0,
		336,1744,1,0,0,0,338,1752,1,0,0,0,340,1754,1,0,0,0,342,1761,1,0,0,0,344,
		1767,1,0,0,0,346,1788,1,0,0,0,348,1816,1,0,0,0,350,1818,1,0,0,0,352,1820,
		1,0,0,0,354,1830,1,0,0,0,356,1835,1,0,0,0,358,1839,1,0,0,0,360,1841,1,
		0,0,0,362,1846,1,0,0,0,364,1850,1,0,0,0,366,1852,1,0,0,0,368,1857,1,0,
		0,0,370,1861,1,0,0,0,372,1863,1,0,0,0,374,1868,1,0,0,0,376,1872,1,0,0,
		0,378,1874,1,0,0,0,380,1879,1,0,0,0,382,1883,1,0,0,0,384,1885,1,0,0,0,
		386,1891,1,0,0,0,388,1893,1,0,0,0,390,1897,1,0,0,0,392,1899,1,0,0,0,394,
		1901,1,0,0,0,396,1905,1,0,0,0,398,1907,1,0,0,0,400,1909,1,0,0,0,402,1913,
		1,0,0,0,404,1915,1,0,0,0,406,1917,1,0,0,0,408,1921,1,0,0,0,410,1923,1,
		0,0,0,412,1925,1,0,0,0,414,429,3,2,1,0,415,417,3,12,6,0,416,415,1,0,0,
		0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,426,1,0,0,0,420,
		418,1,0,0,0,421,427,3,4,2,0,422,427,3,250,125,0,423,427,3,22,11,0,424,
		427,3,270,135,0,425,427,3,282,141,0,426,421,1,0,0,0,426,422,1,0,0,0,426,
		423,1,0,0,0,426,424,1,0,0,0,426,425,1,0,0,0,427,429,1,0,0,0,428,414,1,
		0,0,0,428,418,1,0,0,0,429,430,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,
		431,1,1,0,0,0,432,434,3,12,6,0,433,432,1,0,0,0,434,437,1,0,0,0,435,433,
		1,0,0,0,435,436,1,0,0,0,436,441,1,0,0,0,437,435,1,0,0,0,438,442,3,266,
		133,0,439,442,3,162,81,0,440,442,3,14,7,0,441,438,1,0,0,0,441,439,1,0,
		0,0,441,440,1,0,0,0,442,3,1,0,0,0,443,445,5,107,0,0,444,446,5,88,0,0,445,
		444,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,451,3,8,4,0,448,450,3,
		12,6,0,449,448,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,
		452,454,1,0,0,0,453,451,1,0,0,0,454,455,3,6,3,0,455,456,5,108,0,0,456,
		5,1,0,0,0,457,464,3,22,11,0,458,464,3,266,133,0,459,464,3,162,81,0,460,
		464,3,270,135,0,461,464,3,282,141,0,462,464,3,4,2,0,463,457,1,0,0,0,463,
		458,1,0,0,0,463,459,1,0,0,0,463,460,1,0,0,0,463,461,1,0,0,0,463,462,1,
		0,0,0,464,465,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,7,1,0,0,0,467,
		472,3,10,5,0,468,469,5,156,0,0,469,471,3,10,5,0,470,468,1,0,0,0,471,474,
		1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,9,1,0,0,0,474,472,1,0,0,0,
		475,476,5,162,0,0,476,11,1,0,0,0,477,478,5,109,0,0,478,483,3,8,4,0,479,
		480,5,153,0,0,480,482,3,8,4,0,481,479,1,0,0,0,482,485,1,0,0,0,483,481,
		1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,483,1,0,0,0,486,487,5,155,
		0,0,487,13,1,0,0,0,488,489,5,91,0,0,489,498,3,16,8,0,490,497,3,204,102,
		0,491,497,3,244,122,0,492,497,3,224,112,0,493,497,3,242,121,0,494,497,
		3,226,113,0,495,497,3,238,119,0,496,490,1,0,0,0,496,491,1,0,0,0,496,492,
		1,0,0,0,496,493,1,0,0,0,496,494,1,0,0,0,496,495,1,0,0,0,497,500,1,0,0,
		0,498,496,1,0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,498,1,0,0,0,501,
		502,3,20,10,0,502,503,5,92,0,0,503,15,1,0,0,0,504,505,5,162,0,0,505,17,
		1,0,0,0,506,507,3,10,5,0,507,508,5,156,0,0,508,510,1,0,0,0,509,506,1,0,
		0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,514,1,0,0,0,513,
		511,1,0,0,0,514,515,3,16,8,0,515,19,1,0,0,0,516,517,3,298,149,0,517,21,
		1,0,0,0,518,522,5,45,0,0,519,520,3,24,12,0,520,521,5,155,0,0,521,523,1,
		0,0,0,522,519,1,0,0,0,523,524,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,
		525,526,1,0,0,0,526,527,5,46,0,0,527,23,1,0,0,0,528,536,3,26,13,0,529,
		536,3,44,22,0,530,536,3,62,31,0,531,536,3,80,40,0,532,536,3,104,52,0,533,
		536,3,136,68,0,534,536,3,142,71,0,535,528,1,0,0,0,535,529,1,0,0,0,535,
		530,1,0,0,0,535,531,1,0,0,0,535,532,1,0,0,0,535,533,1,0,0,0,535,534,1,
		0,0,0,536,25,1,0,0,0,537,538,3,28,14,0,538,539,5,154,0,0,539,540,3,30,
		15,0,540,27,1,0,0,0,541,542,5,162,0,0,542,29,1,0,0,0,543,546,3,34,17,0,
		544,545,5,146,0,0,545,547,3,32,16,0,546,544,1,0,0,0,546,547,1,0,0,0,547,
		31,1,0,0,0,548,549,3,346,173,0,549,33,1,0,0,0,550,553,3,36,18,0,551,553,
		3,38,19,0,552,550,1,0,0,0,552,551,1,0,0,0,553,35,1,0,0,0,554,564,3,360,
		180,0,555,564,3,372,186,0,556,564,3,378,189,0,557,564,3,366,183,0,558,
		564,3,40,20,0,559,564,3,404,202,0,560,564,3,398,199,0,561,564,3,410,205,
		0,562,564,3,392,196,0,563,554,1,0,0,0,563,555,1,0,0,0,563,556,1,0,0,0,
		563,557,1,0,0,0,563,558,1,0,0,0,563,559,1,0,0,0,563,560,1,0,0,0,563,561,
		1,0,0,0,563,562,1,0,0,0,564,37,1,0,0,0,565,566,3,10,5,0,566,567,5,156,
		0,0,567,569,1,0,0,0,568,565,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,
		571,1,0,0,0,571,573,1,0,0,0,572,570,1,0,0,0,573,574,3,28,14,0,574,39,1,
		0,0,0,575,580,7,0,0,0,576,577,5,151,0,0,577,578,3,42,21,0,578,579,5,152,
		0,0,579,581,1,0,0,0,580,576,1,0,0,0,580,581,1,0,0,0,581,585,1,0,0,0,582,
		585,5,35,0,0,583,585,5,36,0,0,584,575,1,0,0,0,584,582,1,0,0,0,584,583,
		1,0,0,0,585,41,1,0,0,0,586,587,5,11,0,0,587,43,1,0,0,0,588,589,3,46,23,
		0,589,590,5,154,0,0,590,591,3,48,24,0,591,45,1,0,0,0,592,593,5,162,0,0,
		593,47,1,0,0,0,594,597,3,50,25,0,595,596,5,146,0,0,596,598,3,52,26,0,597,
		595,1,0,0,0,597,598,1,0,0,0,598,49,1,0,0,0,599,600,3,360,180,0,600,601,
		5,149,0,0,601,602,3,56,28,0,602,603,5,150,0,0,603,606,1,0,0,0,604,606,
		3,54,27,0,605,599,1,0,0,0,605,604,1,0,0,0,606,51,1,0,0,0,607,608,7,1,0,
		0,608,53,1,0,0,0,609,610,3,10,5,0,610,611,5,156,0,0,611,613,1,0,0,0,612,
		609,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,617,1,
		0,0,0,616,614,1,0,0,0,617,618,3,46,23,0,618,55,1,0,0,0,619,620,3,58,29,
		0,620,621,5,157,0,0,621,622,3,60,30,0,622,57,1,0,0,0,623,624,3,346,173,
		0,624,59,1,0,0,0,625,626,3,346,173,0,626,61,1,0,0,0,627,628,3,64,32,0,
		628,634,5,154,0,0,629,631,3,36,18,0,630,629,1,0,0,0,630,631,1,0,0,0,631,
		632,1,0,0,0,632,635,3,66,33,0,633,635,3,76,38,0,634,630,1,0,0,0,634,633,
		1,0,0,0,635,63,1,0,0,0,636,637,5,162,0,0,637,65,1,0,0,0,638,639,5,149,
		0,0,639,644,3,68,34,0,640,641,5,153,0,0,641,643,3,68,34,0,642,640,1,0,
		0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,0,646,
		644,1,0,0,0,647,650,5,150,0,0,648,649,5,146,0,0,649,651,3,74,37,0,650,
		648,1,0,0,0,650,651,1,0,0,0,651,67,1,0,0,0,652,655,3,70,35,0,653,654,5,
		146,0,0,654,656,3,72,36,0,655,653,1,0,0,0,655,656,1,0,0,0,656,69,1,0,0,
		0,657,658,5,162,0,0,658,71,1,0,0,0,659,662,3,356,178,0,660,662,3,346,173,
		0,661,659,1,0,0,0,661,660,1,0,0,0,662,73,1,0,0,0,663,664,3,64,32,0,664,
		665,5,158,0,0,665,667,1,0,0,0,666,663,1,0,0,0,666,667,1,0,0,0,667,668,
		1,0,0,0,668,669,3,70,35,0,669,75,1,0,0,0,670,671,5,149,0,0,671,676,3,70,
		35,0,672,673,5,153,0,0,673,675,3,70,35,0,674,672,1,0,0,0,675,678,1,0,0,
		0,676,674,1,0,0,0,676,677,1,0,0,0,677,679,1,0,0,0,678,676,1,0,0,0,679,
		680,5,150,0,0,680,683,1,0,0,0,681,683,3,78,39,0,682,670,1,0,0,0,682,681,
		1,0,0,0,683,686,1,0,0,0,684,685,5,146,0,0,685,687,3,74,37,0,686,684,1,
		0,0,0,686,687,1,0,0,0,687,77,1,0,0,0,688,689,3,10,5,0,689,690,5,156,0,
		0,690,692,1,0,0,0,691,688,1,0,0,0,692,695,1,0,0,0,693,691,1,0,0,0,693,
		694,1,0,0,0,694,696,1,0,0,0,695,693,1,0,0,0,696,697,3,64,32,0,697,79,1,
		0,0,0,698,699,3,82,41,0,699,700,5,154,0,0,700,701,3,84,42,0,701,81,1,0,
		0,0,702,703,5,162,0,0,703,83,1,0,0,0,704,707,3,86,43,0,705,706,5,146,0,
		0,706,708,3,90,45,0,707,705,1,0,0,0,707,708,1,0,0,0,708,85,1,0,0,0,709,
		725,3,88,44,0,710,711,5,47,0,0,711,712,5,151,0,0,712,717,3,56,28,0,713,
		714,5,153,0,0,714,716,3,56,28,0,715,713,1,0,0,0,716,719,1,0,0,0,717,715,
		1,0,0,0,717,718,1,0,0,0,718,720,1,0,0,0,719,717,1,0,0,0,720,721,5,152,
		0,0,721,722,5,48,0,0,722,723,3,182,91,0,723,725,1,0,0,0,724,709,1,0,0,
		0,724,710,1,0,0,0,725,87,1,0,0,0,726,727,3,10,5,0,727,728,5,156,0,0,728,
		730,1,0,0,0,729,726,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,
		0,0,0,732,734,1,0,0,0,733,731,1,0,0,0,734,735,3,82,41,0,735,89,1,0,0,0,
		736,737,5,151,0,0,737,742,3,92,46,0,738,739,5,153,0,0,739,741,3,92,46,
		0,740,738,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,
		745,1,0,0,0,744,742,1,0,0,0,745,746,5,152,0,0,746,91,1,0,0,0,747,756,3,
		96,48,0,748,749,3,94,47,0,749,751,5,149,0,0,750,752,3,96,48,0,751,750,
		1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,754,5,150,0,0,754,756,1,0,
		0,0,755,747,1,0,0,0,755,748,1,0,0,0,756,93,1,0,0,0,757,758,5,11,0,0,758,
		95,1,0,0,0,759,764,3,346,173,0,760,764,3,74,37,0,761,764,3,130,65,0,762,
		764,3,90,45,0,763,759,1,0,0,0,763,760,1,0,0,0,763,761,1,0,0,0,763,762,
		1,0,0,0,764,97,1,0,0,0,765,766,3,214,107,0,766,767,5,154,0,0,767,768,3,
		100,50,0,768,99,1,0,0,0,769,770,5,47,0,0,770,771,5,151,0,0,771,776,5,131,
		0,0,772,773,5,153,0,0,773,775,5,131,0,0,774,772,1,0,0,0,775,778,1,0,0,
		0,776,774,1,0,0,0,776,777,1,0,0,0,777,779,1,0,0,0,778,776,1,0,0,0,779,
		780,5,152,0,0,780,781,5,48,0,0,781,782,3,182,91,0,782,101,1,0,0,0,783,
		784,3,214,107,0,784,785,5,154,0,0,785,786,3,84,42,0,786,103,1,0,0,0,787,
		788,3,106,53,0,788,789,5,154,0,0,789,790,3,108,54,0,790,105,1,0,0,0,791,
		792,5,162,0,0,792,107,1,0,0,0,793,796,3,110,55,0,794,796,3,124,62,0,795,
		793,1,0,0,0,795,794,1,0,0,0,796,109,1,0,0,0,797,799,5,49,0,0,798,800,5,
		50,0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,804,1,0,0,0,801,802,3,112,56,
		0,802,803,5,155,0,0,803,805,1,0,0,0,804,801,1,0,0,0,805,806,1,0,0,0,806,
		804,1,0,0,0,806,807,1,0,0,0,807,808,1,0,0,0,808,809,5,51,0,0,809,111,1,
		0,0,0,810,815,3,114,57,0,811,813,3,116,58,0,812,814,3,122,61,0,813,812,
		1,0,0,0,813,814,1,0,0,0,814,816,1,0,0,0,815,811,1,0,0,0,815,816,1,0,0,
		0,816,817,1,0,0,0,817,823,5,154,0,0,818,824,3,30,15,0,819,824,3,48,24,
		0,820,824,3,76,38,0,821,824,3,84,42,0,822,824,3,124,62,0,823,818,1,0,0,
		0,823,819,1,0,0,0,823,820,1,0,0,0,823,821,1,0,0,0,823,822,1,0,0,0,824,
		113,1,0,0,0,825,826,5,162,0,0,826,115,1,0,0,0,827,830,5,52,0,0,828,831,
		3,118,59,0,829,831,3,120,60,0,830,828,1,0,0,0,830,829,1,0,0,0,831,117,
		1,0,0,0,832,833,5,1,0,0,833,119,1,0,0,0,834,835,5,2,0,0,835,121,1,0,0,
		0,836,837,5,156,0,0,837,838,7,2,0,0,838,123,1,0,0,0,839,842,3,126,63,0,
		840,841,5,146,0,0,841,843,3,130,65,0,842,840,1,0,0,0,842,843,1,0,0,0,843,
		125,1,0,0,0,844,845,3,128,64,0,845,127,1,0,0,0,846,847,3,10,5,0,847,848,
		5,156,0,0,848,850,1,0,0,0,849,846,1,0,0,0,850,853,1,0,0,0,851,849,1,0,
		0,0,851,852,1,0,0,0,852,854,1,0,0,0,853,851,1,0,0,0,854,855,3,106,53,0,
		855,129,1,0,0,0,856,857,5,149,0,0,857,862,3,132,66,0,858,859,5,153,0,0,
		859,861,3,132,66,0,860,858,1,0,0,0,861,864,1,0,0,0,862,860,1,0,0,0,862,
		863,1,0,0,0,863,865,1,0,0,0,864,862,1,0,0,0,865,866,5,150,0,0,866,131,
		1,0,0,0,867,868,3,114,57,0,868,874,5,146,0,0,869,875,3,346,173,0,870,875,
		3,74,37,0,871,875,3,90,45,0,872,875,3,130,65,0,873,875,3,150,75,0,874,
		869,1,0,0,0,874,870,1,0,0,0,874,871,1,0,0,0,874,872,1,0,0,0,874,873,1,
		0,0,0,875,133,1,0,0,0,876,877,3,214,107,0,877,878,5,154,0,0,878,879,3,
		124,62,0,879,135,1,0,0,0,880,881,3,138,69,0,881,882,5,154,0,0,882,885,
		3,40,20,0,883,884,5,146,0,0,884,886,3,382,191,0,885,883,1,0,0,0,885,886,
		1,0,0,0,886,137,1,0,0,0,887,888,5,162,0,0,888,139,1,0,0,0,889,890,3,10,
		5,0,890,891,5,156,0,0,891,893,1,0,0,0,892,889,1,0,0,0,893,896,1,0,0,0,
		894,892,1,0,0,0,894,895,1,0,0,0,895,897,1,0,0,0,896,894,1,0,0,0,897,898,
		3,138,69,0,898,141,1,0,0,0,899,900,3,144,72,0,900,901,5,154,0,0,901,902,
		3,146,73,0,902,143,1,0,0,0,903,904,5,162,0,0,904,145,1,0,0,0,905,908,3,
		148,74,0,906,907,5,146,0,0,907,909,3,150,75,0,908,906,1,0,0,0,908,909,
		1,0,0,0,909,147,1,0,0,0,910,912,5,53,0,0,911,910,1,0,0,0,912,913,1,0,0,
		0,913,911,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,916,3,182,91,0,916,
		149,1,0,0,0,917,920,3,152,76,0,918,920,5,55,0,0,919,917,1,0,0,0,919,918,
		1,0,0,0,920,151,1,0,0,0,921,922,5,54,0,0,922,926,5,149,0,0,923,927,3,188,
		94,0,924,927,3,166,83,0,925,927,3,278,139,0,926,923,1,0,0,0,926,924,1,
		0,0,0,926,925,1,0,0,0,927,928,1,0,0,0,928,929,5,150,0,0,929,153,1,0,0,
		0,930,931,3,10,5,0,931,932,5,156,0,0,932,934,1,0,0,0,933,930,1,0,0,0,934,
		937,1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,938,1,0,0,0,937,935,1,
		0,0,0,938,939,3,144,72,0,939,155,1,0,0,0,940,941,3,158,79,0,941,945,5,
		146,0,0,942,946,3,158,79,0,943,946,3,160,80,0,944,946,3,150,75,0,945,942,
		1,0,0,0,945,943,1,0,0,0,945,944,1,0,0,0,946,157,1,0,0,0,947,948,5,162,
		0,0,948,159,1,0,0,0,949,951,3,158,79,0,950,952,5,159,0,0,951,950,1,0,0,
		0,952,953,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,161,1,0,0,0,955,
		957,5,71,0,0,956,958,7,3,0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,1,
		0,0,0,959,963,3,164,82,0,960,962,3,12,6,0,961,960,1,0,0,0,962,965,1,0,
		0,0,963,961,1,0,0,0,963,964,1,0,0,0,964,971,1,0,0,0,965,963,1,0,0,0,966,
		969,5,74,0,0,967,970,3,168,84,0,968,970,3,274,137,0,969,967,1,0,0,0,969,
		968,1,0,0,0,970,972,1,0,0,0,971,966,1,0,0,0,971,972,1,0,0,0,972,975,1,
		0,0,0,973,974,5,75,0,0,974,976,3,286,143,0,975,973,1,0,0,0,975,976,1,0,
		0,0,976,984,1,0,0,0,977,983,3,204,102,0,978,983,3,244,122,0,979,983,3,
		224,112,0,980,983,3,242,121,0,981,983,3,226,113,0,982,977,1,0,0,0,982,
		978,1,0,0,0,982,979,1,0,0,0,982,980,1,0,0,0,982,981,1,0,0,0,983,986,1,
		0,0,0,984,982,1,0,0,0,984,985,1,0,0,0,985,990,1,0,0,0,986,984,1,0,0,0,
		987,989,3,178,89,0,988,987,1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,990,
		991,1,0,0,0,991,993,1,0,0,0,992,990,1,0,0,0,993,994,3,172,86,0,994,995,
		5,76,0,0,995,163,1,0,0,0,996,997,5,162,0,0,997,165,1,0,0,0,998,999,3,10,
		5,0,999,1000,5,153,0,0,1000,1002,1,0,0,0,1001,998,1,0,0,0,1002,1005,1,
		0,0,0,1003,1001,1,0,0,0,1003,1004,1,0,0,0,1004,1006,1,0,0,0,1005,1003,
		1,0,0,0,1006,1010,3,164,82,0,1007,1009,5,159,0,0,1008,1007,1,0,0,0,1009,
		1012,1,0,0,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,167,1,0,0,0,1012,
		1010,1,0,0,0,1013,1014,3,10,5,0,1014,1015,5,153,0,0,1015,1017,1,0,0,0,
		1016,1013,1,0,0,0,1017,1020,1,0,0,0,1018,1016,1,0,0,0,1018,1019,1,0,0,
		0,1019,1021,1,0,0,0,1020,1018,1,0,0,0,1021,1022,3,170,85,0,1022,169,1,
		0,0,0,1023,1024,5,162,0,0,1024,171,1,0,0,0,1025,1026,3,298,149,0,1026,
		173,1,0,0,0,1027,1028,3,214,107,0,1028,1029,5,154,0,0,1029,1030,3,176,
		88,0,1030,175,1,0,0,0,1031,1034,3,168,84,0,1032,1033,5,146,0,0,1033,1035,
		3,130,65,0,1034,1032,1,0,0,0,1034,1035,1,0,0,0,1035,177,1,0,0,0,1036,1038,
		5,77,0,0,1037,1039,3,280,140,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,
		1041,1,0,0,0,1040,1042,7,3,0,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,
		1044,1,0,0,0,1043,1045,5,79,0,0,1044,1043,1,0,0,0,1044,1045,1,0,0,0,1045,
		1046,1,0,0,0,1046,1049,3,180,90,0,1047,1048,5,154,0,0,1048,1050,3,182,
		91,0,1049,1047,1,0,0,0,1049,1050,1,0,0,0,1050,1057,1,0,0,0,1051,1056,3,
		204,102,0,1052,1056,3,244,122,0,1053,1056,3,224,112,0,1054,1056,3,242,
		121,0,1055,1051,1,0,0,0,1055,1052,1,0,0,0,1055,1053,1,0,0,0,1055,1054,
		1,0,0,0,1056,1059,1,0,0,0,1057,1055,1,0,0,0,1057,1058,1,0,0,0,1058,1060,
		1,0,0,0,1059,1057,1,0,0,0,1060,1061,3,268,134,0,1061,1062,5,80,0,0,1062,
		179,1,0,0,0,1063,1064,5,162,0,0,1064,181,1,0,0,0,1065,1068,3,36,18,0,1066,
		1068,3,184,92,0,1067,1065,1,0,0,0,1067,1066,1,0,0,0,1068,183,1,0,0,0,1069,
		1079,3,38,19,0,1070,1079,3,54,27,0,1071,1079,3,78,39,0,1072,1079,3,88,
		44,0,1073,1079,3,128,64,0,1074,1079,3,140,70,0,1075,1079,3,274,137,0,1076,
		1079,3,154,77,0,1077,1079,3,288,144,0,1078,1069,1,0,0,0,1078,1070,1,0,
		0,0,1078,1071,1,0,0,0,1078,1072,1,0,0,0,1078,1073,1,0,0,0,1078,1074,1,
		0,0,0,1078,1075,1,0,0,0,1078,1076,1,0,0,0,1078,1077,1,0,0,0,1079,185,1,
		0,0,0,1080,1083,3,412,206,0,1081,1083,3,188,94,0,1082,1080,1,0,0,0,1082,
		1081,1,0,0,0,1083,187,1,0,0,0,1084,1085,5,78,0,0,1085,1094,5,153,0,0,1086,
		1087,3,10,5,0,1087,1088,5,153,0,0,1088,1090,1,0,0,0,1089,1086,1,0,0,0,
		1090,1091,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,1094,1,0,0,
		0,1093,1084,1,0,0,0,1093,1089,1,0,0,0,1093,1094,1,0,0,0,1094,1097,1,0,
		0,0,1095,1098,3,190,95,0,1096,1098,3,194,97,0,1097,1095,1,0,0,0,1097,1096,
		1,0,0,0,1098,189,1,0,0,0,1099,1102,3,192,96,0,1100,1102,3,160,80,0,1101,
		1099,1,0,0,0,1101,1100,1,0,0,0,1102,191,1,0,0,0,1103,1104,5,162,0,0,1104,
		193,1,0,0,0,1105,1108,3,190,95,0,1106,1109,3,196,98,0,1107,1109,3,200,
		100,0,1108,1106,1,0,0,0,1108,1107,1,0,0,0,1109,1110,1,0,0,0,1110,1108,
		1,0,0,0,1110,1111,1,0,0,0,1111,195,1,0,0,0,1112,1113,5,151,0,0,1113,1118,
		3,198,99,0,1114,1115,5,153,0,0,1115,1117,3,198,99,0,1116,1114,1,0,0,0,
		1117,1120,1,0,0,0,1118,1116,1,0,0,0,1118,1119,1,0,0,0,1119,1121,1,0,0,
		0,1120,1118,1,0,0,0,1121,1122,5,152,0,0,1122,197,1,0,0,0,1123,1124,3,346,
		173,0,1124,199,1,0,0,0,1125,1126,5,153,0,0,1126,1127,3,202,101,0,1127,
		201,1,0,0,0,1128,1129,3,190,95,0,1129,203,1,0,0,0,1130,1134,3,206,103,
		0,1131,1134,3,216,108,0,1132,1134,3,220,110,0,1133,1130,1,0,0,0,1133,1131,
		1,0,0,0,1133,1132,1,0,0,0,1134,205,1,0,0,0,1135,1137,5,56,0,0,1136,1138,
		7,4,0,0,1137,1136,1,0,0,0,1137,1138,1,0,0,0,1138,1144,1,0,0,0,1139,1140,
		3,208,104,0,1140,1141,5,155,0,0,1141,1143,1,0,0,0,1142,1139,1,0,0,0,1143,
		1146,1,0,0,0,1144,1142,1,0,0,0,1144,1145,1,0,0,0,1145,1147,1,0,0,0,1146,
		1144,1,0,0,0,1147,1148,5,63,0,0,1148,207,1,0,0,0,1149,1153,3,212,106,0,
		1150,1153,3,210,105,0,1151,1153,3,98,49,0,1152,1149,1,0,0,0,1152,1150,
		1,0,0,0,1152,1151,1,0,0,0,1153,209,1,0,0,0,1154,1155,3,214,107,0,1155,
		1156,5,154,0,0,1156,1157,5,30,0,0,1157,1158,7,5,0,0,1158,211,1,0,0,0,1159,
		1160,3,214,107,0,1160,1164,5,154,0,0,1161,1165,3,30,15,0,1162,1165,3,258,
		129,0,1163,1165,3,146,73,0,1164,1161,1,0,0,0,1164,1162,1,0,0,0,1164,1163,
		1,0,0,0,1165,1171,1,0,0,0,1166,1171,3,102,51,0,1167,1171,3,134,67,0,1168,
		1171,3,174,87,0,1169,1171,3,292,146,0,1170,1159,1,0,0,0,1170,1166,1,0,
		0,0,1170,1167,1,0,0,0,1170,1168,1,0,0,0,1170,1169,1,0,0,0,1171,213,1,0,
		0,0,1172,1177,3,192,96,0,1173,1174,5,153,0,0,1174,1176,3,192,96,0,1175,
		1173,1,0,0,0,1176,1179,1,0,0,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,1178,
		215,1,0,0,0,1179,1177,1,0,0,0,1180,1182,5,59,0,0,1181,1183,7,4,0,0,1182,
		1181,1,0,0,0,1182,1183,1,0,0,0,1183,1189,1,0,0,0,1184,1185,3,218,109,0,
		1185,1186,5,155,0,0,1186,1188,1,0,0,0,1187,1184,1,0,0,0,1188,1191,1,0,
		0,0,1189,1187,1,0,0,0,1189,1190,1,0,0,0,1190,1192,1,0,0,0,1191,1189,1,
		0,0,0,1192,1193,5,63,0,0,1193,217,1,0,0,0,1194,1197,3,212,106,0,1195,1197,
		3,98,49,0,1196,1194,1,0,0,0,1196,1195,1,0,0,0,1197,219,1,0,0,0,1198,1204,
		5,60,0,0,1199,1200,3,222,111,0,1200,1201,5,155,0,0,1201,1203,1,0,0,0,1202,
		1199,1,0,0,0,1203,1206,1,0,0,0,1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,
		1207,1,0,0,0,1206,1204,1,0,0,0,1207,1208,5,63,0,0,1208,221,1,0,0,0,1209,
		1212,3,212,106,0,1210,1212,3,98,49,0,1211,1209,1,0,0,0,1211,1210,1,0,0,
		0,1212,223,1,0,0,0,1213,1215,5,64,0,0,1214,1216,5,65,0,0,1215,1214,1,0,
		0,0,1215,1216,1,0,0,0,1216,1218,1,0,0,0,1217,1219,3,280,140,0,1218,1217,
		1,0,0,0,1218,1219,1,0,0,0,1219,1225,1,0,0,0,1220,1221,3,212,106,0,1221,
		1222,5,155,0,0,1222,1224,1,0,0,0,1223,1220,1,0,0,0,1224,1227,1,0,0,0,1225,
		1223,1,0,0,0,1225,1226,1,0,0,0,1226,1228,1,0,0,0,1227,1225,1,0,0,0,1228,
		1229,5,63,0,0,1229,225,1,0,0,0,1230,1234,3,230,115,0,1231,1234,3,228,114,
		0,1232,1234,3,232,116,0,1233,1230,1,0,0,0,1233,1231,1,0,0,0,1233,1232,
		1,0,0,0,1234,227,1,0,0,0,1235,1236,5,64,0,0,1236,1238,5,62,0,0,1237,1239,
		3,280,140,0,1238,1237,1,0,0,0,1238,1239,1,0,0,0,1239,1245,1,0,0,0,1240,
		1241,3,212,106,0,1241,1242,5,155,0,0,1242,1244,1,0,0,0,1243,1240,1,0,0,
		0,1244,1247,1,0,0,0,1245,1243,1,0,0,0,1245,1246,1,0,0,0,1246,1248,1,0,
		0,0,1247,1245,1,0,0,0,1248,1249,5,63,0,0,1249,229,1,0,0,0,1250,1251,5,
		64,0,0,1251,1253,5,61,0,0,1252,1254,3,280,140,0,1253,1252,1,0,0,0,1253,
		1254,1,0,0,0,1254,1260,1,0,0,0,1255,1256,3,212,106,0,1256,1257,5,155,0,
		0,1257,1259,1,0,0,0,1258,1255,1,0,0,0,1259,1262,1,0,0,0,1260,1258,1,0,
		0,0,1260,1261,1,0,0,0,1261,1263,1,0,0,0,1262,1260,1,0,0,0,1263,1264,5,
		63,0,0,1264,231,1,0,0,0,1265,1267,5,64,0,0,1266,1268,7,4,0,0,1267,1266,
		1,0,0,0,1267,1268,1,0,0,0,1268,1272,1,0,0,0,1269,1271,3,234,117,0,1270,
		1269,1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1272,1273,1,0,0,0,1273,
		1275,1,0,0,0,1274,1272,1,0,0,0,1275,1276,5,63,0,0,1276,233,1,0,0,0,1277,
		1278,3,192,96,0,1278,1279,5,52,0,0,1279,1280,5,1,0,0,1280,1281,5,154,0,
		0,1281,1282,3,236,118,0,1282,1283,5,155,0,0,1283,235,1,0,0,0,1284,1289,
		3,34,17,0,1285,1289,3,86,43,0,1286,1289,3,128,64,0,1287,1289,3,262,131,
		0,1288,1284,1,0,0,0,1288,1285,1,0,0,0,1288,1286,1,0,0,0,1288,1287,1,0,
		0,0,1289,237,1,0,0,0,1290,1292,5,64,0,0,1291,1293,7,6,0,0,1292,1291,1,
		0,0,0,1292,1293,1,0,0,0,1293,1299,1,0,0,0,1294,1295,3,240,120,0,1295,1296,
		5,155,0,0,1296,1298,1,0,0,0,1297,1294,1,0,0,0,1298,1301,1,0,0,0,1299,1297,
		1,0,0,0,1299,1300,1,0,0,0,1300,1302,1,0,0,0,1301,1299,1,0,0,0,1302,1303,
		5,63,0,0,1303,239,1,0,0,0,1304,1306,3,192,96,0,1305,1304,1,0,0,0,1305,
		1306,1,0,0,0,1306,1307,1,0,0,0,1307,1308,3,116,58,0,1308,1309,5,154,0,
		0,1309,1310,3,256,128,0,1310,241,1,0,0,0,1311,1317,5,66,0,0,1312,1313,
		3,212,106,0,1313,1314,5,155,0,0,1314,1316,1,0,0,0,1315,1312,1,0,0,0,1316,
		1319,1,0,0,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,1318,1320,1,0,0,0,1319,
		1317,1,0,0,0,1320,1321,5,63,0,0,1321,243,1,0,0,0,1322,1324,5,67,0,0,1323,
		1325,5,65,0,0,1324,1323,1,0,0,0,1324,1325,1,0,0,0,1325,1331,1,0,0,0,1326,
		1327,3,246,123,0,1327,1328,5,155,0,0,1328,1330,1,0,0,0,1329,1326,1,0,0,
		0,1330,1333,1,0,0,0,1331,1329,1,0,0,0,1331,1332,1,0,0,0,1332,1334,1,0,
		0,0,1333,1331,1,0,0,0,1334,1335,5,63,0,0,1335,245,1,0,0,0,1336,1337,3,
		248,124,0,1337,1343,5,154,0,0,1338,1344,3,34,17,0,1339,1344,3,86,43,0,
		1340,1344,3,128,64,0,1341,1344,3,168,84,0,1342,1344,3,154,77,0,1343,1338,
		1,0,0,0,1343,1339,1,0,0,0,1343,1340,1,0,0,0,1343,1341,1,0,0,0,1343,1342,
		1,0,0,0,1344,247,1,0,0,0,1345,1346,5,162,0,0,1346,249,1,0,0,0,1347,1349,
		5,68,0,0,1348,1350,7,7,0,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,1356,
		1,0,0,0,1351,1352,3,252,126,0,1352,1353,5,155,0,0,1353,1355,1,0,0,0,1354,
		1351,1,0,0,0,1355,1358,1,0,0,0,1356,1354,1,0,0,0,1356,1357,1,0,0,0,1357,
		1359,1,0,0,0,1358,1356,1,0,0,0,1359,1360,5,63,0,0,1360,251,1,0,0,0,1361,
		1362,3,254,127,0,1362,1365,5,154,0,0,1363,1366,3,256,128,0,1364,1366,3,
		168,84,0,1365,1363,1,0,0,0,1365,1364,1,0,0,0,1366,253,1,0,0,0,1367,1372,
		3,248,124,0,1368,1369,5,153,0,0,1369,1371,3,248,124,0,1370,1368,1,0,0,
		0,1371,1374,1,0,0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,1379,1,0,
		0,0,1374,1372,1,0,0,0,1375,1376,3,248,124,0,1376,1377,3,116,58,0,1377,
		1379,1,0,0,0,1378,1367,1,0,0,0,1378,1375,1,0,0,0,1379,255,1,0,0,0,1380,
		1385,3,30,15,0,1381,1385,3,84,42,0,1382,1385,3,124,62,0,1383,1385,3,260,
		130,0,1384,1380,1,0,0,0,1384,1381,1,0,0,0,1384,1382,1,0,0,0,1384,1383,
		1,0,0,0,1385,257,1,0,0,0,1386,1387,3,214,107,0,1387,1388,5,154,0,0,1388,
		1389,3,260,130,0,1389,259,1,0,0,0,1390,1392,3,262,131,0,1391,1393,3,264,
		132,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,261,1,0,0,0,1394,1399,7,
		0,0,0,1395,1396,5,151,0,0,1396,1397,3,42,21,0,1397,1398,5,152,0,0,1398,
		1400,1,0,0,0,1399,1395,1,0,0,0,1399,1400,1,0,0,0,1400,263,1,0,0,0,1401,
		1402,7,8,0,0,1402,265,1,0,0,0,1403,1404,5,69,0,0,1404,1407,3,312,156,0,
		1405,1406,5,154,0,0,1406,1408,3,182,91,0,1407,1405,1,0,0,0,1407,1408,1,
		0,0,0,1408,1412,1,0,0,0,1409,1411,3,12,6,0,1410,1409,1,0,0,0,1411,1414,
		1,0,0,0,1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,1421,1,0,0,0,1414,1412,
		1,0,0,0,1415,1420,3,204,102,0,1416,1420,3,244,122,0,1417,1420,3,224,112,
		0,1418,1420,3,242,121,0,1419,1415,1,0,0,0,1419,1416,1,0,0,0,1419,1417,
		1,0,0,0,1419,1418,1,0,0,0,1420,1423,1,0,0,0,1421,1419,1,0,0,0,1421,1422,
		1,0,0,0,1422,1424,1,0,0,0,1423,1421,1,0,0,0,1424,1425,3,268,134,0,1425,
		1426,5,70,0,0,1426,267,1,0,0,0,1427,1428,3,298,149,0,1428,269,1,0,0,0,
		1429,1431,5,81,0,0,1430,1432,7,3,0,0,1431,1430,1,0,0,0,1431,1432,1,0,0,
		0,1432,1433,1,0,0,0,1433,1437,3,272,136,0,1434,1436,3,12,6,0,1435,1434,
		1,0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,0,1438,1442,
		1,0,0,0,1439,1437,1,0,0,0,1440,1441,5,74,0,0,1441,1443,3,274,137,0,1442,
		1440,1,0,0,0,1442,1443,1,0,0,0,1443,1446,1,0,0,0,1444,1445,5,75,0,0,1445,
		1447,3,286,143,0,1446,1444,1,0,0,0,1446,1447,1,0,0,0,1447,1453,1,0,0,0,
		1448,1452,3,244,122,0,1449,1452,3,224,112,0,1450,1452,3,226,113,0,1451,
		1448,1,0,0,0,1451,1449,1,0,0,0,1451,1450,1,0,0,0,1452,1455,1,0,0,0,1453,
		1451,1,0,0,0,1453,1454,1,0,0,0,1454,1459,1,0,0,0,1455,1453,1,0,0,0,1456,
		1458,3,178,89,0,1457,1456,1,0,0,0,1458,1461,1,0,0,0,1459,1457,1,0,0,0,
		1459,1460,1,0,0,0,1460,1462,1,0,0,0,1461,1459,1,0,0,0,1462,1463,5,82,0,
		0,1463,271,1,0,0,0,1464,1465,5,162,0,0,1465,273,1,0,0,0,1466,1467,3,10,
		5,0,1467,1468,5,156,0,0,1468,1470,1,0,0,0,1469,1466,1,0,0,0,1470,1473,
		1,0,0,0,1471,1469,1,0,0,0,1471,1472,1,0,0,0,1472,1474,1,0,0,0,1473,1471,
		1,0,0,0,1474,1475,3,272,136,0,1475,275,1,0,0,0,1476,1477,5,162,0,0,1477,
		277,1,0,0,0,1478,1479,3,10,5,0,1479,1480,5,156,0,0,1480,1482,1,0,0,0,1481,
		1478,1,0,0,0,1482,1485,1,0,0,0,1483,1481,1,0,0,0,1483,1484,1,0,0,0,1484,
		1486,1,0,0,0,1485,1483,1,0,0,0,1486,1490,3,276,138,0,1487,1489,5,159,0,
		0,1488,1487,1,0,0,0,1489,1492,1,0,0,0,1490,1488,1,0,0,0,1490,1491,1,0,
		0,0,1491,279,1,0,0,0,1492,1490,1,0,0,0,1493,1494,7,9,0,0,1494,281,1,0,
		0,0,1495,1496,5,83,0,0,1496,1500,3,284,142,0,1497,1499,3,12,6,0,1498,1497,
		1,0,0,0,1499,1502,1,0,0,0,1500,1498,1,0,0,0,1500,1501,1,0,0,0,1501,1505,
		1,0,0,0,1502,1500,1,0,0,0,1503,1504,5,74,0,0,1504,1506,3,286,143,0,1505,
		1503,1,0,0,0,1505,1506,1,0,0,0,1506,1510,1,0,0,0,1507,1509,3,290,145,0,
		1508,1507,1,0,0,0,1509,1512,1,0,0,0,1510,1508,1,0,0,0,1510,1511,1,0,0,
		0,1511,1513,1,0,0,0,1512,1510,1,0,0,0,1513,1514,5,84,0,0,1514,283,1,0,
		0,0,1515,1516,5,162,0,0,1516,285,1,0,0,0,1517,1522,3,288,144,0,1518,1519,
		5,154,0,0,1519,1521,3,288,144,0,1520,1518,1,0,0,0,1521,1524,1,0,0,0,1522,
		1520,1,0,0,0,1522,1523,1,0,0,0,1523,287,1,0,0,0,1524,1522,1,0,0,0,1525,
		1526,3,10,5,0,1526,1527,5,156,0,0,1527,1529,1,0,0,0,1528,1525,1,0,0,0,
		1529,1532,1,0,0,0,1530,1528,1,0,0,0,1530,1531,1,0,0,0,1531,1533,1,0,0,
		0,1532,1530,1,0,0,0,1533,1534,3,284,142,0,1534,289,1,0,0,0,1535,1536,5,
		77,0,0,1536,1539,3,180,90,0,1537,1538,5,154,0,0,1538,1540,3,182,91,0,1539,
		1537,1,0,0,0,1539,1540,1,0,0,0,1540,1544,1,0,0,0,1541,1543,3,204,102,0,
		1542,1541,1,0,0,0,1543,1546,1,0,0,0,1544,1542,1,0,0,0,1544,1545,1,0,0,
		0,1545,1547,1,0,0,0,1546,1544,1,0,0,0,1547,1548,5,80,0,0,1548,291,1,0,
		0,0,1549,1550,3,214,107,0,1550,1551,5,154,0,0,1551,1552,3,294,147,0,1552,
		293,1,0,0,0,1553,1556,3,288,144,0,1554,1555,5,146,0,0,1555,1557,3,296,
		148,0,1556,1554,1,0,0,0,1556,1557,1,0,0,0,1557,295,1,0,0,0,1558,1563,3,
		188,94,0,1559,1563,3,166,83,0,1560,1563,3,278,139,0,1561,1563,5,55,0,0,
		1562,1558,1,0,0,0,1562,1559,1,0,0,0,1562,1560,1,0,0,0,1562,1561,1,0,0,
		0,1563,297,1,0,0,0,1564,1566,3,300,150,0,1565,1564,1,0,0,0,1565,1566,1,
		0,0,0,1566,1567,1,0,0,0,1567,1569,5,155,0,0,1568,1565,1,0,0,0,1569,1572,
		1,0,0,0,1570,1568,1,0,0,0,1570,1571,1,0,0,0,1571,299,1,0,0,0,1572,1570,
		1,0,0,0,1573,1578,3,302,151,0,1574,1578,3,306,153,0,1575,1578,3,322,161,
		0,1576,1578,3,334,167,0,1577,1573,1,0,0,0,1577,1574,1,0,0,0,1577,1575,
		1,0,0,0,1577,1576,1,0,0,0,1578,301,1,0,0,0,1579,1580,3,186,93,0,1580,1581,
		5,146,0,0,1581,1582,3,346,173,0,1582,1586,1,0,0,0,1583,1586,3,156,78,0,
		1584,1586,3,304,152,0,1585,1579,1,0,0,0,1585,1583,1,0,0,0,1585,1584,1,
		0,0,0,1586,303,1,0,0,0,1587,1590,3,158,79,0,1588,1590,3,160,80,0,1589,
		1587,1,0,0,0,1589,1588,1,0,0,0,1590,1591,1,0,0,0,1591,1595,5,148,0,0,1592,
		1596,3,158,79,0,1593,1596,3,160,80,0,1594,1596,3,150,75,0,1595,1592,1,
		0,0,0,1595,1593,1,0,0,0,1595,1594,1,0,0,0,1596,305,1,0,0,0,1597,1602,3,
		308,154,0,1598,1602,3,314,157,0,1599,1602,3,318,159,0,1600,1602,3,320,
		160,0,1601,1597,1,0,0,0,1601,1598,1,0,0,0,1601,1599,1,0,0,0,1601,1600,
		1,0,0,0,1602,307,1,0,0,0,1603,1604,3,310,155,0,1604,1613,5,151,0,0,1605,
		1610,3,316,158,0,1606,1607,5,153,0,0,1607,1609,3,316,158,0,1608,1606,1,
		0,0,0,1609,1612,1,0,0,0,1610,1608,1,0,0,0,1610,1611,1,0,0,0,1611,1614,
		1,0,0,0,1612,1610,1,0,0,0,1613,1605,1,0,0,0,1613,1614,1,0,0,0,1614,1615,
		1,0,0,0,1615,1616,5,150,0,0,1616,309,1,0,0,0,1617,1618,3,10,5,0,1618,1619,
		5,156,0,0,1619,1621,1,0,0,0,1620,1617,1,0,0,0,1621,1624,1,0,0,0,1622,1620,
		1,0,0,0,1622,1623,1,0,0,0,1623,1625,1,0,0,0,1624,1622,1,0,0,0,1625,1626,
		3,312,156,0,1626,311,1,0,0,0,1627,1628,5,162,0,0,1628,313,1,0,0,0,1629,
		1647,3,166,83,0,1630,1631,5,78,0,0,1631,1633,5,156,0,0,1632,1630,1,0,0,
		0,1632,1633,1,0,0,0,1633,1640,1,0,0,0,1634,1637,3,166,83,0,1635,1637,3,
		278,139,0,1636,1634,1,0,0,0,1636,1635,1,0,0,0,1637,1638,1,0,0,0,1638,1639,
		5,156,0,0,1639,1641,1,0,0,0,1640,1636,1,0,0,0,1641,1642,1,0,0,0,1642,1640,
		1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,1644,1645,3,180,90,0,1645,
		1647,1,0,0,0,1646,1629,1,0,0,0,1646,1632,1,0,0,0,1647,1648,1,0,0,0,1648,
		1657,5,149,0,0,1649,1654,3,316,158,0,1650,1651,5,153,0,0,1651,1653,3,316,
		158,0,1652,1650,1,0,0,0,1653,1656,1,0,0,0,1654,1652,1,0,0,0,1654,1655,
		1,0,0,0,1655,1658,1,0,0,0,1656,1654,1,0,0,0,1657,1649,1,0,0,0,1657,1658,
		1,0,0,0,1658,1659,1,0,0,0,1659,1660,5,150,0,0,1660,315,1,0,0,0,1661,1662,
		3,192,96,0,1662,1663,5,146,0,0,1663,1665,1,0,0,0,1664,1661,1,0,0,0,1664,
		1665,1,0,0,0,1665,1666,1,0,0,0,1666,1676,3,346,173,0,1667,1676,3,156,78,
		0,1668,1670,5,143,0,0,1669,1668,1,0,0,0,1669,1670,1,0,0,0,1670,1671,1,
		0,0,0,1671,1672,3,192,96,0,1672,1673,5,147,0,0,1673,1674,3,186,93,0,1674,
		1676,1,0,0,0,1675,1664,1,0,0,0,1675,1667,1,0,0,0,1675,1669,1,0,0,0,1676,
		317,1,0,0,0,1677,1678,5,89,0,0,1678,1679,5,149,0,0,1679,1680,5,150,0,0,
		1680,319,1,0,0,0,1681,1682,5,90,0,0,1682,321,1,0,0,0,1683,1686,3,324,162,
		0,1684,1686,3,326,163,0,1685,1683,1,0,0,0,1685,1684,1,0,0,0,1686,323,1,
		0,0,0,1687,1688,5,110,0,0,1688,1689,3,346,173,0,1689,1690,5,111,0,0,1690,
		1698,3,298,149,0,1691,1692,5,112,0,0,1692,1693,3,346,173,0,1693,1694,5,
		111,0,0,1694,1695,3,298,149,0,1695,1697,1,0,0,0,1696,1691,1,0,0,0,1697,
		1700,1,0,0,0,1698,1696,1,0,0,0,1698,1699,1,0,0,0,1699,1703,1,0,0,0,1700,
		1698,1,0,0,0,1701,1702,5,113,0,0,1702,1704,3,298,149,0,1703,1701,1,0,0,
		0,1703,1704,1,0,0,0,1704,1705,1,0,0,0,1705,1706,5,114,0,0,1706,325,1,0,
		0,0,1707,1708,5,115,0,0,1708,1709,3,346,173,0,1709,1711,5,48,0,0,1710,
		1712,3,328,164,0,1711,1710,1,0,0,0,1712,1713,1,0,0,0,1713,1711,1,0,0,0,
		1713,1714,1,0,0,0,1714,1717,1,0,0,0,1715,1716,5,113,0,0,1716,1718,3,298,
		149,0,1717,1715,1,0,0,0,1717,1718,1,0,0,0,1718,1719,1,0,0,0,1719,1720,
		5,116,0,0,1720,327,1,0,0,0,1721,1722,3,330,165,0,1722,1723,5,154,0,0,1723,
		1724,3,298,149,0,1724,329,1,0,0,0,1725,1730,3,332,166,0,1726,1727,5,153,
		0,0,1727,1729,3,332,166,0,1728,1726,1,0,0,0,1729,1732,1,0,0,0,1730,1728,
		1,0,0,0,1730,1731,1,0,0,0,1731,331,1,0,0,0,1732,1730,1,0,0,0,1733,1736,
		3,56,28,0,1734,1736,3,346,173,0,1735,1733,1,0,0,0,1735,1734,1,0,0,0,1736,
		333,1,0,0,0,1737,1743,3,336,168,0,1738,1743,3,342,171,0,1739,1743,3,344,
		172,0,1740,1743,3,348,174,0,1741,1743,3,350,175,0,1742,1737,1,0,0,0,1742,
		1738,1,0,0,0,1742,1739,1,0,0,0,1742,1740,1,0,0,0,1742,1741,1,0,0,0,1743,
		335,1,0,0,0,1744,1745,5,119,0,0,1745,1746,3,338,169,0,1746,1747,5,146,
		0,0,1747,1748,3,340,170,0,1748,1749,5,122,0,0,1749,1750,3,298,149,0,1750,
		1751,5,123,0,0,1751,337,1,0,0,0,1752,1753,5,162,0,0,1753,339,1,0,0,0,1754,
		1755,3,346,173,0,1755,1756,5,120,0,0,1756,1759,3,346,173,0,1757,1758,5,
		121,0,0,1758,1760,3,346,173,0,1759,1757,1,0,0,0,1759,1760,1,0,0,0,1760,
		341,1,0,0,0,1761,1762,5,124,0,0,1762,1763,3,346,173,0,1763,1764,5,122,
		0,0,1764,1765,3,298,149,0,1765,1766,5,125,0,0,1766,343,1,0,0,0,1767,1768,
		5,126,0,0,1768,1769,3,298,149,0,1769,1770,5,127,0,0,1770,1771,3,346,173,
		0,1771,1772,5,128,0,0,1772,345,1,0,0,0,1773,1778,6,173,-1,0,1774,1779,
		3,354,177,0,1775,1779,3,352,176,0,1776,1779,3,74,37,0,1777,1779,3,150,
		75,0,1778,1774,1,0,0,0,1778,1775,1,0,0,0,1778,1776,1,0,0,0,1778,1777,1,
		0,0,0,1779,1789,1,0,0,0,1780,1781,5,149,0,0,1781,1782,3,346,173,0,1782,
		1783,5,150,0,0,1783,1789,1,0,0,0,1784,1789,3,308,154,0,1785,1789,3,160,
		80,0,1786,1787,7,10,0,0,1787,1789,3,346,173,8,1788,1773,1,0,0,0,1788,1780,
		1,0,0,0,1788,1784,1,0,0,0,1788,1785,1,0,0,0,1788,1786,1,0,0,0,1789,1813,
		1,0,0,0,1790,1791,10,7,0,0,1791,1792,5,132,0,0,1792,1812,3,346,173,7,1793,
		1794,10,6,0,0,1794,1795,7,11,0,0,1795,1812,3,346,173,7,1796,1797,10,5,
		0,0,1797,1798,7,12,0,0,1798,1812,3,346,173,6,1799,1800,10,4,0,0,1800,1801,
		7,13,0,0,1801,1812,3,346,173,5,1802,1803,10,3,0,0,1803,1804,7,14,0,0,1804,
		1812,3,346,173,4,1805,1806,10,2,0,0,1806,1807,5,144,0,0,1807,1812,3,346,
		173,3,1808,1809,10,1,0,0,1809,1810,5,142,0,0,1810,1812,3,346,173,2,1811,
		1790,1,0,0,0,1811,1793,1,0,0,0,1811,1796,1,0,0,0,1811,1799,1,0,0,0,1811,
		1802,1,0,0,0,1811,1805,1,0,0,0,1811,1808,1,0,0,0,1812,1815,1,0,0,0,1813,
		1811,1,0,0,0,1813,1814,1,0,0,0,1814,347,1,0,0,0,1815,1813,1,0,0,0,1816,
		1817,5,117,0,0,1817,349,1,0,0,0,1818,1819,5,118,0,0,1819,351,1,0,0,0,1820,
		1822,3,186,93,0,1821,1823,3,122,61,0,1822,1821,1,0,0,0,1822,1823,1,0,0,
		0,1823,353,1,0,0,0,1824,1831,3,356,178,0,1825,1831,3,368,184,0,1826,1831,
		3,380,190,0,1827,1831,3,386,193,0,1828,1831,3,362,181,0,1829,1831,3,374,
		187,0,1830,1824,1,0,0,0,1830,1825,1,0,0,0,1830,1826,1,0,0,0,1830,1827,
		1,0,0,0,1830,1828,1,0,0,0,1830,1829,1,0,0,0,1831,355,1,0,0,0,1832,1833,
		3,360,180,0,1833,1834,5,158,0,0,1834,1836,1,0,0,0,1835,1832,1,0,0,0,1835,
		1836,1,0,0,0,1836,1837,1,0,0,0,1837,1838,3,358,179,0,1838,357,1,0,0,0,
		1839,1840,7,15,0,0,1840,359,1,0,0,0,1841,1842,7,16,0,0,1842,361,1,0,0,
		0,1843,1844,3,366,183,0,1844,1845,5,158,0,0,1845,1847,1,0,0,0,1846,1843,
		1,0,0,0,1846,1847,1,0,0,0,1847,1848,1,0,0,0,1848,1849,3,364,182,0,1849,
		363,1,0,0,0,1850,1851,7,17,0,0,1851,365,1,0,0,0,1852,1853,7,18,0,0,1853,
		367,1,0,0,0,1854,1855,3,372,186,0,1855,1856,5,158,0,0,1856,1858,1,0,0,
		0,1857,1854,1,0,0,0,1857,1858,1,0,0,0,1858,1859,1,0,0,0,1859,1860,3,370,
		185,0,1860,369,1,0,0,0,1861,1862,5,9,0,0,1862,371,1,0,0,0,1863,1864,7,
		19,0,0,1864,373,1,0,0,0,1865,1866,3,378,189,0,1866,1867,5,158,0,0,1867,
		1869,1,0,0,0,1868,1865,1,0,0,0,1868,1869,1,0,0,0,1869,1870,1,0,0,0,1870,
		1871,3,376,188,0,1871,375,1,0,0,0,1872,1873,7,20,0,0,1873,377,1,0,0,0,
		1874,1875,5,30,0,0,1875,379,1,0,0,0,1876,1877,3,384,192,0,1877,1878,5,
		158,0,0,1878,1880,1,0,0,0,1879,1876,1,0,0,0,1879,1880,1,0,0,0,1880,1881,
		1,0,0,0,1881,1882,3,382,191,0,1882,381,1,0,0,0,1883,1884,7,8,0,0,1884,
		383,1,0,0,0,1885,1886,7,21,0,0,1886,385,1,0,0,0,1887,1892,3,388,194,0,
		1888,1892,3,394,197,0,1889,1892,3,400,200,0,1890,1892,3,406,203,0,1891,
		1887,1,0,0,0,1891,1888,1,0,0,0,1891,1889,1,0,0,0,1891,1890,1,0,0,0,1892,
		387,1,0,0,0,1893,1894,3,392,196,0,1894,1895,5,158,0,0,1895,1896,3,390,
		195,0,1896,389,1,0,0,0,1897,1898,5,5,0,0,1898,391,1,0,0,0,1899,1900,7,
		22,0,0,1900,393,1,0,0,0,1901,1902,3,398,199,0,1902,1903,5,158,0,0,1903,
		1904,3,396,198,0,1904,395,1,0,0,0,1905,1906,5,8,0,0,1906,397,1,0,0,0,1907,
		1908,7,23,0,0,1908,399,1,0,0,0,1909,1910,3,404,202,0,1910,1911,5,158,0,
		0,1911,1912,3,402,201,0,1912,401,1,0,0,0,1913,1914,5,7,0,0,1914,403,1,
		0,0,0,1915,1916,7,24,0,0,1916,405,1,0,0,0,1917,1918,3,410,205,0,1918,1919,
		5,158,0,0,1919,1920,3,408,204,0,1920,407,1,0,0,0,1921,1922,5,6,0,0,1922,
		409,1,0,0,0,1923,1924,7,25,0,0,1924,411,1,0,0,0,1925,1926,5,2,0,0,1926,
		413,1,0,0,0,195,418,426,428,430,435,441,445,451,463,465,472,483,496,498,
		511,524,535,546,552,563,570,580,584,597,605,614,630,634,644,650,655,661,
		666,676,682,686,693,707,717,724,731,742,751,755,763,776,795,799,806,813,
		815,823,830,842,851,862,874,885,894,908,913,919,926,935,945,953,957,963,
		969,971,975,982,984,990,1003,1010,1018,1034,1038,1041,1044,1049,1055,1057,
		1067,1078,1082,1091,1093,1097,1101,1108,1110,1118,1133,1137,1144,1152,
		1164,1170,1177,1182,1189,1196,1204,1211,1215,1218,1225,1233,1238,1245,
		1253,1260,1267,1272,1288,1292,1299,1305,1317,1324,1331,1343,1349,1356,
		1365,1372,1378,1384,1392,1399,1407,1412,1419,1421,1431,1437,1442,1446,
		1451,1453,1459,1471,1483,1490,1500,1505,1510,1522,1530,1539,1544,1556,
		1562,1565,1570,1577,1585,1589,1595,1601,1610,1613,1622,1632,1636,1642,
		1646,1654,1657,1664,1669,1675,1685,1698,1703,1713,1717,1730,1735,1742,
		1759,1778,1788,1811,1813,1822,1830,1835,1846,1857,1868,1879,1891
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
