grammar st;

// namespace: (program | function | fb | global_var | class)*;

// Parser ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
file: (configDeclaration | programDeclaration | pouDeclaration)*;

// configuration and resource decaration//////////////////////////////////////////////////////////////////
configurationName: IDENTIFIER;
resourceTypeName: IDENTIFIER;
configDeclaration:
	CONFIGURATION configurationName globalVarDeclarations? (
		singleResourceDeclaration
		| resourceDeclaration+
	) accessDeclarations? configInit? END_CONFIGURATION;
resourceDeclaration:
	RESOURCE resourceName ON resourceTypeName globalVarDeclarations? singleResourceDeclaration
		END_RESOURCE;
singleResourceDeclaration: (taskConfig ';')* (programConfig ';')+;
resourceName: IDENTIFIER;
accessDeclarations: VAR_ACCESS ( accessDeclaration ';')* END_VAR;
accessDeclaration:
	accessName ':' accessPath ':' dataTypeAccess accessDirection?;
accessPath: (resourceName '.')? directVariable
	| (resourceName '.')? (programName '.')? (
		( fbInstanceName | classInstanceName) '.'
	)* symbolicVariable;
globalVarAccess: (resourceName '.')? globalVarName (
		'.' structElementName
	)?;
accessName: IDENTIFIER;
programOutputAccess: programName '.' symbolicVariable;
programName: IDENTIFIER;
accessDirection: READ_WRITE | READ_ONLY;
taskConfig: TASK taskName taskInit;
taskName: IDENTIFIER;
taskInit:
	'(' (SINGLE ':=' dataSource ',')? (
		INTERVAL ':=' dataSource ','
	)? PRIORITY ':=' UNSIGNED_INT ')';
dataSource:
	literalValue
	| globalVarAccess
	| programOutputAccess
	| directVariable;
programConfig:
	PROGRAM (RETAIN | NON_RETAIN)? programName (WITH taskName)? ':' programTypeAccess (
		'(' programConfigurationElements ')'
	)?;
programConfigurationElements:
	programConfigurationElement (',' programConfigurationElement)*;
programConfigurationElement: fbTask | programCnxn;
fbTask: fbInstanceName WITH taskName;
programCnxn:
	symbolicVariable ':=' programDataSource
	| symbolicVariable '=>' dataSink;
programDataSource:
	literalValue
	| enumValue
	| globalVarAccess
	| directVariable;
dataSink: globalVarAccess | directVariable;
configInit: VAR_CONFIG ( configInstInit ';')* END_VAR;
configInstInit:
	resourceName '.' programName '.' (
		( fbInstanceName | classInstanceName) '.'
	)* (
		variableName locatedAt? ':' locVarSpecInit
		| (
			( fbInstanceName ':' fbTypeAccess)
			| ( classInstanceName ':' classTypeAccess)
		) ':=' structInit
	);

namespaceDeclaration:
	NAMESPACE INTERNAL? namespaceHName usingDirective* namespaceElements END_NAMESPACE;
namespaceElements: (
		dataTypeDeclaration
		| functionDeclaration
		| fbDeclaration
		| classDeclaration
		| interfaceDeclaration
		| namespaceDeclaration
	)+;

namespaceHName: namespaceName ( '.' namespaceName)*;
namespaceName: IDENTIFIER;
usingDirective: USING namespaceHName (',' namespaceHName)* ';';

pouDeclaration:
	usingDirective* (
		globalVarDeclarations
		| dataTypeDeclaration
		| accessDeclarations
		| functionDeclaration
		| fbDeclaration
		| classDeclaration
		| interfaceDeclaration
		| namespaceDeclaration
	)+;

// program declaration /////////////////////////////////////////////////////////////////////////////////////////////////////
programDeclaration:
	PROGRAM programTypeName (
		ioVarDeclarations
		| functionVarDeclarations
		| tempVarDeclarations
		| otherVarDeclarations
		| locVarDeclarations
		| programAccessDeclarations
	)* fbBody END_PROGRAM;
programTypeName: IDENTIFIER;
programTypeAccess: ( namespaceName '.')* programTypeName;
programAccessDeclarations:
	VAR_ACCESS (programAccessDeclaration ';')* END_VAR;
programAccessDeclaration:
	accessName ':' symbolicVariable multibitPartAccess? ':' dataTypeAccess accessDirection?;

// User defined data type declaraction ////////////////////////////////////////////////////////////////////////////////////////
dataTypeDeclaration: TYPE ( typeDeclaration ';')+ END_TYPE;
typeDeclaration:
	simpleTypeDeclaration
	| subrangeTypeDeclaration
	| enumTypeDeclaration
	| arrayTypeDeclaration
	| structTypeDeclaration
	| stringTypeDeclaration
	| refTypeDeclaration;

// simple type declaration
simpleTypeDeclaration: simpleTypeName ':' simpleSpecInit;
simpleSpecInit: simpleSpec ( ':=' constExpression)?;
simpleSpec: elementTypeName | simpleTypeAccess;
elementTypeName:
	numericTypeName
	| boolTypeName
	| derivedTypeAccess
	| multibitsTypeName
	| stringTypeName
	| dateTypeName
	| durationTypeName;
numericTypeName: intTypeName | realTypeName;

// subrange type declaration
subrangeTypeDeclaration: subrangeTypeName ':' subrangeSpecInit;
subrangeSpecInit:
	subrangeSpec (':=' (SIGNED_INT | UNSIGNED_INT))?;
subrangeSpec: intTypeName '(' subrange ')' | subrangeTypeAccess;
subrange: constExpression '..' constExpression;

// enumeration type declaration
enumTypeDeclaration:
	enumTypeName ':' (
		( elementTypeName? namedSpecInit)
		| enumSpecInit
	);
namedSpecInit:
	'(' enumValueSpec (',' enumValueSpec)* ')' (':=' enumValue)?;
enumSpecInit: (
		( '(' IDENTIFIER ( ',' IDENTIFIER)* ')')
		| enumTypeAccess
	) (':=' enumValue)?;
enumValueSpec:
	IDENTIFIER (':=' ( intLiteral | constExpression))?;
enumValue: ( enumTypeName '#')? IDENTIFIER;

// array type declaration
arrayTypeDeclaration: arrayTypeName ':' arraySpecInit;
arraySpecInit: arraySpec ( ':=' arrayInit)?;
arraySpec:
	arrayTypeAccess
	| ARRAY '[' subrange (',' subrange)* ']' OF dataTypeAccess;
dataTypeAccess: elementTypeName | derivedTypeAccess;
arrayInit: '[' arrayElementInit ( ',' arrayElementInit)* ']';
arrayElementInit:
	arrayElementInitValue
	| UNSIGNED_INT '(' arrayElementInitValue? ')';
arrayElementInitValue:
	constExpression
	| enumValue
	| structInit
	| arrayInit;

// struct type declaration
structTypeDeclaration: structTypeName ':' structSpec;
structSpec: structDeclaration | structSpecInit;
structSpecInit: structTypeAccess ( ':=' structInit)?;
structDeclaration:
	STRUCT OVERLAP? (structElementDeclaration ';')+ END_STRUCT;
structElementDeclaration:
	structElementName (locatedAt multibitPartAccess?)? ':' (
		simpleSpecInit
		| subrangeSpecInit
		| enumSpecInit
		| arraySpecInit
		| structSpecInit
	);
locatedAt: AT directVariable;
multibitPartAccess: '.' ( UNSIGNED_INT | DIRECT_PART_ACCESS);
structElementName: IDENTIFIER;
structInit: '(' structElementInit ( ',' structElementInit)* ')';
structElementInit:
	structElementName ':=' (
		constExpression
		| enumValue
		| arrayInit
		| structInit
		| refValue
	);

// string type declaration
stringTypeDeclaration:
	stringTypeName ':' stringTypeName (':=' charString)?;

// reference type declaration
refTypeDeclaration: refTypeName ':' refSpecInit;
refSpecInit: refSpec ( ':=' refValue)?;
refSpec: REF_TO+ dataTypeAccess;
refTypeName: IDENTIFIER;
refTypeAccess: ( namespaceName '.')* refTypeName;
refName: IDENTIFIER;
refValue: refAddress | NULL;
refAddress:
	REF '(' (
		symbolicVariable
		| fbInstanceName
		| classInstanceName
	) ')';
refAssign: refName ':=' ( refName | dereference | refValue);
dereference: refName '^'+;

// function blocks //////////////////////////////////////////////////////////////////////////////////////
fbTypeName: IDENTIFIER;
fbTypeAccess: ( namespaceName '.')* fbTypeName;
fbDeclaration:
	FUNCTION_BLOCK (FINAL | ABSTRACT)? fbName usingDirective* (
		EXTENDS (fbTypeAccess | classTypeAccess)
	)? (IMPLEMENTS interfaceNameList)? (
		fbIOVarDeclarations
		| functionVarDeclarations
		| tempVarDeclarations
		| otherVarDeclarations
	)* (methodDeclaration)* fbBody END_FUNCTION_BLOCK;
fbIOVarDeclarations:
	fbInputDeclarations
	| fbOutputDeclarations
	| inOutDeclarations;
fbInputDeclarations:
	VAR_INPUT (RETAIN | NON_RETAIN)? (fbInputDeclaration ';')* END_VAR;
fbInputDeclaration:
	varDeclarationInit
	| arrayConformDeclaration;
fbOutputDeclarations:
	VAR_OUTPUT (RETAIN | NON_RETAIN)? (fbOutputDeclaration ';')* END_VAR;
fbOutputDeclaration:
	varDeclarationInit
	| arrayConformDeclaration;
otherVarDeclarations:
	retainVarDeclarations
	| nonRetainVarDeclarations
	| locPartlyVarDeclaration;
nonRetainVarDeclarations:
	VAR NON_RETAIN accessSpec? (varDeclarationInit ';')* END_VAR;
fbBody: statementList;
methodDeclaration:
	METHOD accessSpec (FINAL | ABSTRACT)? OVERRIDE? methodName (
		':' dataTypeAccess
	)? (
		ioVarDeclarations
		| functionVarDeclarations
		| tempVarDeclarations
	)* functionBody END_METHOD;
methodName: IDENTIFIER;

// Type accessing /////////////////////////////////////////////////////////////////////
derivedTypeAccess:
	singleElementTypeAccess
	| arrayTypeAccess
	| structTypeAccess
	| stringTypeAccess
	| classTypeAccess
	| refTypeAccess
	| interfaceTypeAccess;

stringTypeAccess: ( namespaceName '.')* stringTypeName;
stringTypeName: (STRING | WSTRING) ('[' UNSIGNED_INT ']')?
	| CHAR
	| WCHAR;

singleElementTypeAccess:
	simpleTypeAccess
	| subrangeTypeAccess
	| enumTypeAccess;

simpleTypeAccess: ( namespaceName '.')* simpleTypeName;
simpleTypeName: IDENTIFIER;

subrangeTypeAccess: ( namespaceName '.')* subrangeTypeName;
subrangeTypeName: IDENTIFIER;

enumTypeAccess: ( namespaceName '.')* enumTypeName;
enumTypeName: IDENTIFIER;

arrayTypeAccess: ( namespaceName '.')* arrayTypeName;
arrayTypeName: IDENTIFIER;

structTypeAccess: ( namespaceName '.')* structTypeName;
structTypeName: IDENTIFIER;

// Variable declarations ////////////////////////////////////////////////////////////////////////////////
variable: directVariable | symbolicVariable;
symbolicVariable: (( THIS '.') | ( namespaceName '.')+)? (
		varAccess
		| multiElementVar
	);
varAccess: varName | dereference;
varName: IDENTIFIER;
multiElementVar: varAccess (subscriptList | structVariable)+;
subscriptList: '[' subscript ( ',' subscript)* ']';
subscript: expression;
structVariable: '.' structElementSelect;
structElementSelect: varAccess;

// input variable declarations
inputDeclarations:
	VAR_INPUT (RETAIN | NON_RETAIN)? (inputDeclaration ';')* END_VAR;
inputDeclaration:
	varDeclarationInit
	| /*Edge_Decl*/
	| arrayConformDeclaration;
//Edge_Decl  : : Variable_List ':' 'BOOL' ( 'R_EDGE' | 'F_EDGE' );
varDeclarationInit:
	variableList ':' (
		simpleSpecInit
		| strVarDeclaration
		| refSpecInit
	)
	| arrayVarDeclarationInit
	| structVarDeclarationInit
	| fbDeclarationInit
	| interfaceSpecInit;

refVarDeclaration: variableList ':' refSpec;

interfaceVarDeclaration: variableList ':' interfaceTypeAccess;
variableList: variableName ( ',' variableName)*;
variableName: IDENTIFIER;

arrayVarDeclarationInit: variableList ':' arraySpecInit;
arrayConformand: ARRAY '[' '*' ( ',' '*')* ']' OF dataTypeAccess;
arrayConformDeclaration: variableList ':' arrayConformand;

structVarDeclarationInit: variableList ':' structSpecInit;
fbDeclarationNoInit: fbName ( ',' fbName)* ':' fbTypeAccess;
fbDeclarationInit: fbDeclarationNoInit ( ':=' structInit)?;
fbName: IDENTIFIER;
fbInstanceName: ( namespaceName '.')* fbName '^'*;

// output declarations
outputDeclarations:
	VAR_OUTPUT (RETAIN | NON_RETAIN)? (outputDeclaration ';')* END_VAR;
outputDeclaration: varDeclarationInit | arrayConformDeclaration;
inOutDeclarations:
	VAR_IN_OUT (inOutVarDeclaration ';')* END_VAR;
inOutVarDeclaration:
	varDeclaration
	| arrayConformDeclaration
	| fbDeclarationNoInit;

// normal variable declaration
varDeclaration:
	variableList ':' (
		simpleSpec
		| strVarDeclaration
		| arrayVarDeclaration
		| structVarDeclaration
	);

arrayVarDeclaration: variableList ':' arraySpec;

structVarDeclaration: variableList ':' structTypeAccess;

varDeclarations:
	VAR CONSTANT? accessSpec? (varDeclarationInit ';')* END_VAR;

retainVarDeclarations:
	VAR RETAIN accessSpec? (varDeclarationInit ';')* END_VAR;

locVarDeclarations:
	VAR (CONSTANT | RETAIN | NON_RETAIN)? (locVarDeclaration ';')* END_VAR;
locVarDeclaration: variableName? locatedAt ':' locVarSpecInit;

tempVarDeclarations:
	VAR_TEMP (
		(
			varDeclaration
			| refVarDeclaration
			| interfaceVarDeclaration
		) ';'
	)* END_VAR;

externalVarDeclarations:
	VAR_EXTERNAL CONSTANT? (externalDeclaration ';')* END_VAR;
externalDeclaration:
	globalVarName ':' (
		simpleSpec
		| arraySpec
		| structTypeAccess
		| fbTypeAccess
		| refTypeAccess
	);

// global variables
globalVarName: IDENTIFIER;
globalVarDeclarations:
	VAR_GLOBAL (CONSTANT | RETAIN)? (globalVarDeclaration ';')* END_VAR;
globalVarDeclaration:
	globalVarSpec ':' (locVarSpecInit | fbTypeAccess);
globalVarSpec: (globalVarName ( ',' globalVarName)*)
	| ( globalVarName locatedAt);
locVarSpecInit:
	simpleSpecInit
	| arraySpecInit
	| structSpecInit
	| sByteStrSpec
	| dByteStrSpec;

strVarDeclaration: sByteStrVarDecl | dByteStrVarDeclaration;
sByteStrVarDecl: variableList ':' sByteStrSpec;
sByteStrSpec: STRING ( '[' ']')? ( ':=' SINGLE_BYTE_STRING)?;
dByteStrVarDeclaration: variableList ':' dByteStrSpec;
dByteStrSpec:
	WSTRING ('[' UNSIGNED_INT ']')? (':=' DOUBLE_BYTE_STRING)?;
locPartlyVarDeclaration:
	VAR (RETAIN | NON_RETAIN)? locPartlyVar* END_VAR;
locPartlyVar:
	variableName AT PARTLY_DIRECT_VARIABLE ':' varSpec ';';
varSpec:
	simpleSpec
	| arraySpec
	| structTypeAccess
	| ( STRING | WSTRING) ( '[' UNSIGNED_INT ']')?;

// Funtions ///////////////////////////////////////////////////////////////////////////////////////
functionName: IDENTIFIER;
functionAccess: ( namespaceName '.')* functionName;
functionDeclaration:
	FUNCTION functionName (':' dataTypeAccess)? usingDirective* (
		ioVarDeclarations
		| functionVarDeclarations
		| tempVarDeclarations
	)* functionBody END_FUNCTION;
ioVarDeclarations:
	inputDeclarations
	| outputDeclarations
	| inOutDeclarations;
functionVarDeclarations:
	externalVarDeclarations
	| varDeclarations;
functionBody: statementList;

// Classes ////////////////////////////////////////////////////////////////////////////////////////////////////
classDeclaration:
	CLASS (FINAL | ABSTRACT)? classTypeName usingDirective* (
		EXTENDS classTypeAccess
	)? (IMPLEMENTS interfaceNameList)? (
		functionVarDeclarations
		| otherVarDeclarations
	)* (methodDeclaration)* END_CLASS;
classTypeName: IDENTIFIER;
classTypeAccess: ( namespaceName '.')* classTypeName;
className: IDENTIFIER;
classInstanceName: ( namespaceName '.')* className '^'*;

// interfaces
interfaceDeclaration:
	INTERFACE interfaceTypeName usingDirective* (
		EXTENDS interfaceNameList
	)? methodPrototype* END_INTERFACE;
methodPrototype:
	METHOD methodName (':' dataTypeAccess)? ioVarDeclarations* END_METHOD;
interfaceSpecInit: variableList ( ':=' interfaceValue)?;
interfaceValue:
	symbolicVariable
	| fbInstanceName
	| classInstanceName
	| NULL;
interfaceNameList:
	interfaceTypeAccess (',' interfaceTypeAccess)*;
interfaceTypeName: IDENTIFIER;
interfaceTypeAccess: ( namespaceName '.')* interfaceTypeName;
interfaceName: IDENTIFIER;
accessSpec: PUBLIC | PROTECTED | PRIVATE | INTERNAL;

// Statements
variableAccess: variable multibitPartAccess?;

functionCall:
	functionAccess '(' (parameterAssign ( ',' parameterAssign)*)? ')';

statementList: ( statement? ';')*;
statement:
	assignStatement
	| subprogControlStatement
	| selectionStatement
	| iterationStatement;
assignStatement: (variable ':=' expression)
	| refAssign
	| assignmentAttempt;
assignmentAttempt: (refName | dereference) '?=' (
		refName
		| dereference
		| refValue
	);

invocation: (
		fbInstanceName
		| methodName
		| THIS
		| (
			(THIS '.')? (
				(( fbInstanceName | classInstanceName) '.')+
			) methodName
		)
	) '(' (parameterAssign ( ',' parameterAssign)*)? ')';

subprogControlStatement:
	functionCall
	| invocation
	| SUPER '(' ')'
	| RETURN;
parameterAssign: (( variableName ':=')? expression)
	| refAssign
	| ( NOT? variableName '=>' variable);

// selection statements
selectionStatement: ifStatement | caseStatement;
ifStatement:
	IF expression THEN statementList (
		ELSIF expression THEN statementList
	)* (ELSE statementList)? END_IF;
caseStatement:
	CASE expression OF caseSelection+ (ELSE statementList)? END_CASE;
caseSelection: caseList ':' statementList;
caseList: caseListElement ( ',' caseListElement)*;
caseListElement: subrange | constExpression;

// iteration statements
iterationStatement:
	forStatement
	| whileStatement
	| repeatStatement
	| EXIT
	| CONTINUE;
forStatement:
	FOR controlVariable ':=' forList DO statementList END_FOR;
controlVariable: IDENTIFIER;
forList: expression TO expression ( BY expression)?;
whileStatement: WHILE expression DO statementList END_WHILE;
repeatStatement:
	REPEAT statementList UNTIL expression END_REPEAT;

// expressions
constExpression: expression;

// ułożone zgodnie z normą [OK]
expression:
	primaryExpression												# primeExpression
	| '(' expression ')'											# bracketedExpression
	| functionCall													# funcCallExpression
	| dereference													# derefExpression
	| ( '-' | '+' | NOT) expression									# unaryExpression
	| <assoc = right> expression '**' expression					# exponentExpression
	| expression ('*' | '/' | MOD) expression						# multDivModExpression
	| expression ('+' | '-') expression								# addSubExpression
	| expression ('<' | '>' | '<=' | '>=' | '=' | '<>') expression	# comparisonExpression
	| expression ('&' | AND) expression								# andExpression
	| expression XOR expression										# xorExpr
	| expression OR expression										# OrExpr;

// ułożone według intuicji, raczej dobrze [OK]
primaryExpression:
	literalValue
	| variableAccess
	| enumValue
	| refValue;

// Literals /////////////////////////////////////////////////////////////////////////////////////////////////
literalValue:
	numericLiteral
	| charLiteral
	| timeLiteral
	| multibitsLiteral
	| boolLiteral;

numericLiteral: intLiteral | realLiteral;

// integer literals
intLiteral: (intTypeName '#')? intLiteralValue;
intLiteralValue:
	SIGNED_INT
	| UNSIGNED_INT
	| BINARY_INT
	| OCTAL_INT
	| HEX_INT;
intTypeName: unsignedIntTypeName | signedIntTypeName;
unsignedIntTypeName: USINT | UINT | UDINT | ULINT;
signedIntTypeName: SINT | INT | DINT | LINT;

// multibits literals
multibitsLiteral: (multibitsTypeName '#')? multibitsLiteralValue;
multibitsLiteralValue:
	UNSIGNED_INT
	| BINARY_INT
	| OCTAL_INT
	| HEX_INT;
multibitsTypeName: BYTE | WORD | DWORD | LWORD;

// real literals
realLiteral: (realTypeName '#')? realLiteralValue;
realLiteralValue: GENERAL_REAL;
realTypeName: REAL | LREAL;

// bool literals
boolLiteral: (boolTypeName '#')? boolLiteralValue;
boolLiteralValue: BOOLEAN | UNSIGNED_INT;
boolTypeName: BOOL;

// character literals
charLiteral: ( charTypeName '#')? charString;
charString: SINGLE_BYTE_STRING | DOUBLE_BYTE_STRING;
charTypeName: STRING | CHAR | WSTRING | WCHAR;

// time literals
timeLiteral:
	durationLiteral
	| timeOfDayLiteral
	| dateLiteral
	| dateAndTimeLiteral;

durationLiteral: (durationTypeName) '#' durationLiteralValue;
durationLiteralValue: DURATION;
durationTypeName: TIME | LTIME | 'T' | 'LT';

timeOfDayLiteral: timeOfDayTypeName '#' timeOfDayLiteralValue;
timeOfDayLiteralValue: CLOCK_TIME;
timeOfDayTypeName: TIME_OF_DAY | LTIME_OF_DAY | 'TOD' | 'LTOD';

dateLiteral: (dateTypeName) '#' dateLiteralValue;
dateLiteralValue: DATE_VALUE;
dateTypeName: DATE | LDATE | 'D' | 'LD';

dateAndTimeLiteral: (dateAndTimeTypeName) '#' dateAndTimeLiteralValue;
dateAndTimeLiteralValue: DATE_TIME_VALUE;
dateAndTimeTypeName:
	DATE_AND_TIME
	| LDATE_AND_TIME
	| 'DT'
	| 'LDT';

// direct variables //////////////////////////////////////////////////////////
directVariable: DIRECT_VARIABLE;

// LEXER //////////////////////////////////////////////////////////////////////////////////////////////////////////////
PARTLY_DIRECT_VARIABLE: PERCENT ('I' | 'Q' | 'M') '*';
DIRECT_PART_ACCESS:
	PERCENT ('X' | 'B' | 'W' | 'D' | 'L')? UNSIGNED_INT;
DIRECT_VARIABLE:
	PERCENT ('I' | 'Q' | 'M')? (
		'X'
		| 'B'
		| 'W'
		| 'D'
		| 'L'
		| '*'
	)? (UNSIGNED_INT ( DOT UNSIGNED_INT)*)?;

// strings
SINGLE_BYTE_STRING: '\'' SINGLE_BYTE_CHAR* '\'';
DOUBLE_BYTE_STRING: '"' DOUBLE_BYTE_CHAR* '"';

// date and time
DURATION: ('+' | '-')? (DIGIT+ DURATION_UNIT '_'?)+ DIGIT+ (
		DOT DIGIT+
	)? DURATION_UNIT;
DATE_TIME_VALUE: DATE_VALUE '-' CLOCK_TIME;
DATE_VALUE:
	DIGIT DIGIT DIGIT DIGIT '-' DIGIT DIGIT '-' DIGIT DIGIT;
CLOCK_TIME:
	DIGIT DIGIT ':' DIGIT DIGIT ':' UNSIGNED_INT DOT UNSIGNED_INT;

// simple data types //
GENERAL_REAL: ('+' | '-')? UNSIGNED_INT DOT UNSIGNED_INT (
		'E' (SIGNED_INT | UNSIGNED_INT)
	)?;
SIGNED_INT: ( '+' | '-') UNSIGNED_INT;
UNSIGNED_INT: DIGIT ( '_'? DIGIT)*;
BINARY_INT: '2#' ( '_'? BIT)+;
OCTAL_INT: '8#' ( '_'? OCTAL_DIGIT)+;
HEX_INT: '16#' ( '_'? HEX_DIGIT)+;
BOOLEAN: FALSE | TRUE;

// integer names
USINT: 'USINT';
UINT: 'UINT';
UDINT: 'UDINT';
ULINT: 'ULINT';
SINT: 'SINT';
INT: 'INT';
DINT: 'DINT';
LINT: 'LINT';

// real data type names
REAL: 'REAL';
LREAL: 'LREAL';

// multibit data type names
BYTE: 'BYTE';
WORD: 'WORD';
DWORD: 'DWORD';
LWORD: 'LWORD';

// bool type name
BOOL: 'BOOL';
FALSE: 'FALSE';
TRUE: 'TRUE';

// characters type names
STRING: 'STRING';
WSTRING: 'WSTRING';
CHAR: 'CHAR';
WCHAR: 'WCHAR';

// data type names
TIME: 'TIME';
LTIME: 'LTIME';
TIME_OF_DAY: 'TIME_OF_DAY';
LTIME_OF_DAY: 'LTIME_OF_DAY';
DATE: 'DATE';
LDATE: 'LDATE';
DATE_AND_TIME: 'DATE_AND_TIME';
LDATE_AND_TIME: 'LDATE_AND_TIME';

// user defined data types
TYPE: 'TYPE';
END_TYPE: 'END_TYPE';

// arrays
ARRAY: 'ARRAY';
OF: 'OF';

// structures
STRUCT: 'STRUCT';
OVERLAP: 'OVERLAP';
END_STRUCT: 'END_STRUCT';

// dirext variables
AT: 'AT';

// references
REF_TO: 'REF_TO';
REF: 'REF';
NULL: 'NULL';

// variable declarations
THIS: 'THIS';
VAR_INPUT: 'VAR_INPUT';
VAR_OUTPUT: 'VAR_OUTPUT';
VAR_IN_OUT: 'VAR_IN_OUT';
RETAIN: 'RETAIN';
NON_RETAIN: 'NON_RETAIN';
END_VAR: 'END_VAR';
VAR: 'VAR';
CONSTANT: 'CONSTANT';
VAR_TEMP: 'VAR_TEMP';
VAR_EXTERNAL: 'VAR_EXTERNAL';
VAR_GLOBAL: 'VAR_GLOBAL';

// functions
FUNCTION: 'FUNCTION';
END_FUNCTION: 'END_FUNCTION';

// function blocks and classes
FUNCTION_BLOCK: 'FUNCTION_BLOCK';
FINAL: 'FINAL';
ABSTRACT: 'ABSTRACT';
EXTENDS: 'EXTENDS';
IMPLEMENTS: 'IMPLEMENTS';
END_FUNCTION_BLOCK: 'END_FUNCTION_BLOCK';
METHOD: 'METHOD';
OVERRIDE: 'OVERRIDE';
END_METHOD: 'END_METHOD';
CLASS: 'CLASS';
END_CLASS: 'END_CLASS';
INTERFACE: 'INTERFACE';
END_INTERFACE: 'END_INTERFACE';
PUBLIC: 'PUBLIC';
PROTECTED: 'PROTECTED';
PRIVATE: 'PRIVATE';
INTERNAL: 'INTERAL';

// program declaration
PROGRAM: 'PROGRAM';
END_PROGRAM: 'END_PROGRAM';
VAR_ACCESS: 'VAR_ACCESS';

// configuration and resource declaration
CONFIGURATION: 'CONFIGURATION';
END_CONFIGURATION: 'END_CONFIGURATION';
RESOURCE: 'RESOURCE';
ON: 'ON';
END_RESOURCE: 'END_RESOURCE';
READ_WRITE: 'READ_WRITE';
READ_ONLY: 'READ_ONLY';
TASK: 'TASK';
SINGLE: 'SINGLE';
INTERVAL: 'INTERVAL';
PRIORITY: 'PRIORITY';
WITH: 'WITH';
VAR_CONFIG: 'VAR_CONFIG';

// namespace
NAMESPACE: 'NAMESPACE';
END_NAMESPACE: 'END_NAMESPACE';
USING: 'USING';

// logical expressions
AND: 'AND';
OR: 'OR';
XOR: 'XOR';
NOT: 'NOT';
MOD: 'MOD';

SUPER: 'SUPER';
RETURN: 'RETURN';

// selection statements
IF: 'IF';
THEN: 'THEN';
ELSIF: 'ELSIF';
ELSE: 'ELSE';
END_IF: 'END_IF';
CASE: 'CASE';
END_CASE: 'END_CASE';

// loop statements
EXIT: 'EXIT';
CONTINUE: 'CONTINUE';
FOR: 'FOR';
TO: 'TO';
BY: 'BY';
DO: 'DO';
END_FOR: 'END_FOR';
WHILE: 'WHILE';
END_WHILE: 'END_WHILE';
REPEAT: 'REPEAT';
UNTIL: 'UNTIL';
END_REPEAT: 'END_REPEAT';

// special characters
DOT: '.';
PERCENT: '%';

// essential fragments
fragment NON_DIGIT: [a-zA-Z_];
fragment DIGIT: [0-9];
fragment BIT: [0-1];
fragment OCTAL_DIGIT: [0-7];
fragment HEX_DIGIT: [0-9a-fA-F];

fragment SINGLE_BYTE_CHAR:
	COMMON_CHAR
	| '$\''
	| '"'
	| '$' HEX_DIGIT HEX_DIGIT;

fragment DOUBLE_BYTE_CHAR:
	COMMON_CHAR
	| '\''
	| '$"'
	| '$' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;

fragment COMMON_CHAR:
	[ !#%&]
	| '(' ..'/'
	| DIGIT
	| NON_DIGIT
	| [:-@]
	| '[' ..'`'
	| '{' ..'~'
	| TWO_CHAR_COMMON;

fragment TWO_CHAR_COMMON:
	'$$'
	| '$L'
	| '$N'
	| '$P'
	| '$R'
	| '$T';

fragment DURATION_UNIT:
	'D'
	| 'H'
	| 'M'
	| 'S'
	| 'MS'
	| 'US'
	| 'NS';

// identifiers
IDENTIFIER: NON_DIGIT (NON_DIGIT | DIGIT)*;

// pragmas, placement is important 
PRAGMA: '{' .*? '}' -> channel(HIDDEN);

// comments
LINE_COMMENT: '//' ~[\r\n]* -> channel(HIDDEN);
SLASH_COMMENT:
	'/*' (SLASH_COMMENT | .)*? '*/' -> channel(HIDDEN);
BRACE_COMMENT:
	'(*' (BRACE_COMMENT | .)*? '*)' -> channel(HIDDEN);

// whitespaces
WHITESPACE: [ \t\r\n]+ -> channel(HIDDEN);