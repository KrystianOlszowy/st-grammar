//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/kryst/Desktop/Praca magisterska/st-grammar/st.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class stLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PROGRAM=1, END_PROGRAM=2, VAR=3, VAR_INPUT=4, VAR_OUTPUT=5, VAR_IN_OUT=6, 
		VAR_GLOBAL=7, VAR_EXTERNAL=8, VAR_ACCESS=9, END_VAR=10, RETAIN=11, CONSTANT=12, 
		AT=13, BOOL=14, BYTE=15, WORD=16, DWORD=17, LWORD=18, SINT=19, INT=20, 
		DINT=21, LINT=22, USINT=23, UINT=24, UDINT=25, ULINT=26, REAL=27, LREAL=28, 
		TIME=29, DATE=30, TIME_OF_DAY=31, DATE_AND_TIME=32, STRING=33, ANY=34, 
		ANY_BIT=35, ANY_NUM=36, ANY_DATE=37, ANY_INT=38, ANY_REAL=39, ASSIGNMENT_OPERATOR=40, 
		AND_OPERATOR=41, OR_OPERATOR=42, NOT_OPERATOR=43, XOR_OPERATOR=44, COLON=45, 
		SEMICOLON=46, DOT=47, COMMA=48, BRACKET_OPEN=49, BRACKET_CLOSE=50, SQUARE_BRACKET_OPEN=51, 
		SQUARE_BRACKET_CLOSE=52, CURLY_BRACKET_OPEN=53, CURLY_BRACKET_CLOSE=54, 
		HASH=55, CARET=56, PERCENT=57, MEMORY_ADDRESS=58, NUMBER=59, TIME_VALUE=60, 
		NAME=61, SINGLE_LINE_COMMENT=62, DELIMITED_COMMENT_SLASH=63, DELIMITED_COMMENT_BRACKET=64, 
		WHITESPACE=65;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"PROGRAM", "END_PROGRAM", "VAR", "VAR_INPUT", "VAR_OUTPUT", "VAR_IN_OUT", 
		"VAR_GLOBAL", "VAR_EXTERNAL", "VAR_ACCESS", "END_VAR", "RETAIN", "CONSTANT", 
		"AT", "BOOL", "BYTE", "WORD", "DWORD", "LWORD", "SINT", "INT", "DINT", 
		"LINT", "USINT", "UINT", "UDINT", "ULINT", "REAL", "LREAL", "TIME", "DATE", 
		"TIME_OF_DAY", "DATE_AND_TIME", "STRING", "ANY", "ANY_BIT", "ANY_NUM", 
		"ANY_DATE", "ANY_INT", "ANY_REAL", "ASSIGNMENT_OPERATOR", "AND_OPERATOR", 
		"OR_OPERATOR", "NOT_OPERATOR", "XOR_OPERATOR", "COLON", "SEMICOLON", "DOT", 
		"COMMA", "BRACKET_OPEN", "BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
		"CURLY_BRACKET_OPEN", "CURLY_BRACKET_CLOSE", "HASH", "CARET", "PERCENT", 
		"MEMORY_ADDRESS", "NUMBER", "TIME_VALUE", "NAME", "SINGLE_LINE_COMMENT", 
		"DELIMITED_COMMENT_SLASH", "DELIMITED_COMMENT_BRACKET", "WHITESPACE"
	};


	public stLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public stLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'PROGRAM'", "'END_PROGRAM'", "'VAR'", "'VAR_INPUT'", "'VAR_OUTPUT'", 
		"'VAR_IN_OUT'", "'VAR_GLOBAL'", "'VAR_EXTERNAL'", "'VAR_ACCESS;'", "'END_VAR'", 
		"'RETAIN'", "'CONSTANT'", "'AT'", "'BOOL'", "'BYTE'", "'WORD'", "'DWORD'", 
		"'LWORD'", "'SINT'", "'INT'", "'DINT'", "'LINT'", "'USINT'", "'UINT'", 
		"'UDINT'", "'ULINT'", "'REAL'", "'LREAL'", "'TIME'", "'DATE'", "'TIME_OF_DAY'", 
		"'DATE_AND_TIME'", "'STRING'", "'ANY'", "'ANY_BIT'", "'ANY_NUM'", "'ANY_DATE'", 
		"'ANY_INT'", "'ANY_REAL'", "':='", null, "'OR'", "'NOT'", "'XOR'", "':'", 
		"';'", "'.'", "','", "'('", "')'", "'['", "']'", "'{'", "'}'", "'#'", 
		"'^'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PROGRAM", "END_PROGRAM", "VAR", "VAR_INPUT", "VAR_OUTPUT", "VAR_IN_OUT", 
		"VAR_GLOBAL", "VAR_EXTERNAL", "VAR_ACCESS", "END_VAR", "RETAIN", "CONSTANT", 
		"AT", "BOOL", "BYTE", "WORD", "DWORD", "LWORD", "SINT", "INT", "DINT", 
		"LINT", "USINT", "UINT", "UDINT", "ULINT", "REAL", "LREAL", "TIME", "DATE", 
		"TIME_OF_DAY", "DATE_AND_TIME", "STRING", "ANY", "ANY_BIT", "ANY_NUM", 
		"ANY_DATE", "ANY_INT", "ANY_REAL", "ASSIGNMENT_OPERATOR", "AND_OPERATOR", 
		"OR_OPERATOR", "NOT_OPERATOR", "XOR_OPERATOR", "COLON", "SEMICOLON", "DOT", 
		"COMMA", "BRACKET_OPEN", "BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
		"CURLY_BRACKET_OPEN", "CURLY_BRACKET_CLOSE", "HASH", "CARET", "PERCENT", 
		"MEMORY_ADDRESS", "NUMBER", "TIME_VALUE", "NAME", "SINGLE_LINE_COMMENT", 
		"DELIMITED_COMMENT_SLASH", "DELIMITED_COMMENT_BRACKET", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "st.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static stLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 57 : MEMORY_ADDRESS_action(_localctx, actionIndex); break;
		}
	}
	private void MEMORY_ADDRESS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: 4 break;
		}
	}

	private static int[] _serializedATN = {
		4,0,65,545,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
		15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
		17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,
		20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,
		23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
		25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,
		28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,
		32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
		36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,427,8,40,
		1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,45,
		1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,
		1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,57,1,58,
		1,58,5,58,472,8,58,10,58,12,58,475,9,58,1,58,1,58,4,58,479,8,58,11,58,
		12,58,480,3,58,483,8,58,1,59,1,59,1,59,1,59,5,59,489,8,59,10,59,12,59,
		492,9,59,1,59,1,59,1,60,1,60,5,60,498,8,60,10,60,12,60,501,9,60,1,61,1,
		61,1,61,1,61,5,61,507,8,61,10,61,12,61,510,9,61,1,61,1,61,1,62,1,62,1,
		62,1,62,5,62,518,8,62,10,62,12,62,521,9,62,1,62,1,62,1,62,1,62,1,62,1,
		63,1,63,1,63,1,63,5,63,532,8,63,10,63,12,63,535,9,63,1,63,1,63,1,63,1,
		63,1,63,1,64,1,64,1,64,1,64,3,508,519,533,0,65,1,1,3,2,5,3,7,4,9,5,11,
		6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
		37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
		61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
		85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
		54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,
		64,129,65,1,0,6,1,0,48,57,1,0,49,57,2,0,84,84,116,116,2,0,65,90,97,122,
		4,0,48,57,65,90,95,95,97,122,2,0,9,10,32,32,553,0,1,1,0,0,0,0,3,1,0,0,
		0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
		0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
		0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
		0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
		103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
		113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
		123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,1,131,1,0,0,0,3,
		139,1,0,0,0,5,151,1,0,0,0,7,155,1,0,0,0,9,165,1,0,0,0,11,176,1,0,0,0,13,
		187,1,0,0,0,15,198,1,0,0,0,17,211,1,0,0,0,19,223,1,0,0,0,21,231,1,0,0,
		0,23,238,1,0,0,0,25,247,1,0,0,0,27,250,1,0,0,0,29,255,1,0,0,0,31,260,1,
		0,0,0,33,265,1,0,0,0,35,271,1,0,0,0,37,277,1,0,0,0,39,282,1,0,0,0,41,286,
		1,0,0,0,43,291,1,0,0,0,45,296,1,0,0,0,47,302,1,0,0,0,49,307,1,0,0,0,51,
		313,1,0,0,0,53,319,1,0,0,0,55,324,1,0,0,0,57,330,1,0,0,0,59,335,1,0,0,
		0,61,340,1,0,0,0,63,352,1,0,0,0,65,366,1,0,0,0,67,373,1,0,0,0,69,377,1,
		0,0,0,71,385,1,0,0,0,73,393,1,0,0,0,75,402,1,0,0,0,77,410,1,0,0,0,79,419,
		1,0,0,0,81,426,1,0,0,0,83,428,1,0,0,0,85,431,1,0,0,0,87,435,1,0,0,0,89,
		439,1,0,0,0,91,441,1,0,0,0,93,443,1,0,0,0,95,445,1,0,0,0,97,447,1,0,0,
		0,99,449,1,0,0,0,101,451,1,0,0,0,103,453,1,0,0,0,105,455,1,0,0,0,107,457,
		1,0,0,0,109,459,1,0,0,0,111,461,1,0,0,0,113,463,1,0,0,0,115,465,1,0,0,
		0,117,469,1,0,0,0,119,484,1,0,0,0,121,495,1,0,0,0,123,502,1,0,0,0,125,
		513,1,0,0,0,127,527,1,0,0,0,129,541,1,0,0,0,131,132,5,80,0,0,132,133,5,
		82,0,0,133,134,5,79,0,0,134,135,5,71,0,0,135,136,5,82,0,0,136,137,5,65,
		0,0,137,138,5,77,0,0,138,2,1,0,0,0,139,140,5,69,0,0,140,141,5,78,0,0,141,
		142,5,68,0,0,142,143,5,95,0,0,143,144,5,80,0,0,144,145,5,82,0,0,145,146,
		5,79,0,0,146,147,5,71,0,0,147,148,5,82,0,0,148,149,5,65,0,0,149,150,5,
		77,0,0,150,4,1,0,0,0,151,152,5,86,0,0,152,153,5,65,0,0,153,154,5,82,0,
		0,154,6,1,0,0,0,155,156,5,86,0,0,156,157,5,65,0,0,157,158,5,82,0,0,158,
		159,5,95,0,0,159,160,5,73,0,0,160,161,5,78,0,0,161,162,5,80,0,0,162,163,
		5,85,0,0,163,164,5,84,0,0,164,8,1,0,0,0,165,166,5,86,0,0,166,167,5,65,
		0,0,167,168,5,82,0,0,168,169,5,95,0,0,169,170,5,79,0,0,170,171,5,85,0,
		0,171,172,5,84,0,0,172,173,5,80,0,0,173,174,5,85,0,0,174,175,5,84,0,0,
		175,10,1,0,0,0,176,177,5,86,0,0,177,178,5,65,0,0,178,179,5,82,0,0,179,
		180,5,95,0,0,180,181,5,73,0,0,181,182,5,78,0,0,182,183,5,95,0,0,183,184,
		5,79,0,0,184,185,5,85,0,0,185,186,5,84,0,0,186,12,1,0,0,0,187,188,5,86,
		0,0,188,189,5,65,0,0,189,190,5,82,0,0,190,191,5,95,0,0,191,192,5,71,0,
		0,192,193,5,76,0,0,193,194,5,79,0,0,194,195,5,66,0,0,195,196,5,65,0,0,
		196,197,5,76,0,0,197,14,1,0,0,0,198,199,5,86,0,0,199,200,5,65,0,0,200,
		201,5,82,0,0,201,202,5,95,0,0,202,203,5,69,0,0,203,204,5,88,0,0,204,205,
		5,84,0,0,205,206,5,69,0,0,206,207,5,82,0,0,207,208,5,78,0,0,208,209,5,
		65,0,0,209,210,5,76,0,0,210,16,1,0,0,0,211,212,5,86,0,0,212,213,5,65,0,
		0,213,214,5,82,0,0,214,215,5,95,0,0,215,216,5,65,0,0,216,217,5,67,0,0,
		217,218,5,67,0,0,218,219,5,69,0,0,219,220,5,83,0,0,220,221,5,83,0,0,221,
		222,5,59,0,0,222,18,1,0,0,0,223,224,5,69,0,0,224,225,5,78,0,0,225,226,
		5,68,0,0,226,227,5,95,0,0,227,228,5,86,0,0,228,229,5,65,0,0,229,230,5,
		82,0,0,230,20,1,0,0,0,231,232,5,82,0,0,232,233,5,69,0,0,233,234,5,84,0,
		0,234,235,5,65,0,0,235,236,5,73,0,0,236,237,5,78,0,0,237,22,1,0,0,0,238,
		239,5,67,0,0,239,240,5,79,0,0,240,241,5,78,0,0,241,242,5,83,0,0,242,243,
		5,84,0,0,243,244,5,65,0,0,244,245,5,78,0,0,245,246,5,84,0,0,246,24,1,0,
		0,0,247,248,5,65,0,0,248,249,5,84,0,0,249,26,1,0,0,0,250,251,5,66,0,0,
		251,252,5,79,0,0,252,253,5,79,0,0,253,254,5,76,0,0,254,28,1,0,0,0,255,
		256,5,66,0,0,256,257,5,89,0,0,257,258,5,84,0,0,258,259,5,69,0,0,259,30,
		1,0,0,0,260,261,5,87,0,0,261,262,5,79,0,0,262,263,5,82,0,0,263,264,5,68,
		0,0,264,32,1,0,0,0,265,266,5,68,0,0,266,267,5,87,0,0,267,268,5,79,0,0,
		268,269,5,82,0,0,269,270,5,68,0,0,270,34,1,0,0,0,271,272,5,76,0,0,272,
		273,5,87,0,0,273,274,5,79,0,0,274,275,5,82,0,0,275,276,5,68,0,0,276,36,
		1,0,0,0,277,278,5,83,0,0,278,279,5,73,0,0,279,280,5,78,0,0,280,281,5,84,
		0,0,281,38,1,0,0,0,282,283,5,73,0,0,283,284,5,78,0,0,284,285,5,84,0,0,
		285,40,1,0,0,0,286,287,5,68,0,0,287,288,5,73,0,0,288,289,5,78,0,0,289,
		290,5,84,0,0,290,42,1,0,0,0,291,292,5,76,0,0,292,293,5,73,0,0,293,294,
		5,78,0,0,294,295,5,84,0,0,295,44,1,0,0,0,296,297,5,85,0,0,297,298,5,83,
		0,0,298,299,5,73,0,0,299,300,5,78,0,0,300,301,5,84,0,0,301,46,1,0,0,0,
		302,303,5,85,0,0,303,304,5,73,0,0,304,305,5,78,0,0,305,306,5,84,0,0,306,
		48,1,0,0,0,307,308,5,85,0,0,308,309,5,68,0,0,309,310,5,73,0,0,310,311,
		5,78,0,0,311,312,5,84,0,0,312,50,1,0,0,0,313,314,5,85,0,0,314,315,5,76,
		0,0,315,316,5,73,0,0,316,317,5,78,0,0,317,318,5,84,0,0,318,52,1,0,0,0,
		319,320,5,82,0,0,320,321,5,69,0,0,321,322,5,65,0,0,322,323,5,76,0,0,323,
		54,1,0,0,0,324,325,5,76,0,0,325,326,5,82,0,0,326,327,5,69,0,0,327,328,
		5,65,0,0,328,329,5,76,0,0,329,56,1,0,0,0,330,331,5,84,0,0,331,332,5,73,
		0,0,332,333,5,77,0,0,333,334,5,69,0,0,334,58,1,0,0,0,335,336,5,68,0,0,
		336,337,5,65,0,0,337,338,5,84,0,0,338,339,5,69,0,0,339,60,1,0,0,0,340,
		341,5,84,0,0,341,342,5,73,0,0,342,343,5,77,0,0,343,344,5,69,0,0,344,345,
		5,95,0,0,345,346,5,79,0,0,346,347,5,70,0,0,347,348,5,95,0,0,348,349,5,
		68,0,0,349,350,5,65,0,0,350,351,5,89,0,0,351,62,1,0,0,0,352,353,5,68,0,
		0,353,354,5,65,0,0,354,355,5,84,0,0,355,356,5,69,0,0,356,357,5,95,0,0,
		357,358,5,65,0,0,358,359,5,78,0,0,359,360,5,68,0,0,360,361,5,95,0,0,361,
		362,5,84,0,0,362,363,5,73,0,0,363,364,5,77,0,0,364,365,5,69,0,0,365,64,
		1,0,0,0,366,367,5,83,0,0,367,368,5,84,0,0,368,369,5,82,0,0,369,370,5,73,
		0,0,370,371,5,78,0,0,371,372,5,71,0,0,372,66,1,0,0,0,373,374,5,65,0,0,
		374,375,5,78,0,0,375,376,5,89,0,0,376,68,1,0,0,0,377,378,5,65,0,0,378,
		379,5,78,0,0,379,380,5,89,0,0,380,381,5,95,0,0,381,382,5,66,0,0,382,383,
		5,73,0,0,383,384,5,84,0,0,384,70,1,0,0,0,385,386,5,65,0,0,386,387,5,78,
		0,0,387,388,5,89,0,0,388,389,5,95,0,0,389,390,5,78,0,0,390,391,5,85,0,
		0,391,392,5,77,0,0,392,72,1,0,0,0,393,394,5,65,0,0,394,395,5,78,0,0,395,
		396,5,89,0,0,396,397,5,95,0,0,397,398,5,68,0,0,398,399,5,65,0,0,399,400,
		5,84,0,0,400,401,5,69,0,0,401,74,1,0,0,0,402,403,5,65,0,0,403,404,5,78,
		0,0,404,405,5,89,0,0,405,406,5,95,0,0,406,407,5,73,0,0,407,408,5,78,0,
		0,408,409,5,84,0,0,409,76,1,0,0,0,410,411,5,65,0,0,411,412,5,78,0,0,412,
		413,5,89,0,0,413,414,5,95,0,0,414,415,5,82,0,0,415,416,5,69,0,0,416,417,
		5,65,0,0,417,418,5,76,0,0,418,78,1,0,0,0,419,420,5,58,0,0,420,421,5,61,
		0,0,421,80,1,0,0,0,422,423,5,65,0,0,423,424,5,78,0,0,424,427,5,68,0,0,
		425,427,5,38,0,0,426,422,1,0,0,0,426,425,1,0,0,0,427,82,1,0,0,0,428,429,
		5,79,0,0,429,430,5,82,0,0,430,84,1,0,0,0,431,432,5,78,0,0,432,433,5,79,
		0,0,433,434,5,84,0,0,434,86,1,0,0,0,435,436,5,88,0,0,436,437,5,79,0,0,
		437,438,5,82,0,0,438,88,1,0,0,0,439,440,5,58,0,0,440,90,1,0,0,0,441,442,
		5,59,0,0,442,92,1,0,0,0,443,444,5,46,0,0,444,94,1,0,0,0,445,446,5,44,0,
		0,446,96,1,0,0,0,447,448,5,40,0,0,448,98,1,0,0,0,449,450,5,41,0,0,450,
		100,1,0,0,0,451,452,5,91,0,0,452,102,1,0,0,0,453,454,5,93,0,0,454,104,
		1,0,0,0,455,456,5,123,0,0,456,106,1,0,0,0,457,458,5,125,0,0,458,108,1,
		0,0,0,459,460,5,35,0,0,460,110,1,0,0,0,461,462,5,94,0,0,462,112,1,0,0,
		0,463,464,5,37,0,0,464,114,1,0,0,0,465,466,5,37,0,0,466,467,7,0,0,0,467,
		468,6,57,0,0,468,116,1,0,0,0,469,473,7,1,0,0,470,472,7,0,0,0,471,470,1,
		0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,482,1,0,0,0,
		475,473,1,0,0,0,476,478,5,46,0,0,477,479,7,0,0,0,478,477,1,0,0,0,479,480,
		1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,476,1,0,0,
		0,482,483,1,0,0,0,483,118,1,0,0,0,484,485,7,2,0,0,485,486,5,35,0,0,486,
		490,7,1,0,0,487,489,7,0,0,0,488,487,1,0,0,0,489,492,1,0,0,0,490,488,1,
		0,0,0,490,491,1,0,0,0,491,493,1,0,0,0,492,490,1,0,0,0,493,494,5,115,0,
		0,494,120,1,0,0,0,495,499,7,3,0,0,496,498,7,4,0,0,497,496,1,0,0,0,498,
		501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,122,1,0,0,0,501,499,1,
		0,0,0,502,503,5,47,0,0,503,504,5,47,0,0,504,508,1,0,0,0,505,507,9,0,0,
		0,506,505,1,0,0,0,507,510,1,0,0,0,508,509,1,0,0,0,508,506,1,0,0,0,509,
		511,1,0,0,0,510,508,1,0,0,0,511,512,6,61,1,0,512,124,1,0,0,0,513,514,5,
		47,0,0,514,515,5,42,0,0,515,519,1,0,0,0,516,518,9,0,0,0,517,516,1,0,0,
		0,518,521,1,0,0,0,519,520,1,0,0,0,519,517,1,0,0,0,520,522,1,0,0,0,521,
		519,1,0,0,0,522,523,5,42,0,0,523,524,5,47,0,0,524,525,1,0,0,0,525,526,
		6,62,1,0,526,126,1,0,0,0,527,528,5,40,0,0,528,529,5,42,0,0,529,533,1,0,
		0,0,530,532,9,0,0,0,531,530,1,0,0,0,532,535,1,0,0,0,533,534,1,0,0,0,533,
		531,1,0,0,0,534,536,1,0,0,0,535,533,1,0,0,0,536,537,5,42,0,0,537,538,5,
		41,0,0,538,539,1,0,0,0,539,540,6,63,1,0,540,128,1,0,0,0,541,542,7,5,0,
		0,542,543,1,0,0,0,543,544,6,64,1,0,544,130,1,0,0,0,10,0,426,473,480,482,
		490,499,508,519,533,2,1,57,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
