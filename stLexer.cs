//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/kryst/Desktop/Praca magisterska/st-grammar/st.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class stLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, PROGRAM=6, END_PROGRAM=7, SIGNED_INT=8, 
		UNSIGNED_INT=9, BINARY_INT=10, OCTAL_INT=11, HEX_INT=12, SIMPLE_REAL=13, 
		BOOLEAN=14, USINT=15, UINT=16, UDINT=17, ULINT=18, SINT=19, INT=20, DINT=21, 
		LINT=22, REAL=23, LREAL=24, BYTE=25, WORD=26, DWORD=27, LWORD=28, BOOL=29, 
		DOT=30, IDENTIFIER=31, PRAGMA=32, LINE_COMMENT=33, SLASH_COMMENT=34, BRACE_COMMENT=35, 
		WHITESPACE=36;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "PROGRAM", "END_PROGRAM", "SIGNED_INT", 
		"UNSIGNED_INT", "BINARY_INT", "OCTAL_INT", "HEX_INT", "SIMPLE_REAL", "BOOLEAN", 
		"USINT", "UINT", "UDINT", "ULINT", "SINT", "INT", "DINT", "LINT", "REAL", 
		"LREAL", "BYTE", "WORD", "DWORD", "LWORD", "BOOL", "DOT", "NON_DIGIT", 
		"DIGIT", "BIT", "OCTAL_DIGIT", "HEX_DIGIT", "IDENTIFIER", "PRAGMA", "LINE_COMMENT", 
		"SLASH_COMMENT", "BRACE_COMMENT", "WHITESPACE"
	};


	public stLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public stLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'#'", "'E'", "'0'", "'1'", "'PROGRAM'", "'END_PROGRAM'", 
		null, null, null, null, null, null, null, "'USINT'", "'UINT'", "'UDINT'", 
		"'ULINT'", "'SINT'", "'INT'", "'DINT'", "'LINT'", "'REAL'", "'LREAL'", 
		"'BYTE'", "'WORD'", "'DWORD'", "'LWORD'", "'BOOL'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "PROGRAM", "END_PROGRAM", "SIGNED_INT", 
		"UNSIGNED_INT", "BINARY_INT", "OCTAL_INT", "HEX_INT", "SIMPLE_REAL", "BOOLEAN", 
		"USINT", "UINT", "UDINT", "ULINT", "SINT", "INT", "DINT", "LINT", "REAL", 
		"LREAL", "BYTE", "WORD", "DWORD", "LWORD", "BOOL", "DOT", "IDENTIFIER", 
		"PRAGMA", "LINE_COMMENT", "SLASH_COMMENT", "BRACE_COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "st.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static stLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,36,337,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,3,8,119,8,8,1,8,
		5,8,122,8,8,10,8,12,8,125,9,8,1,9,1,9,1,9,1,9,3,9,131,8,9,1,9,4,9,134,
		8,9,11,9,12,9,135,1,10,1,10,1,10,1,10,3,10,142,8,10,1,10,4,10,145,8,10,
		11,10,12,10,146,1,11,1,11,1,11,1,11,1,11,3,11,154,8,11,1,11,4,11,157,8,
		11,11,11,12,11,158,1,12,1,12,3,12,163,8,12,1,12,1,12,1,12,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,177,8,13,1,14,1,14,1,14,1,14,1,14,
		1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
		1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,
		1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
		1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
		1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
		1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,
		1,33,1,34,1,34,1,35,1,35,1,35,5,35,274,8,35,10,35,12,35,277,9,35,1,36,
		1,36,5,36,281,8,36,10,36,12,36,284,9,36,1,36,1,36,1,36,1,36,1,37,1,37,
		1,37,1,37,5,37,294,8,37,10,37,12,37,297,9,37,1,37,1,37,1,38,1,38,1,38,
		1,38,1,38,5,38,306,8,38,10,38,12,38,309,9,38,1,38,1,38,1,38,1,38,1,38,
		1,39,1,39,1,39,1,39,1,39,5,39,321,8,39,10,39,12,39,324,9,39,1,39,1,39,
		1,39,1,39,1,39,1,40,4,40,332,8,40,11,40,12,40,333,1,40,1,40,3,282,307,
		322,0,41,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,55,28,57,29,59,30,61,0,63,0,65,0,67,0,69,0,71,31,73,32,
		75,33,77,34,79,35,81,36,1,0,8,2,0,43,43,45,45,3,0,65,90,95,95,97,122,1,
		0,48,57,1,0,48,49,1,0,48,55,3,0,48,57,65,70,97,102,2,0,10,10,13,13,3,0,
		9,10,13,13,32,32,350,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
		0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,1,83,1,0,0,
		0,3,85,1,0,0,0,5,87,1,0,0,0,7,89,1,0,0,0,9,91,1,0,0,0,11,93,1,0,0,0,13,
		101,1,0,0,0,15,113,1,0,0,0,17,116,1,0,0,0,19,126,1,0,0,0,21,137,1,0,0,
		0,23,148,1,0,0,0,25,162,1,0,0,0,27,176,1,0,0,0,29,178,1,0,0,0,31,184,1,
		0,0,0,33,189,1,0,0,0,35,195,1,0,0,0,37,201,1,0,0,0,39,206,1,0,0,0,41,210,
		1,0,0,0,43,215,1,0,0,0,45,220,1,0,0,0,47,225,1,0,0,0,49,231,1,0,0,0,51,
		236,1,0,0,0,53,241,1,0,0,0,55,247,1,0,0,0,57,253,1,0,0,0,59,258,1,0,0,
		0,61,260,1,0,0,0,63,262,1,0,0,0,65,264,1,0,0,0,67,266,1,0,0,0,69,268,1,
		0,0,0,71,270,1,0,0,0,73,278,1,0,0,0,75,289,1,0,0,0,77,300,1,0,0,0,79,315,
		1,0,0,0,81,331,1,0,0,0,83,84,5,59,0,0,84,2,1,0,0,0,85,86,5,35,0,0,86,4,
		1,0,0,0,87,88,5,69,0,0,88,6,1,0,0,0,89,90,5,48,0,0,90,8,1,0,0,0,91,92,
		5,49,0,0,92,10,1,0,0,0,93,94,5,80,0,0,94,95,5,82,0,0,95,96,5,79,0,0,96,
		97,5,71,0,0,97,98,5,82,0,0,98,99,5,65,0,0,99,100,5,77,0,0,100,12,1,0,0,
		0,101,102,5,69,0,0,102,103,5,78,0,0,103,104,5,68,0,0,104,105,5,95,0,0,
		105,106,5,80,0,0,106,107,5,82,0,0,107,108,5,79,0,0,108,109,5,71,0,0,109,
		110,5,82,0,0,110,111,5,65,0,0,111,112,5,77,0,0,112,14,1,0,0,0,113,114,
		7,0,0,0,114,115,3,17,8,0,115,16,1,0,0,0,116,123,3,63,31,0,117,119,5,95,
		0,0,118,117,1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,122,3,63,31,0,
		121,118,1,0,0,0,122,125,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,18,
		1,0,0,0,125,123,1,0,0,0,126,127,5,50,0,0,127,128,5,35,0,0,128,133,1,0,
		0,0,129,131,5,95,0,0,130,129,1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,
		134,3,65,32,0,133,130,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,
		1,0,0,0,136,20,1,0,0,0,137,138,5,56,0,0,138,139,5,35,0,0,139,144,1,0,0,
		0,140,142,5,95,0,0,141,140,1,0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,
		145,3,67,33,0,144,141,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,
		1,0,0,0,147,22,1,0,0,0,148,149,5,49,0,0,149,150,5,54,0,0,150,151,5,35,
		0,0,151,156,1,0,0,0,152,154,5,95,0,0,153,152,1,0,0,0,153,154,1,0,0,0,154,
		155,1,0,0,0,155,157,3,69,34,0,156,153,1,0,0,0,157,158,1,0,0,0,158,156,
		1,0,0,0,158,159,1,0,0,0,159,24,1,0,0,0,160,163,3,15,7,0,161,163,3,17,8,
		0,162,160,1,0,0,0,162,161,1,0,0,0,163,164,1,0,0,0,164,165,3,59,29,0,165,
		166,3,17,8,0,166,26,1,0,0,0,167,168,5,70,0,0,168,169,5,65,0,0,169,170,
		5,76,0,0,170,171,5,83,0,0,171,177,5,69,0,0,172,173,5,84,0,0,173,174,5,
		82,0,0,174,175,5,85,0,0,175,177,5,69,0,0,176,167,1,0,0,0,176,172,1,0,0,
		0,177,28,1,0,0,0,178,179,5,85,0,0,179,180,5,83,0,0,180,181,5,73,0,0,181,
		182,5,78,0,0,182,183,5,84,0,0,183,30,1,0,0,0,184,185,5,85,0,0,185,186,
		5,73,0,0,186,187,5,78,0,0,187,188,5,84,0,0,188,32,1,0,0,0,189,190,5,85,
		0,0,190,191,5,68,0,0,191,192,5,73,0,0,192,193,5,78,0,0,193,194,5,84,0,
		0,194,34,1,0,0,0,195,196,5,85,0,0,196,197,5,76,0,0,197,198,5,73,0,0,198,
		199,5,78,0,0,199,200,5,84,0,0,200,36,1,0,0,0,201,202,5,83,0,0,202,203,
		5,73,0,0,203,204,5,78,0,0,204,205,5,84,0,0,205,38,1,0,0,0,206,207,5,73,
		0,0,207,208,5,78,0,0,208,209,5,84,0,0,209,40,1,0,0,0,210,211,5,68,0,0,
		211,212,5,73,0,0,212,213,5,78,0,0,213,214,5,84,0,0,214,42,1,0,0,0,215,
		216,5,76,0,0,216,217,5,73,0,0,217,218,5,78,0,0,218,219,5,84,0,0,219,44,
		1,0,0,0,220,221,5,82,0,0,221,222,5,69,0,0,222,223,5,65,0,0,223,224,5,76,
		0,0,224,46,1,0,0,0,225,226,5,76,0,0,226,227,5,82,0,0,227,228,5,69,0,0,
		228,229,5,65,0,0,229,230,5,76,0,0,230,48,1,0,0,0,231,232,5,66,0,0,232,
		233,5,89,0,0,233,234,5,84,0,0,234,235,5,69,0,0,235,50,1,0,0,0,236,237,
		5,87,0,0,237,238,5,79,0,0,238,239,5,82,0,0,239,240,5,68,0,0,240,52,1,0,
		0,0,241,242,5,68,0,0,242,243,5,87,0,0,243,244,5,79,0,0,244,245,5,82,0,
		0,245,246,5,68,0,0,246,54,1,0,0,0,247,248,5,76,0,0,248,249,5,87,0,0,249,
		250,5,79,0,0,250,251,5,82,0,0,251,252,5,68,0,0,252,56,1,0,0,0,253,254,
		5,66,0,0,254,255,5,79,0,0,255,256,5,79,0,0,256,257,5,76,0,0,257,58,1,0,
		0,0,258,259,5,46,0,0,259,60,1,0,0,0,260,261,7,1,0,0,261,62,1,0,0,0,262,
		263,7,2,0,0,263,64,1,0,0,0,264,265,7,3,0,0,265,66,1,0,0,0,266,267,7,4,
		0,0,267,68,1,0,0,0,268,269,7,5,0,0,269,70,1,0,0,0,270,275,3,61,30,0,271,
		274,3,61,30,0,272,274,3,63,31,0,273,271,1,0,0,0,273,272,1,0,0,0,274,277,
		1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,72,1,0,0,0,277,275,1,0,0,0,
		278,282,5,123,0,0,279,281,9,0,0,0,280,279,1,0,0,0,281,284,1,0,0,0,282,
		283,1,0,0,0,282,280,1,0,0,0,283,285,1,0,0,0,284,282,1,0,0,0,285,286,5,
		125,0,0,286,287,1,0,0,0,287,288,6,36,0,0,288,74,1,0,0,0,289,290,5,47,0,
		0,290,291,5,47,0,0,291,295,1,0,0,0,292,294,8,6,0,0,293,292,1,0,0,0,294,
		297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,
		0,0,0,298,299,6,37,0,0,299,76,1,0,0,0,300,301,5,47,0,0,301,302,5,42,0,
		0,302,307,1,0,0,0,303,306,3,77,38,0,304,306,9,0,0,0,305,303,1,0,0,0,305,
		304,1,0,0,0,306,309,1,0,0,0,307,308,1,0,0,0,307,305,1,0,0,0,308,310,1,
		0,0,0,309,307,1,0,0,0,310,311,5,42,0,0,311,312,5,47,0,0,312,313,1,0,0,
		0,313,314,6,38,0,0,314,78,1,0,0,0,315,316,5,40,0,0,316,317,5,42,0,0,317,
		322,1,0,0,0,318,321,3,79,39,0,319,321,9,0,0,0,320,318,1,0,0,0,320,319,
		1,0,0,0,321,324,1,0,0,0,322,323,1,0,0,0,322,320,1,0,0,0,323,325,1,0,0,
		0,324,322,1,0,0,0,325,326,5,42,0,0,326,327,5,41,0,0,327,328,1,0,0,0,328,
		329,6,39,0,0,329,80,1,0,0,0,330,332,7,7,0,0,331,330,1,0,0,0,332,333,1,
		0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,336,6,40,0,0,
		336,82,1,0,0,0,20,0,118,123,130,135,141,146,153,158,162,176,273,275,282,
		295,305,307,320,322,333,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
