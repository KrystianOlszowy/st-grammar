//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/kryst/Desktop/Praca magisterska/st-grammar/st.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class stLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, PROGRAM=13, END_PROGRAM=14, DIRECT_VARIABLE=15, 
		SINGLE_BYTE_STRING=16, DOUBLE_BYTE_STRING=17, DURATION=18, DATE_TIME_VALUE=19, 
		DATE_VALUE=20, CLOCK_TIME=21, GENERAL_REAL=22, SIGNED_INT=23, UNSIGNED_INT=24, 
		BINARY_INT=25, OCTAL_INT=26, HEX_INT=27, BOOLEAN=28, USINT=29, UINT=30, 
		UDINT=31, ULINT=32, SINT=33, INT=34, DINT=35, LINT=36, REAL=37, LREAL=38, 
		BYTE=39, WORD=40, DWORD=41, LWORD=42, BOOL=43, FALSE=44, TRUE=45, STRING=46, 
		WSTRING=47, CHAR=48, WCHAR=49, TIME=50, LTIME=51, TIME_OF_DAY=52, LTIME_OF_DAY=53, 
		DATE=54, LDATE=55, DATE_AND_TIME=56, LDATE_AND_TIME=57, DOT=58, PERCENT=59, 
		IDENTIFIER=60, PRAGMA=61, LINE_COMMENT=62, SLASH_COMMENT=63, BRACE_COMMENT=64, 
		WHITESPACE=65;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "PROGRAM", "END_PROGRAM", "DIRECT_VARIABLE", 
		"SINGLE_BYTE_STRING", "DOUBLE_BYTE_STRING", "DURATION", "DATE_TIME_VALUE", 
		"DATE_VALUE", "CLOCK_TIME", "GENERAL_REAL", "SIGNED_INT", "UNSIGNED_INT", 
		"BINARY_INT", "OCTAL_INT", "HEX_INT", "BOOLEAN", "USINT", "UINT", "UDINT", 
		"ULINT", "SINT", "INT", "DINT", "LINT", "REAL", "LREAL", "BYTE", "WORD", 
		"DWORD", "LWORD", "BOOL", "FALSE", "TRUE", "STRING", "WSTRING", "CHAR", 
		"WCHAR", "TIME", "LTIME", "TIME_OF_DAY", "LTIME_OF_DAY", "DATE", "LDATE", 
		"DATE_AND_TIME", "LDATE_AND_TIME", "DOT", "PERCENT", "NON_DIGIT", "DIGIT", 
		"BIT", "OCTAL_DIGIT", "HEX_DIGIT", "SINGLE_BYTE_CHAR", "DOUBLE_BYTE_CHAR", 
		"COMMON_CHAR", "TWO_CHAR_COMMON", "DURATION_UNIT", "IDENTIFIER", "PRAGMA", 
		"LINE_COMMENT", "SLASH_COMMENT", "BRACE_COMMENT", "WHITESPACE"
	};


	public stLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public stLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'#'", "'0'", "'1'", "'T'", "'LT'", "'TOD'", "'LTOD'", "'D'", 
		"'LD'", "'DT'", "'LDT'", "'PROGRAM'", "'END_PROGRAM'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'USINT'", 
		"'UINT'", "'UDINT'", "'ULINT'", "'SINT'", "'INT'", "'DINT'", "'LINT'", 
		"'REAL'", "'LREAL'", "'BYTE'", "'WORD'", "'DWORD'", "'LWORD'", "'BOOL'", 
		"'FALSE'", "'TRUE'", "'STRING'", "'WSTRING'", "'CHAR'", "'WCHAR'", "'TIME'", 
		"'LTIME'", "'TIME_OF_DAY'", "'LTIME_OF_DAY'", "'DATE'", "'LDATE'", "'DATE_AND_TIME'", 
		"'LDATE_AND_TIME'", "'.'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "PROGRAM", "END_PROGRAM", "DIRECT_VARIABLE", "SINGLE_BYTE_STRING", 
		"DOUBLE_BYTE_STRING", "DURATION", "DATE_TIME_VALUE", "DATE_VALUE", "CLOCK_TIME", 
		"GENERAL_REAL", "SIGNED_INT", "UNSIGNED_INT", "BINARY_INT", "OCTAL_INT", 
		"HEX_INT", "BOOLEAN", "USINT", "UINT", "UDINT", "ULINT", "SINT", "INT", 
		"DINT", "LINT", "REAL", "LREAL", "BYTE", "WORD", "DWORD", "LWORD", "BOOL", 
		"FALSE", "TRUE", "STRING", "WSTRING", "CHAR", "WCHAR", "TIME", "LTIME", 
		"TIME_OF_DAY", "LTIME_OF_DAY", "DATE", "LDATE", "DATE_AND_TIME", "LDATE_AND_TIME", 
		"DOT", "PERCENT", "IDENTIFIER", "PRAGMA", "LINE_COMMENT", "SLASH_COMMENT", 
		"BRACE_COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "st.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static stLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,65,681,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
		1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,213,8,14,10,14,12,14,216,
		9,14,1,15,1,15,5,15,220,8,15,10,15,12,15,223,9,15,1,15,1,15,1,16,1,16,
		5,16,229,8,16,10,16,12,16,232,9,16,1,16,1,16,1,17,3,17,237,8,17,1,17,4,
		17,240,8,17,11,17,12,17,241,1,17,1,17,3,17,246,8,17,4,17,248,8,17,11,17,
		12,17,249,1,17,4,17,253,8,17,11,17,12,17,254,1,17,1,17,4,17,259,8,17,11,
		17,12,17,260,3,17,263,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,21,3,21,293,8,21,1,21,1,21,1,21,1,21,1,21,1,21,3,
		21,301,8,21,3,21,303,8,21,1,22,1,22,1,22,1,23,1,23,3,23,310,8,23,1,23,
		5,23,313,8,23,10,23,12,23,316,9,23,1,24,1,24,1,24,1,24,3,24,322,8,24,1,
		24,4,24,325,8,24,11,24,12,24,326,1,25,1,25,1,25,1,25,3,25,333,8,25,1,25,
		4,25,336,8,25,11,25,12,25,337,1,26,1,26,1,26,1,26,1,26,3,26,345,8,26,1,
		26,4,26,348,8,26,11,26,12,26,349,1,27,1,27,3,27,354,8,27,1,28,1,28,1,28,
		1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,
		1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
		1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
		1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,
		1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
		1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,
		1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,
		1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,
		1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,
		1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
		1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
		1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,
		1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,3,64,571,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
		65,3,65,583,8,65,1,66,1,66,1,66,1,66,1,66,3,66,590,8,66,1,67,1,67,1,67,
		1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,604,8,67,1,68,1,68,1,
		68,1,68,1,68,1,68,1,68,3,68,613,8,68,1,69,1,69,1,69,5,69,618,8,69,10,69,
		12,69,621,9,69,1,70,1,70,5,70,625,8,70,10,70,12,70,628,9,70,1,70,1,70,
		1,70,1,70,1,71,1,71,1,71,1,71,5,71,638,8,71,10,71,12,71,641,9,71,1,71,
		1,71,1,72,1,72,1,72,1,72,1,72,5,72,650,8,72,10,72,12,72,653,9,72,1,72,
		1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,5,73,665,8,73,10,73,12,73,
		668,9,73,1,73,1,73,1,73,1,73,1,73,1,74,4,74,676,8,74,11,74,12,74,677,1,
		74,1,74,3,626,651,666,0,75,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
		10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
		22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
		34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
		46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
		57,115,58,117,59,119,0,121,0,123,0,125,0,127,0,129,0,131,0,133,0,135,0,
		137,0,139,60,141,61,143,62,145,63,147,64,149,65,1,0,13,3,0,73,73,77,77,
		81,81,4,0,66,66,68,68,76,76,87,88,2,0,43,43,45,45,3,0,65,90,95,95,97,122,
		1,0,48,57,1,0,48,49,1,0,48,55,3,0,48,57,65,70,97,102,4,0,32,33,35,35,37,
		38,40,47,3,0,58,64,91,96,123,126,4,0,68,68,72,72,77,77,83,83,2,0,10,10,
		13,13,3,0,9,10,13,13,32,32,719,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
		1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
		0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
		0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
		1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
		0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,
		0,0,0,0,117,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,
		0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,1,151,1,0,0,0,3,153,1,0,0,0,5,155,1,
		0,0,0,7,157,1,0,0,0,9,159,1,0,0,0,11,161,1,0,0,0,13,164,1,0,0,0,15,168,
		1,0,0,0,17,173,1,0,0,0,19,175,1,0,0,0,21,178,1,0,0,0,23,181,1,0,0,0,25,
		185,1,0,0,0,27,193,1,0,0,0,29,205,1,0,0,0,31,217,1,0,0,0,33,226,1,0,0,
		0,35,236,1,0,0,0,37,266,1,0,0,0,39,270,1,0,0,0,41,281,1,0,0,0,43,292,1,
		0,0,0,45,304,1,0,0,0,47,307,1,0,0,0,49,317,1,0,0,0,51,328,1,0,0,0,53,339,
		1,0,0,0,55,353,1,0,0,0,57,355,1,0,0,0,59,361,1,0,0,0,61,366,1,0,0,0,63,
		372,1,0,0,0,65,378,1,0,0,0,67,383,1,0,0,0,69,387,1,0,0,0,71,392,1,0,0,
		0,73,397,1,0,0,0,75,402,1,0,0,0,77,408,1,0,0,0,79,413,1,0,0,0,81,418,1,
		0,0,0,83,424,1,0,0,0,85,430,1,0,0,0,87,435,1,0,0,0,89,441,1,0,0,0,91,446,
		1,0,0,0,93,453,1,0,0,0,95,461,1,0,0,0,97,466,1,0,0,0,99,472,1,0,0,0,101,
		477,1,0,0,0,103,483,1,0,0,0,105,495,1,0,0,0,107,508,1,0,0,0,109,513,1,
		0,0,0,111,519,1,0,0,0,113,533,1,0,0,0,115,548,1,0,0,0,117,550,1,0,0,0,
		119,552,1,0,0,0,121,554,1,0,0,0,123,556,1,0,0,0,125,558,1,0,0,0,127,560,
		1,0,0,0,129,570,1,0,0,0,131,582,1,0,0,0,133,589,1,0,0,0,135,603,1,0,0,
		0,137,612,1,0,0,0,139,614,1,0,0,0,141,622,1,0,0,0,143,633,1,0,0,0,145,
		644,1,0,0,0,147,659,1,0,0,0,149,675,1,0,0,0,151,152,5,59,0,0,152,2,1,0,
		0,0,153,154,5,35,0,0,154,4,1,0,0,0,155,156,5,48,0,0,156,6,1,0,0,0,157,
		158,5,49,0,0,158,8,1,0,0,0,159,160,5,84,0,0,160,10,1,0,0,0,161,162,5,76,
		0,0,162,163,5,84,0,0,163,12,1,0,0,0,164,165,5,84,0,0,165,166,5,79,0,0,
		166,167,5,68,0,0,167,14,1,0,0,0,168,169,5,76,0,0,169,170,5,84,0,0,170,
		171,5,79,0,0,171,172,5,68,0,0,172,16,1,0,0,0,173,174,5,68,0,0,174,18,1,
		0,0,0,175,176,5,76,0,0,176,177,5,68,0,0,177,20,1,0,0,0,178,179,5,68,0,
		0,179,180,5,84,0,0,180,22,1,0,0,0,181,182,5,76,0,0,182,183,5,68,0,0,183,
		184,5,84,0,0,184,24,1,0,0,0,185,186,5,80,0,0,186,187,5,82,0,0,187,188,
		5,79,0,0,188,189,5,71,0,0,189,190,5,82,0,0,190,191,5,65,0,0,191,192,5,
		77,0,0,192,26,1,0,0,0,193,194,5,69,0,0,194,195,5,78,0,0,195,196,5,68,0,
		0,196,197,5,95,0,0,197,198,5,80,0,0,198,199,5,82,0,0,199,200,5,79,0,0,
		200,201,5,71,0,0,201,202,5,82,0,0,202,203,5,65,0,0,203,204,5,77,0,0,204,
		28,1,0,0,0,205,206,3,117,58,0,206,207,7,0,0,0,207,208,7,1,0,0,208,214,
		3,47,23,0,209,210,3,115,57,0,210,211,3,47,23,0,211,213,1,0,0,0,212,209,
		1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,30,1,0,0,0,
		216,214,1,0,0,0,217,221,5,39,0,0,218,220,3,129,64,0,219,218,1,0,0,0,220,
		223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,224,1,0,0,0,223,221,1,
		0,0,0,224,225,5,39,0,0,225,32,1,0,0,0,226,230,5,34,0,0,227,229,3,131,65,
		0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,
		233,1,0,0,0,232,230,1,0,0,0,233,234,5,34,0,0,234,34,1,0,0,0,235,237,7,
		2,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,247,1,0,0,0,238,240,3,121,60,
		0,239,238,1,0,0,0,240,241,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,
		243,1,0,0,0,243,245,3,137,68,0,244,246,5,95,0,0,245,244,1,0,0,0,245,246,
		1,0,0,0,246,248,1,0,0,0,247,239,1,0,0,0,248,249,1,0,0,0,249,247,1,0,0,
		0,249,250,1,0,0,0,250,252,1,0,0,0,251,253,3,121,60,0,252,251,1,0,0,0,253,
		254,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,262,1,0,0,0,256,258,3,
		115,57,0,257,259,3,121,60,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,
		0,0,0,260,261,1,0,0,0,261,263,1,0,0,0,262,256,1,0,0,0,262,263,1,0,0,0,
		263,264,1,0,0,0,264,265,3,137,68,0,265,36,1,0,0,0,266,267,3,39,19,0,267,
		268,5,45,0,0,268,269,3,41,20,0,269,38,1,0,0,0,270,271,3,121,60,0,271,272,
		3,121,60,0,272,273,3,121,60,0,273,274,3,121,60,0,274,275,5,45,0,0,275,
		276,3,121,60,0,276,277,3,121,60,0,277,278,5,45,0,0,278,279,3,121,60,0,
		279,280,3,121,60,0,280,40,1,0,0,0,281,282,3,121,60,0,282,283,3,121,60,
		0,283,284,5,58,0,0,284,285,3,121,60,0,285,286,3,121,60,0,286,287,5,58,
		0,0,287,288,3,47,23,0,288,289,3,115,57,0,289,290,3,47,23,0,290,42,1,0,
		0,0,291,293,7,2,0,0,292,291,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,
		295,3,47,23,0,295,296,3,115,57,0,296,302,3,47,23,0,297,300,5,69,0,0,298,
		301,3,45,22,0,299,301,3,47,23,0,300,298,1,0,0,0,300,299,1,0,0,0,301,303,
		1,0,0,0,302,297,1,0,0,0,302,303,1,0,0,0,303,44,1,0,0,0,304,305,7,2,0,0,
		305,306,3,47,23,0,306,46,1,0,0,0,307,314,3,121,60,0,308,310,5,95,0,0,309,
		308,1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,313,3,121,60,0,312,309,
		1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,48,1,0,0,0,
		316,314,1,0,0,0,317,318,5,50,0,0,318,319,5,35,0,0,319,324,1,0,0,0,320,
		322,5,95,0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,325,3,
		123,61,0,324,321,1,0,0,0,325,326,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,
		0,327,50,1,0,0,0,328,329,5,56,0,0,329,330,5,35,0,0,330,335,1,0,0,0,331,
		333,5,95,0,0,332,331,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,336,3,
		125,62,0,335,332,1,0,0,0,336,337,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,
		0,338,52,1,0,0,0,339,340,5,49,0,0,340,341,5,54,0,0,341,342,5,35,0,0,342,
		347,1,0,0,0,343,345,5,95,0,0,344,343,1,0,0,0,344,345,1,0,0,0,345,346,1,
		0,0,0,346,348,3,127,63,0,347,344,1,0,0,0,348,349,1,0,0,0,349,347,1,0,0,
		0,349,350,1,0,0,0,350,54,1,0,0,0,351,354,3,87,43,0,352,354,3,89,44,0,353,
		351,1,0,0,0,353,352,1,0,0,0,354,56,1,0,0,0,355,356,5,85,0,0,356,357,5,
		83,0,0,357,358,5,73,0,0,358,359,5,78,0,0,359,360,5,84,0,0,360,58,1,0,0,
		0,361,362,5,85,0,0,362,363,5,73,0,0,363,364,5,78,0,0,364,365,5,84,0,0,
		365,60,1,0,0,0,366,367,5,85,0,0,367,368,5,68,0,0,368,369,5,73,0,0,369,
		370,5,78,0,0,370,371,5,84,0,0,371,62,1,0,0,0,372,373,5,85,0,0,373,374,
		5,76,0,0,374,375,5,73,0,0,375,376,5,78,0,0,376,377,5,84,0,0,377,64,1,0,
		0,0,378,379,5,83,0,0,379,380,5,73,0,0,380,381,5,78,0,0,381,382,5,84,0,
		0,382,66,1,0,0,0,383,384,5,73,0,0,384,385,5,78,0,0,385,386,5,84,0,0,386,
		68,1,0,0,0,387,388,5,68,0,0,388,389,5,73,0,0,389,390,5,78,0,0,390,391,
		5,84,0,0,391,70,1,0,0,0,392,393,5,76,0,0,393,394,5,73,0,0,394,395,5,78,
		0,0,395,396,5,84,0,0,396,72,1,0,0,0,397,398,5,82,0,0,398,399,5,69,0,0,
		399,400,5,65,0,0,400,401,5,76,0,0,401,74,1,0,0,0,402,403,5,76,0,0,403,
		404,5,82,0,0,404,405,5,69,0,0,405,406,5,65,0,0,406,407,5,76,0,0,407,76,
		1,0,0,0,408,409,5,66,0,0,409,410,5,89,0,0,410,411,5,84,0,0,411,412,5,69,
		0,0,412,78,1,0,0,0,413,414,5,87,0,0,414,415,5,79,0,0,415,416,5,82,0,0,
		416,417,5,68,0,0,417,80,1,0,0,0,418,419,5,68,0,0,419,420,5,87,0,0,420,
		421,5,79,0,0,421,422,5,82,0,0,422,423,5,68,0,0,423,82,1,0,0,0,424,425,
		5,76,0,0,425,426,5,87,0,0,426,427,5,79,0,0,427,428,5,82,0,0,428,429,5,
		68,0,0,429,84,1,0,0,0,430,431,5,66,0,0,431,432,5,79,0,0,432,433,5,79,0,
		0,433,434,5,76,0,0,434,86,1,0,0,0,435,436,5,70,0,0,436,437,5,65,0,0,437,
		438,5,76,0,0,438,439,5,83,0,0,439,440,5,69,0,0,440,88,1,0,0,0,441,442,
		5,84,0,0,442,443,5,82,0,0,443,444,5,85,0,0,444,445,5,69,0,0,445,90,1,0,
		0,0,446,447,5,83,0,0,447,448,5,84,0,0,448,449,5,82,0,0,449,450,5,73,0,
		0,450,451,5,78,0,0,451,452,5,71,0,0,452,92,1,0,0,0,453,454,5,87,0,0,454,
		455,5,83,0,0,455,456,5,84,0,0,456,457,5,82,0,0,457,458,5,73,0,0,458,459,
		5,78,0,0,459,460,5,71,0,0,460,94,1,0,0,0,461,462,5,67,0,0,462,463,5,72,
		0,0,463,464,5,65,0,0,464,465,5,82,0,0,465,96,1,0,0,0,466,467,5,87,0,0,
		467,468,5,67,0,0,468,469,5,72,0,0,469,470,5,65,0,0,470,471,5,82,0,0,471,
		98,1,0,0,0,472,473,5,84,0,0,473,474,5,73,0,0,474,475,5,77,0,0,475,476,
		5,69,0,0,476,100,1,0,0,0,477,478,5,76,0,0,478,479,5,84,0,0,479,480,5,73,
		0,0,480,481,5,77,0,0,481,482,5,69,0,0,482,102,1,0,0,0,483,484,5,84,0,0,
		484,485,5,73,0,0,485,486,5,77,0,0,486,487,5,69,0,0,487,488,5,95,0,0,488,
		489,5,79,0,0,489,490,5,70,0,0,490,491,5,95,0,0,491,492,5,68,0,0,492,493,
		5,65,0,0,493,494,5,89,0,0,494,104,1,0,0,0,495,496,5,76,0,0,496,497,5,84,
		0,0,497,498,5,73,0,0,498,499,5,77,0,0,499,500,5,69,0,0,500,501,5,95,0,
		0,501,502,5,79,0,0,502,503,5,70,0,0,503,504,5,95,0,0,504,505,5,68,0,0,
		505,506,5,65,0,0,506,507,5,89,0,0,507,106,1,0,0,0,508,509,5,68,0,0,509,
		510,5,65,0,0,510,511,5,84,0,0,511,512,5,69,0,0,512,108,1,0,0,0,513,514,
		5,76,0,0,514,515,5,68,0,0,515,516,5,65,0,0,516,517,5,84,0,0,517,518,5,
		69,0,0,518,110,1,0,0,0,519,520,5,68,0,0,520,521,5,65,0,0,521,522,5,84,
		0,0,522,523,5,69,0,0,523,524,5,95,0,0,524,525,5,65,0,0,525,526,5,78,0,
		0,526,527,5,68,0,0,527,528,5,95,0,0,528,529,5,84,0,0,529,530,5,73,0,0,
		530,531,5,77,0,0,531,532,5,69,0,0,532,112,1,0,0,0,533,534,5,76,0,0,534,
		535,5,68,0,0,535,536,5,65,0,0,536,537,5,84,0,0,537,538,5,69,0,0,538,539,
		5,95,0,0,539,540,5,65,0,0,540,541,5,78,0,0,541,542,5,68,0,0,542,543,5,
		95,0,0,543,544,5,84,0,0,544,545,5,73,0,0,545,546,5,77,0,0,546,547,5,69,
		0,0,547,114,1,0,0,0,548,549,5,46,0,0,549,116,1,0,0,0,550,551,5,37,0,0,
		551,118,1,0,0,0,552,553,7,3,0,0,553,120,1,0,0,0,554,555,7,4,0,0,555,122,
		1,0,0,0,556,557,7,5,0,0,557,124,1,0,0,0,558,559,7,6,0,0,559,126,1,0,0,
		0,560,561,7,7,0,0,561,128,1,0,0,0,562,571,3,133,66,0,563,564,5,36,0,0,
		564,571,5,39,0,0,565,571,5,34,0,0,566,567,5,36,0,0,567,568,3,127,63,0,
		568,569,3,127,63,0,569,571,1,0,0,0,570,562,1,0,0,0,570,563,1,0,0,0,570,
		565,1,0,0,0,570,566,1,0,0,0,571,130,1,0,0,0,572,583,3,133,66,0,573,583,
		5,39,0,0,574,575,5,36,0,0,575,583,5,34,0,0,576,577,5,36,0,0,577,578,3,
		127,63,0,578,579,3,127,63,0,579,580,3,127,63,0,580,581,3,127,63,0,581,
		583,1,0,0,0,582,572,1,0,0,0,582,573,1,0,0,0,582,574,1,0,0,0,582,576,1,
		0,0,0,583,132,1,0,0,0,584,590,7,8,0,0,585,590,3,121,60,0,586,590,3,119,
		59,0,587,590,7,9,0,0,588,590,3,135,67,0,589,584,1,0,0,0,589,585,1,0,0,
		0,589,586,1,0,0,0,589,587,1,0,0,0,589,588,1,0,0,0,590,134,1,0,0,0,591,
		592,5,36,0,0,592,604,5,36,0,0,593,594,5,36,0,0,594,604,5,76,0,0,595,596,
		5,36,0,0,596,604,5,78,0,0,597,598,5,36,0,0,598,604,5,80,0,0,599,600,5,
		36,0,0,600,604,5,82,0,0,601,602,5,36,0,0,602,604,5,84,0,0,603,591,1,0,
		0,0,603,593,1,0,0,0,603,595,1,0,0,0,603,597,1,0,0,0,603,599,1,0,0,0,603,
		601,1,0,0,0,604,136,1,0,0,0,605,613,7,10,0,0,606,607,5,77,0,0,607,613,
		5,83,0,0,608,609,5,85,0,0,609,613,5,83,0,0,610,611,5,78,0,0,611,613,5,
		83,0,0,612,605,1,0,0,0,612,606,1,0,0,0,612,608,1,0,0,0,612,610,1,0,0,0,
		613,138,1,0,0,0,614,619,3,119,59,0,615,618,3,119,59,0,616,618,3,121,60,
		0,617,615,1,0,0,0,617,616,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,
		620,1,0,0,0,620,140,1,0,0,0,621,619,1,0,0,0,622,626,5,123,0,0,623,625,
		9,0,0,0,624,623,1,0,0,0,625,628,1,0,0,0,626,627,1,0,0,0,626,624,1,0,0,
		0,627,629,1,0,0,0,628,626,1,0,0,0,629,630,5,125,0,0,630,631,1,0,0,0,631,
		632,6,70,0,0,632,142,1,0,0,0,633,634,5,47,0,0,634,635,5,47,0,0,635,639,
		1,0,0,0,636,638,8,11,0,0,637,636,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,
		0,639,640,1,0,0,0,640,642,1,0,0,0,641,639,1,0,0,0,642,643,6,71,0,0,643,
		144,1,0,0,0,644,645,5,47,0,0,645,646,5,42,0,0,646,651,1,0,0,0,647,650,
		3,145,72,0,648,650,9,0,0,0,649,647,1,0,0,0,649,648,1,0,0,0,650,653,1,0,
		0,0,651,652,1,0,0,0,651,649,1,0,0,0,652,654,1,0,0,0,653,651,1,0,0,0,654,
		655,5,42,0,0,655,656,5,47,0,0,656,657,1,0,0,0,657,658,6,72,0,0,658,146,
		1,0,0,0,659,660,5,40,0,0,660,661,5,42,0,0,661,666,1,0,0,0,662,665,3,147,
		73,0,663,665,9,0,0,0,664,662,1,0,0,0,664,663,1,0,0,0,665,668,1,0,0,0,666,
		667,1,0,0,0,666,664,1,0,0,0,667,669,1,0,0,0,668,666,1,0,0,0,669,670,5,
		42,0,0,670,671,5,41,0,0,671,672,1,0,0,0,672,673,6,73,0,0,673,148,1,0,0,
		0,674,676,7,12,0,0,675,674,1,0,0,0,676,677,1,0,0,0,677,675,1,0,0,0,677,
		678,1,0,0,0,678,679,1,0,0,0,679,680,6,74,0,0,680,150,1,0,0,0,37,0,214,
		221,230,236,241,245,249,254,260,262,292,300,302,309,314,321,326,332,337,
		344,349,353,570,582,589,603,612,617,619,626,639,649,651,664,666,677,1,
		0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
