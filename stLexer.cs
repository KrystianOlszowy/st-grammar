//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/kryst/Desktop/Praca magisterska/st-grammar/st.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class stLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LINE_COMMENT=3, COMMENT=4, WHITESPACE=5;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "LINE_COMMENT", "COMMENT", "WHITESPACE"
	};


	public stLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public stLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'id'", "'dog'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LINE_COMMENT", "COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "st.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static stLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,5,55,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,1,0,1,0,1,1,
		1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,23,8,2,10,2,12,2,26,9,2,1,2,3,2,29,8,2,
		1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,39,8,3,10,3,12,3,42,9,3,1,3,1,3,1,
		3,1,3,1,3,1,4,4,4,50,8,4,11,4,12,4,51,1,4,1,4,2,24,40,0,5,1,1,3,2,5,3,
		7,4,9,5,1,0,5,2,0,73,73,105,105,2,0,68,68,100,100,2,0,79,79,111,111,2,
		0,71,71,103,103,3,0,9,10,13,13,32,32,58,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,1,11,1,0,0,0,3,14,1,0,0,0,5,18,1,0,0,0,7,
		34,1,0,0,0,9,49,1,0,0,0,11,12,7,0,0,0,12,13,7,1,0,0,13,2,1,0,0,0,14,15,
		7,1,0,0,15,16,7,2,0,0,16,17,7,3,0,0,17,4,1,0,0,0,18,19,5,47,0,0,19,20,
		5,47,0,0,20,24,1,0,0,0,21,23,9,0,0,0,22,21,1,0,0,0,23,26,1,0,0,0,24,25,
		1,0,0,0,24,22,1,0,0,0,25,28,1,0,0,0,26,24,1,0,0,0,27,29,5,13,0,0,28,27,
		1,0,0,0,28,29,1,0,0,0,29,30,1,0,0,0,30,31,5,10,0,0,31,32,1,0,0,0,32,33,
		6,2,0,0,33,6,1,0,0,0,34,35,5,47,0,0,35,36,5,42,0,0,36,40,1,0,0,0,37,39,
		9,0,0,0,38,37,1,0,0,0,39,42,1,0,0,0,40,41,1,0,0,0,40,38,1,0,0,0,41,43,
		1,0,0,0,42,40,1,0,0,0,43,44,5,42,0,0,44,45,5,47,0,0,45,46,1,0,0,0,46,47,
		6,3,0,0,47,8,1,0,0,0,48,50,7,4,0,0,49,48,1,0,0,0,50,51,1,0,0,0,51,49,1,
		0,0,0,51,52,1,0,0,0,52,53,1,0,0,0,53,54,6,4,0,0,54,10,1,0,0,0,5,0,24,28,
		40,51,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
